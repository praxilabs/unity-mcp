---
description: Unity MCP tools reference and capabilities guide
alwaysApply: false
---

<rule>
  <meta>
    <title>Unity MCP Tools Reference</title>
    <description>Essential Unity MCP tool usage patterns and requirements</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-scriptableobject">Triggered when creating a new XNode Graph Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>Before creating any node with mcp_unityMCP_create_xnode_node, you MUST fetch the specific node rule file from MCP/GraphLogic/Category/NodeType path to get exact required components. Always go to the router rules first. Description metadata must contain required components list and tooltip must explain node functionality. Description MUST be formatted in markdown for Unity Editor readability.</description>
      <examples>
        <example title="Node Creation Protocol">
          <correct-example title="Complete node creation workflow" conditions="Creating a node in graph" expected-result="Properly configured node with metadata" correctness-criteria="Follows complete workflow including rule fetch and proper formatting"><![CDATA[
            // First: fetch_rules(["MCP/GraphLogic/Click/ClickNodesRouter"]) to get router, then specific node rule
            description: 
              "This Node is responsible for 1, 2, and 3.
               Brief on how to use the node.
               Node Setup Instructions:
              (Add requirement from the rule file of the node)
               (or "None" if no requirements)
              "
            tooltip: "Brief explanation of what the node does"
          ]]></correct-example>
          <incorrect-example title="Incomplete node creation" conditions="Creating a node in graph" expected-result="Properly configured node with metadata" incorrectness-criteria="Missing required metadata or skipping rule file fetch">// Skipping fetch_rules() and using generic components
            description: "" tooltip: ""</incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="critical">
      <description>Always connect nodes using proper port connections: output ports connect to input ports and vice versa. Use exact auto-generated node names (NodeType_InstanceID format) for all operations. You may create shortened names for readability but never change the node type identifier.</description>
      <examples>
        <example title="Connection Standards">
          <correct-example title="Proper connection pattern" conditions="Connecting nodes" expected-result="Valid port connection" correctness-criteria="Uses proper port types and exact names">NodeA_12345(output) → NodeB_67890(input)</correct-example>
          <incorrect-example title="Invalid connection pattern" conditions="Connecting nodes" expected-result="Valid port connection" incorrectness-criteria="Uses wrong port types or custom names">NodeA(input) ← NodeB(output)</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Follow the Graph Validation Rules for all graph operations. Reference the graph-validation-rules.mdc for complete validation requirements and procedures.</description>
    </requirement>
    <requirement priority="medium">
      <description>Use MCP tools based on their specific functionality: mcp_unityMCP_create_scriptable_object for ExperimentData/ExperimentItemsRegistry/StepsGraph, mcp_unityMCP_manage_gameobject for GameObject operations with component_properties, mcp_unityMCP_read_console for Unity console messages, mcp_unityMCP_manage_editor for editor state control. Tool names indicate their specific functionality.</description>
      <examples>
        <example title="Tool Selection">
          <correct-example title="Correct tool usage" conditions="Creating experiment assets" expected-result="Proper tool selection for task" correctness-criteria="Uses appropriate tool based on functionality">ExperimentData creation → mcp_unityMCP_create_scriptable_object (name indicates ScriptableObject creation)</correct-example>
          <incorrect-example title="Incorrect tool usage" conditions="Creating experiment assets" expected-result="Proper tool selection for task" incorrectness-criteria="Uses wrong tool for operation">ExperimentData creation → mcp_unityMCP_manage_gameobject (name indicates GameObject management)</incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <context description="Additional Unity MCP tool capabilities">
    mcp_unityMCP_read_console supports message types: error, warning, log, all. mcp_unityMCP_manage_editor supports actions: play, pause, get_state, set_active_tool. mcp_unityMCP_execute_menu_item executes Unity menu items via menu_path. Always use these tools according to their specific capabilities and parameter requirements.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
  </references>
</rule>