---
description: Unity MCP Bootstrap Entry Point - Complete workflow guide for XNode graph operations
alwaysApply: true
---

<rule>
  <meta>
    <title>Unity MCP Bootstrap Entry Point</title>
    <description>Bootstrap entry point for all XNode graph operations - guides through complete workflow from tool selection to graph validation</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>This is the BOOTSTRAP ENTRY POINT for all XNode graph operations. Follow the complete workflow sequence: 1) MCP Tools Reference → 2) Step Nodes Reference → 3) Node Router Rules → 4) Graph Creation Rules → 5) Graph Validation Rules. NEVER skip any step in this sequence.</description>
      <examples>
        <example title="Complete Workflow Sequence">
          <correct-example title="Proper bootstrap workflow" conditions="Starting any XNode graph operation" expected-result="Complete, validated graph" correctness-criteria="Follows complete workflow sequence">MCP Tools Reference → Step Nodes Reference → Node Router → Graph Rules → Validation Rules → Complete Graph</correct-example>
          <incorrect-example title="Improper bootstrap workflow" conditions="Starting any XNode graph operation" expected-result="Complete, validated graph" incorrectness-criteria="Skips workflow steps">Direct node creation without following bootstrap sequence</incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="critical">
      <description>STEP 1 - MCP Tools Reference: Always start by consulting mcp-tools-reference.mdc to understand available tools, their parameters, and usage patterns. This determines which MCP tools you'll use for the operation.</description>
      <examples>
        <example title="Step 1 - Tool Reference">
          <correct-example title="Proper tool reference consultation" conditions="Starting graph operation" expected-result="Correct tool selection" correctness-criteria="Consults MCP tools reference first">Read mcp-tools-reference.mdc → Understand tool parameters → Select appropriate tools</correct-example>
          <incorrect-example title="Improper tool reference consultation" conditions="Starting graph operation" expected-result="Correct tool selection" incorrectness-criteria="Skips tool reference">Start creating nodes without understanding available tools</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>STEP 2 - Step Nodes Reference: Use step-nodes-reference.mdc to identify the appropriate node category for your requirements. This file provides quick category identification but contains NO implementation details.</description>
      <examples>
        <example title="Step 2 - Node Reference">
          <correct-example title="Proper node reference usage" conditions="Need to identify node type" expected-result="Correct node category identified" correctness-criteria="Uses reference file to identify category">Read step-nodes-reference.mdc → Identify node category → Prepare to fetch router file</correct-example>
          <incorrect-example title="Improper node reference usage" conditions="Need to identify node type" expected-result="Correct node category identified" incorrectness-criteria="Tries to implement using only reference file">Use step-nodes-reference.mdc for implementation without fetching router files</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>STEP 3 - Node Router Rules: After identifying the category, fetch the specific router rule file (e.g., ClickNodesRouter.mdc, AttachDetachNodesRouter.mdc) to get detailed implementation guidance, component requirements, and usage patterns.</description>
      <examples>
        <example title="Step 3 - Router Rules">
          <correct-example title="Proper router rule usage" conditions="Need detailed node implementation" expected-result="Detailed implementation guidance" correctness-criteria="Fetches correct router file">fetch_rules(["MCP/GraphLogic/Click/ClickNodesRouter"]) → Get detailed ClickStep implementation → Understand component requirements</correct-example>
          <incorrect-example title="Improper router rule usage" conditions="Need detailed node implementation" expected-result="Detailed implementation guidance" incorrectness-criteria="Skips router file or uses wrong file">Try to implement without router file or use wrong router file</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>STEP 4 - Graph Creation Rules: Before using MCP tools, consult graph-connection-rules.mdc and node-positioning-strategy.mdc to understand connection requirements and positioning guidelines for proper graph structure.</description>
      <examples>
        <example title="Step 4 - Graph Creation Rules">
          <correct-example title="Proper graph creation preparation" conditions="Ready to create nodes" expected-result="Properly structured graph" correctness-criteria="Consults graph creation rules">Read graph-connection-rules.mdc → Read node-positioning-strategy.mdc → Understand connection and positioning requirements</correct-example>
          <incorrect-example title="Improper graph creation preparation" conditions="Ready to create nodes" expected-result="Properly structured graph" incorrectness-criteria="Skips graph creation rules">Start creating nodes without understanding connection or positioning requirements</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>STEP 5 - Graph Validation Rules: After adding all nodes, ALWAYS run graph-validation-rules.mdc to validate the complete graph structure, remove orphaned nodes, verify connections, and ensure proper execution flow.</description>
      <examples>
        <example title="Step 5 - Graph Validation">
          <correct-example title="Proper graph validation" conditions="Graph creation complete" expected-result="Validated, functional graph" correctness-criteria="Follows complete validation process">Read graph-validation-rules.mdc → Run validation steps → Remove orphaned nodes → Verify connections → Confirm execution flow</correct-example>
          <incorrect-example title="Improper graph validation" conditions="Graph creation complete" expected-result="Validated, functional graph" incorrectness-criteria="Skips validation">Consider graph complete without running validation rules</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>WORKFLOW INTEGRATION: This bootstrap sequence applies to ALL XNode graph operations including ScriptableObject creation, node creation, graph modification, and validation. The sequence ensures consistent, reliable graph creation across all operations.</description>
      <examples>
        <example title="Workflow Integration">
          <correct-example title="Proper workflow integration" conditions="Any XNode graph operation" expected-result="Consistent, reliable operation" correctness-criteria="Applies bootstrap sequence to all operations">ScriptableObject creation → Follow bootstrap sequence → Node creation → Follow bootstrap sequence → Graph modification → Follow bootstrap sequence</correct-example>
          <incorrect-example title="Improper workflow integration" conditions="Any XNode graph operation" expected-result="Consistent, reliable operation" incorrectness-criteria="Inconsistent workflow application">Follow bootstrap for some operations but skip for others</incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <context description="Bootstrap workflow for Unity MCP operations">
    This bootstrap entry point provides the complete workflow sequence for all XNode graph operations. Always follow the 5-step sequence: MCP Tools Reference → Step Nodes Reference → Node Router Rules → Graph Creation Rules → Graph Validation Rules. This ensures consistent, reliable graph creation and prevents common implementation errors.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/mcp-tools-reference.mdc" reason="Step 1 - Tool reference">MCP tools reference and capabilities guide</reference>
    <reference as="context" href=".cursor/rules/step-nodes-reference.mdc" reason="Step 2 - Node reference">Quick reference guide for XNode Step Nodes</reference>
    <reference as="context" href=".cursor/rules/graph-connection-rules.mdc" reason="Step 4 - Graph creation">Critical connection requirements for Unity MCP graph nodes</reference>
    <reference as="context" href=".cursor/rules/node-positioning-strategy.mdc" reason="Step 4 - Graph creation">Unified node positioning strategy for Unity MCP graph layouts</reference>
    <reference as="context" href=".cursor/rules/graph-validation-rules.mdc" reason="Step 5 - Graph validation">Mandatory post-creation validation rules for Unity MCP graphs</reference>
  </references>
</rule>