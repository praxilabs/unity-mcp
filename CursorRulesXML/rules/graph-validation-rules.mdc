---
description: Mandatory post-creation validation rules for Unity MCP graphs
alwaysApply: true
---

<rule>
  <meta>
    <title>Graph Validation Rules</title>
    <description>Mandatory post-creation validation rules for Unity MCP graphs</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-scriptableobject">Triggered when creating a new XNode Graph Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>After creating ANY graph, you MUST perform these validation steps: run mcp_unityMCP_list_graph_nodes to get complete node list, check for orphaned nodes, remove orphaned nodes that aren't part of execution flow, verify all nodes have both input AND output connections (except first/last), and confirm execution flow is complete from entry to exit.</description>
      <examples>
        <example title="Graph Validation Process">
          <correct-example title="Proper validation workflow" conditions="After creating a graph" expected-result="Validated graph with no errors" correctness-criteria="Follows complete validation process">Run list_graph_nodes → Check for orphaned nodes → Remove orphaned nodes → Verify connections → Confirm flow</correct-example>
          <incorrect-example title="Improper validation workflow" conditions="After creating a graph" expected-result="Validated graph with no errors" incorrectness-criteria="Skips validation steps">Create graph and assume it works without validation</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>After ANY correction, you MUST re-validate and continue the fix→validate cycle until 100% error-free. NEVER stop at first fix - always complete the full validation cycle.</description>
      <examples>
        <example title="Validation Loop">
          <correct-example title="Proper validation loop" conditions="After fixing graph errors" expected-result="Fully validated graph" correctness-criteria="Continues validation until 100% clean">Fix error → Re-validate → Find another error → Fix → Re-validate → Continue until 0 errors</correct-example>
          <incorrect-example title="Improper validation loop" conditions="After fixing graph errors" expected-result="Fully validated graph" incorrectness-criteria="Stops after first fix">Fix error → Assume graph is complete</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Remove orphaned nodes immediately using mcp_unityMCP_delete_xnode_node. Orphaned nodes are those created but never connected to execution flow and can cause graph execution to fail.</description>
      <examples>
        <example title="Orphaned Node Removal">
          <correct-example title="Proper orphaned node removal" conditions="Finding orphaned nodes" expected-result="Clean graph without orphaned nodes" correctness-criteria="Removes all disconnected nodes">Detect orphaned node → Use delete_xnode_node → Remove from graph</correct-example>
          <incorrect-example title="Improper orphaned node handling" conditions="Finding orphaned nodes" expected-result="Clean graph without orphaned nodes" incorrectness-criteria="Leaves orphaned nodes in graph">Detect orphaned node → Leave in graph</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Complete all required connections using mcp_unityMCP_connect_nodes_by_name. Nodes with missing input or output connections will cause execution to stop at incomplete nodes.</description>
      <examples>
        <example title="Connection Completion">
          <correct-example title="Proper connection completion" conditions="Finding incomplete connections" expected-result="All nodes properly connected" correctness-criteria="Completes all required connections">Detect incomplete connection → Use connect_nodes_by_name → Complete connection</correct-example>
          <incorrect-example title="Improper connection handling" conditions="Finding incomplete connections" expected-result="All nodes properly connected" incorrectness-criteria="Leaves connections incomplete">Detect incomplete connection → Leave incomplete</incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER consider a graph complete without running post-creation validation. Failure to validate will result in broken experiments.</description>
      <examples>
        <example title="Validation Requirement">
          <correct-example title="Mandatory validation" conditions="Before considering graph complete" expected-result="Validated graph" correctness-criteria="Always runs validation before completion">Create graph → Run validation → Fix issues → Re-validate → Complete</correct-example>
          <incorrect-example title="Skipped validation" conditions="Before considering graph complete" expected-result="Validated graph" incorrectness-criteria="Skips validation process">Create graph → Consider complete without validation</incorrect-example>
        </example>
      </examples>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for graph validation">
    Use mcp_unityMCP_list_graph_nodes to check graph structure, mcp_unityMCP_set_node_as_first_step to establish entry point, mcp_unityMCP_delete_xnode_node to remove orphaned nodes, and mcp_unityMCP_connect_nodes_by_name to fix missing connections. These validation steps are essential for creating functional experiments.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
  </references>
</rule>