---
description: Ending the current stage and starting another stage within the experiment flow
alwaysApply: false
---

<rule>
  <meta>
    <title>GoToStageStep</title>
    <description>Ending the current stage and starting another stage within the experiment flow</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new GoToStageStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>Required Components: 1. Registered Stage - A stage that is registered in the Experiment Data.</description>
    </requirement>
    <requirement priority="critical">
      <description>GoToStageStep ends the current stage and transitions to a specified next stage for stage management and experiment flow control. Requires a valid stage number that exists in the experiment and proper Experiment Data setup with registered stages.</description>
      <examples>
        <example title="GoToStageStep Prerequisites">
          <correct-example title="Proper GoToStageStep setup" conditions="Creating GoToStageStep" expected-result="Working stage transition" correctness-criteria="Follows all prerequisites">Valid stage number, properly configured in Experiment Data, with correct references</correct-example>
          <incorrect-example title="Improper GoToStageStep setup" conditions="Creating GoToStageStep" expected-result="Working stage transition" correctness-criteria="Missing prerequisites">Invalid stage number, unconfigured stage, or missing Experiment Data setup</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Use GoToStageStep for stage transitions within experiments, skipping stages based on conditions, and ending current stage and starting another. Target stage must exist and be properly configured in Experiment Data. Use for stage transitions only, not step progression.</description>
      <examples>
        <example title="GoToStageStep Usage">
          <correct-example title="Proper GoToStageStep usage" conditions="Need stage transition" expected-result="Stage transition" correctness-criteria="Uses GoToStageStep for stage transitions">IfStatementStep(SkipIntro) → True: GoToStageStep(MainStage)</correct-example>
          <incorrect-example title="Improper GoToStageStep usage" conditions="Need step progression" expected-result="Step progression" correctness-criteria="Uses GoToStageStep for step progression">GoToStageStep for step progression (should use ProgressMapAutoNextStep)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>GoToStageStep parameters include Target Stage (Number of the stage to transition to). The target stage must be a valid stage number that exists in the experiment and is registered in the Experiment Data.</description>
      <examples>
        <example title="Target Stage Parameter">
          <correct-example title="Proper target stage parameter" conditions="Setting GoToStageStep target stage" expected-result="Correct stage transition" correctness-criteria="Uses valid stage number">Target Stage: 0, Target Stage: 1, Target Stage: 2</correct-example>
          <incorrect-example title="Improper target stage parameter" conditions="Setting GoToStageStep target stage" expected-result="Correct stage transition" correctness-criteria="Uses invalid stage number">Target Stage: -3, Target Stage: -1, Target Stage: 999 (unregistered stage)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use GoToStageStep for stage transition patterns and conditional stage skip patterns. Common patterns include direct stage transitions and conditional stage skipping based on user choices or experiment conditions.</description>
      <examples>
        <example title="Stage Transition Patterns">
          <correct-example title="Proper stage transition pattern" conditions="Implementing stage transition logic" expected-result="Successful stage transition" correctness-criteria="Follows established pattern">... → GoToStageStep(NextStage)</correct-example>
          <incorrect-example title="Improper stage transition pattern" conditions="Implementing stage transition logic" expected-result="Successful stage transition" correctness-criteria="Skips required setup">GoToStageStep without proper stage configuration or invalid target stage</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use descriptive stage identifiers and meaningful stage names in GoToStageStep to make the logic clear and maintainable. Stage names should clearly indicate the purpose and content of the target stage.</description>
      <examples>
        <example title="Descriptive Stage Names">
          <correct-example title="Clear stage names" conditions="Naming GoToStageStep target stages" expected-result="Readable stage transition logic" correctness-criteria="Uses descriptive names">Target Stage: "MainExperimentStage", Target Stage: "ResultsAnalysisStage", Target Stage: "IntroductionStage"</correct-example>
          <incorrect-example title="Unclear stage names" conditions="Naming GoToStageStep target stages" expected-result="Readable stage transition logic" incorrectness-criteria="Uses unclear names">Target Stage: "Stage1", Target Stage: "Next", Target Stage: "Stage"</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Ensure proper stage configuration and Experiment Data setup before using GoToStageStep. The target stage must be added to Experiment Data with correct references and proper stage configuration to ensure successful transitions.</description>
      <examples>
        <example title="Stage Configuration">
          <correct-example title="Proper stage configuration" conditions="Configuring target stages" expected-result="Successful stage transitions" correctness-criteria="Includes proper configuration">Target stage added to Experiment Data, with correct references and proper configuration</correct-example>
          <incorrect-example title="Improper stage configuration" conditions="Configuring target stages" expected-result="Successful stage transitions" correctness-criteria="Missing configuration">Target stage not added to Experiment Data, missing references or improper configuration</correct-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER use GoToStageStep for step progression within the same stage. NEVER use GoToStageStep for non-stage operations. NEVER use GoToStageStep with invalid or non-existent target stages. Always use ProgressMapAutoNextStep for step progression and ensure target stages are properly configured.</description>
      <examples>
        <example title="GoToStageStep Restrictions">
          <correct-example title="Proper GoToStageStep usage" conditions="Selecting GoToStageStep" expected-result="Correct stage transition" correctness-criteria="Uses GoToStageStep appropriately">Stage transition with valid target stage and proper configuration</correct-example>
          <incorrect-example title="Improper GoToStageStep usage" conditions="Selecting GoToStageStep" expected-result="Correct stage transition" correctness-criteria="Uses GoToStageStep inappropriately">Step progression, non-stage operations, or invalid target stages</correct-example>
        </example>
      </examples>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for GoToStageStep">
    GoToStageStep is designed for stage transitions and experiment flow control. Always ensure proper stage configuration, valid target stages, and correct Experiment Data setup. Use ProgressMapAutoNextStep for step progression within the same stage, not GoToStageStep.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Misc/AnimationStep.mdc" reason="Animation control">AnimationStep for object animations</reference>
  </references>
</rule>