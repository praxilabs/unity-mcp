---
description: Multi-way branching node for state machines and menu systems
alwaysApply: false
---

<rule>
  <meta>
    <title>SwitchStep</title>
    <description>Multi-way branching node for state machines and menu systems</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new SwitchStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>SwitchStep provides multi-way branching for state machines, menu systems, and complex decision trees using string, number, or custom values. Always ensure all possible cases are covered and provide a default case for unexpected values.</description>
      <examples>
        <example title="SwitchStep Implementation">
          <correct-example title="Proper SwitchStep with all cases" conditions="Creating multi-way branching" expected-result="Complete switch logic with default" correctness-criteria="Covers all possible cases including default">SwitchStep (User choice) → Case 1: Action A → Continue, Case 2: Action B → Continue, Default: Action C → Continue</correct-example>
          <incorrect-example title="Incomplete SwitchStep" conditions="Creating multi-way branching" expected-result="Complete switch logic with default" incorrectness-criteria="Missing cases or default">SwitchStep (User choice) → Case 1: Action A → Continue, Case 2: Action B → Continue</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use SwitchStep for state machines and menu systems with custom values. Handle all possible input values by providing appropriate case branches for each expected value.</description>
      <examples>
        <example title="State Machine Pattern">
          <correct-example title="Proper state machine implementation" conditions="Creating state machine" expected-result="Complete state transitions" correctness-criteria="Handles all state transitions">SwitchStep (Current state) → StateA: Actions → Next state, StateB: Actions → Next state, Default: Error handling</correct-example>
          <incorrect-example title="Incomplete state machine" conditions="Creating state machine" expected-result="Complete state transitions" incorrectness-criteria="Missing state transitions">SwitchStep (Current state) → StateA: Actions → Next state</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Always provide a default case in SwitchStep to handle unexpected or invalid input values. The default case should either handle the error gracefully or provide appropriate fallback behavior.</description>
      <examples>
        <example title="Default Case Handling">
          <correct-example title="Proper default case" conditions="Handling unexpected values" expected-result="Graceful error handling" correctness-criteria="Provides fallback behavior">Default: Display error message → Return to menu</correct-example>
          <incorrect-example title="Missing default case" conditions="Handling unexpected values" expected-result="Graceful error handling" incorrectness-criteria="No fallback behavior">No default case provided</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use descriptive case names and action names in SwitchStep to make the logic clear and maintainable. Case values should be meaningful and action names should describe what happens in each branch.</description>
      <examples>
        <example title="Descriptive Naming">
          <correct-example title="Clear case and action names" conditions="Naming switch cases" expected-result="Readable switch logic" correctness-criteria="Uses descriptive names">Case "StartExperiment": ExecuteStartupSequence, Case "PauseExperiment": ExecutePauseSequence</correct-example>
          <incorrect-example title="Unclear case and action names" conditions="Naming switch cases" expected-result="Readable switch logic" incorrectness-criteria="Uses unclear names">Case "1": DoSomething, Case "2": DoSomethingElse</correct-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER create SwitchStep without a default case. All SwitchStep implementations must handle unexpected input values to prevent execution failures or undefined behavior.</description>
      <examples>
        <example title="Default Case Requirement">
          <correct-example title="SwitchStep with default case" conditions="Creating SwitchStep" expected-result="Robust switch logic" correctness-criteria="Always includes default case">SwitchStep with all expected cases plus default case</correct-example>
          <incorrect-example title="SwitchStep without default case" conditions="Creating SwitchStep" expected-result="Robust switch logic" incorrectness-criteria="Missing default case">SwitchStep with only expected cases, no default</correct-example>
        </example>
      </examples>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for SwitchStep">
    SwitchStep is ideal for complex decision trees and state machines where multiple paths are possible based on input values. Always ensure complete case coverage and provide meaningful default behavior. Use SwitchEnumStep when working with predefined enum values instead of custom string/number values.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/ControlFlow/SwitchEnumStep.mdc" reason="Enum-based switching">SwitchEnumStep for enum values</reference>
  </references>
</rule>