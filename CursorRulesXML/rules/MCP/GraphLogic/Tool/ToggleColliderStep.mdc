---
description: Enable/disable collider on a single object for interaction control and safety systems
alwaysApply: false
---

<rule>
  <meta>
    <title>ToggleColliderStep</title>
    <description>Enable/disable collider on a single object for interaction control and safety systems</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new ToggleColliderStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>ToggleColliderStep enables or disables colliders on GameObjects for interaction control and safety systems. CRITICAL: Only works on ONE single object at a time. Use for interaction control, safety systems, and collider management.</description>
      <examples>
        <example title="Collider Management">
          <correct-example title="Proper collider control" conditions="Need to enable/disable collider" expected-result="Collider state controlled" correctness-criteria="Uses ToggleColliderStep for single object collider">ToggleColliderStep (Device1, disable) → ToggleColliderStep (Device2, disable)</correct-example>
          <incorrect-example title="Improper collider control" conditions="Need to enable/disable collider" expected-result="Collider state controlled" correctness-criteria="Uses GameObjectSetActiveStep for collider control">GameObjectSetActiveStep (Object, false) → Collider disabled (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>ToggleColliderStep requires Target Object (the GameObject with the collider to toggle), Collider State (boolean to enable/disable the collider), and optional Collider Type (specific collider component to target). GameObject must have a collider component and exist and be accessible.</description>
      <examples>
        <example title="Parameter Requirements">
          <correct-example title="Proper parameter usage" conditions="Using ToggleColliderStep" expected-result="Collider state successfully controlled" correctness-criteria="Provides valid target object and collider state">ToggleColliderStep (Target Object: "Device1", Collider State: false) → Collider disabled</correct-example>
          <incorrect-example title="Improper parameter usage" conditions="Using ToggleColliderStep" expected-result="Collider state successfully controlled" correctness-criteria="Missing required target object or collider state">ToggleColliderStep (Collider State: false) → No target object provided</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Use ToggleColliderStep for single object collider control only. Works on ONE single object at a time for enabling/disabling colliders. For multiple objects, use multiple ToggleColliderStep nodes sequentially.</description>
      <examples>
        <example title="Single Object vs Multiple Objects">
          <correct-example title="Proper single object usage" conditions="Need to control single object collider" expected-result="Single object collider controlled" correctness-criteria="Uses ToggleColliderStep for single object">ToggleColliderStep (Device1, disable) → Device1 collider disabled</correct-example>
          <incorrect-example title="Improper multiple object usage" conditions="Need to control multiple object colliders" expected-result="Multiple object colliders controlled" correctness-criteria="Tries to control multiple objects with single node">ToggleColliderStep ([Device1, Device2], disable) → Multiple colliders controlled (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Use ToggleColliderStep for collider management only, not visibility control. Enables/disables colliders for interaction control and safety systems. Use GameObjectSetActiveStep for visibility control operations.</description>
      <examples>
        <example title="Collider vs Visibility Control">
          <correct-example title="Proper collider control usage" conditions="Need to disable collider" expected-result="Collider disabled" correctness-criteria="Uses ToggleColliderStep for collider control">ToggleColliderStep (Object, false) → Collider disabled</correct-example>
          <incorrect-example title="Improper visibility control usage" conditions="Need to hide object" expected-result="Object hidden" correctness-criteria="Uses ToggleColliderStep for visibility control">ToggleColliderStep (Object, false) → Object hidden (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use sequential multiple objects pattern for controlling multiple object colliders. Use overlapping object management pattern for complex collider state management with multiple objects.</description>
      <examples>
        <example title="Multiple Object Patterns">
          <correct-example title="Proper sequential pattern" conditions="Need to control multiple object colliders" expected-result="Multiple object colliders controlled sequentially" correctness-criteria="Uses sequential multiple objects pattern">ToggleColliderStep (Device1, disable) → ToggleColliderStep (Device2, disable) → ToggleColliderStep (Device3, disable)</correct-example>
          <incorrect-example title="Improper single node pattern" conditions="Need to control multiple object colliders" expected-result="Multiple object colliders controlled sequentially" correctness-criteria="Tries to use single node for multiple objects">ToggleColliderStep (AllDevices, disable) → Multiple colliders controlled (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <context description="Additional considerations for ToggleColliderStep">
    This node is essential for collider management and interaction control in virtual lab experiments. It provides the capability to enable/disable colliders on GameObjects for interaction control and safety systems. The single object limitation is critical for proper operation and requires sequential operations for multiple objects.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Tool/ToolNodes.mdc" reason="Tool nodes overview">Object manipulation and visibility control patterns</reference>
  </references>
</rule>