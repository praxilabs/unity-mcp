---
description: Control interactions menu for tools and tool selection
alwaysApply: false
---

<rule>
  <meta>
    <title>ToolsInteractionsMenuStep</title>
    <description>Control interactions menu for tools and tool selection</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new ToolsInteractionsMenuStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>ToolsInteractionsMenuStep controls the interactions menu for tools, enabling tool menu management, interaction options, and tool selection. Use for tool menu management, interaction options, and tool selection.</description>
      <examples>
        <example title="Tool Menu Control">
          <correct-example title="Proper menu control" conditions="Need to control tool menu" expected-result="Tool menu controlled" correctness-criteria="Uses ToolsInteractionsMenuStep for menu operations">ToolsInteractionsMenuStep (EnableMenu) → UserSelectsOption → ExecuteToolAction</correct-example>
          <incorrect-example title="Improper menu control" conditions="Need to control tool menu" expected-result="Tool menu controlled" correctness-criteria="Uses GameObjectSetActiveStep for menu operations">GameObjectSetActiveStep (Menu, true) → Menu controlled (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>ToolsInteractionsMenuStep requires Menu State (state of the menu), Menu Type (type of menu to control), Menu Options (available options in the menu), and optional Menu Position (position of the menu).</description>
      <examples>
        <example title="Parameter Requirements">
          <correct-example title="Proper parameter usage" conditions="Using ToolsInteractionsMenuStep" expected-result="Tool menu successfully controlled" correctness-criteria="Provides valid menu state and configuration parameters">ToolsInteractionsMenuStep (Menu State: "enable", Menu Type: "tool", Menu Options: ["option1", "option2"]) → Menu enabled</correct-example>
          <incorrect-example title="Improper parameter usage" conditions="Using ToolsInteractionsMenuStep" expected-result="Tool menu successfully controlled" correctness-criteria="Missing required menu state parameter">ToolsInteractionsMenuStep (Menu Type: "tool") → No menu state provided</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use enable tool interactions menu pattern for basic menu activation. Use tool selection from menu pattern for tool selection workflows. Use complete tool workflow pattern for comprehensive tool interaction flows.</description>
      <examples>
        <example title="Menu Control Patterns">
          <correct-example title="Proper enable menu pattern" conditions="Need to enable tool menu" expected-result="Tool menu enabled for user interaction" correctness-criteria="Uses enable tool interactions menu pattern">ToolsInteractionsMenuStep (EnableMenu) → UserSelectsOption → ExecuteToolAction → Continue</correct-example>
          <incorrect-example title="Improper tool selection pattern" conditions="Need to enable tool menu" expected-result="Tool menu enabled for user interaction" correctness-criteria="Uses tool selection pattern when enable pattern is appropriate">ToolsInteractionsMenuStep (ShowToolMenu) → UserSelectsTool → GameObjectSetActiveStep (ShowSelectedTool)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use menu state management pattern for complete menu lifecycle control. Use conditional menu display pattern for permission-based menu access control.</description>
      <examples>
        <example title="Advanced Menu Patterns">
          <correct-example title="Proper menu state management" conditions="Need complete menu lifecycle control" expected-result="Menu enabled, used, and disabled" correctness-criteria="Uses menu state management pattern">ToolsInteractionsMenuStep (EnableMenu) → UserInteraction → ToolsInteractionsMenuStep (DisableMenu) → Continue</correct-example>
          <incorrect-example title="Improper menu state management" conditions="Need complete menu lifecycle control" expected-result="Menu enabled, used, and disabled" correctness-criteria="Skips menu disable step">ToolsInteractionsMenuStep (EnableMenu) → UserInteraction → Continue</correct-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <context description="Additional considerations for ToolsInteractionsMenuStep">
    This node is essential for tool menu management and interaction control in virtual lab experiments. It provides the capability to control interactions menu for tools, enabling tool menu management, interaction options, and tool selection through structured menu workflows.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Tool/ToolNodes.mdc" reason="Tool nodes overview">Object manipulation and visibility control patterns</reference>
  </references>
</rule>
