---
description: Handle input field interactions for tools and data entry
alwaysApply: false
---

<rule>
  <meta>
    <title>ToolsInputfieldStep</title>
    <description>Handle input field interactions for tools and data entry</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new ToolsInputfieldStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>ToolsInputfieldStep handles input field interactions for tools, enabling data entry, parameter input, and tool configuration. Use for data entry for tools, parameter input, and tool configuration.</description>
      <examples>
        <example title="Input Field Interactions">
          <correct-example title="Proper input field usage" conditions="Need tool input field interaction" expected-result="Input field interaction handled" correctness-criteria="Uses ToolsInputfieldStep for input field operations">ToolsInputfieldStep (InputField) → UserInputStep (Data) → ValidateInput</correct-example>
          <incorrect-example title="Improper input field usage" conditions="Need tool input field interaction" expected-result="Input field interaction handled" correctness-criteria="Uses GameObjectSetActiveStep for input field operations">GameObjectSetActiveStep (InputField, true) → Input handled (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>ToolsInputfieldStep requires Input Field (the input field component to interact with), Input Type (type of input expected), Validation Rules (rules for input validation), and Default Value (default value for the input field).</description>
      <examples>
        <example title="Parameter Requirements">
          <correct-example title="Proper parameter usage" conditions="Using ToolsInputfieldStep" expected-result="Input field interaction successfully handled" correctness-criteria="Provides valid input field and configuration parameters">ToolsInputfieldStep (Input Field: "ConfigField", Input Type: "number", Validation Rules: "positive", Default Value: "0") → Input field configured</correct-example>
          <incorrect-example title="Improper parameter usage" conditions="Using ToolsInputfieldStep" expected-result="Input field interaction successfully handled" correctness-criteria="Missing required input field parameter">ToolsInputfieldStep (Input Type: "number") → No input field provided</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use user data entry pattern for basic input collection. Use tool configuration pattern for setting tool parameters. Use complete tool workflow pattern for comprehensive tool interaction flows.</description>
      <examples>
        <example title="Input Field Patterns">
          <correct-example title="Proper user data entry pattern" conditions="Need user data collection" expected-result="User data collected through input field" correctness-criteria="Uses user data entry pattern">ToolsInputfieldStep (InputField) → UserInputStep (Data) → ValidateInput → Continue</correct-example>
          <incorrect-example title="Improper tool configuration pattern" conditions="Need user data collection" expected-result="User data collected through input field" correctness-criteria="Uses tool configuration pattern when user data entry is appropriate">ToolsInputfieldStep (ConfigField) → SetToolParameter → ShowMessage (Tool configured)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use input validation pattern for robust input handling. Combines input field interaction, validation, conditional processing, and error handling for complete input workflow.</description>
      <examples>
        <example title="Input Validation Pattern">
          <correct-example title="Proper input validation pattern" conditions="Need robust input handling" expected-result="Input validated and processed with error handling" correctness-criteria="Uses complete input validation pattern">ToolsInputfieldStep (InputField) → ValidateInput → IfStatementStep (Valid) → ProcessInput → Continue → False: ShowMessage (Invalid input) → RetryInput</correct-example>
          <incorrect-example title="Improper input validation pattern" conditions="Need robust input handling" expected-result="Input validated and processed with error handling" correctness-criteria="Skips validation or error handling">ToolsInputfieldStep (InputField) → ProcessInput → Continue</correct-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <context description="Additional considerations for ToolsInputfieldStep">
    This node is essential for input field interactions and data entry in virtual lab experiments. It provides the capability to handle input field interactions for tools, enabling data entry, parameter input, and tool configuration through structured input workflows.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Tool/ToolNodes.mdc" reason="Tool nodes overview">Object manipulation and visibility control patterns</reference>
  </references>
</rule>
