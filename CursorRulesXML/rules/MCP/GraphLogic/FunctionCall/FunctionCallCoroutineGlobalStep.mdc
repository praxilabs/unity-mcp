---
description: Global coroutine execution for system-wide asynchronous operations
alwaysApply: false
---

<rule>
  <meta>
    <title>FunctionCallCoroutineGlobalStep</title>
    <description>Global coroutine execution for system-wide asynchronous operations</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new FunctionCallCoroutineGlobalStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>FunctionCallCoroutineGlobalStep executes global or singleton coroutines (IEnumerator) for system-wide asynchronous operations without targeting specific scene objects. Requires a global coroutine method, static coroutine method, or singleton service coroutine that must be public and accessible for reflection.</description>
      <examples>
        <example title="FunctionCallCoroutineGlobalStep Prerequisites">
          <correct-example title="Proper FunctionCallCoroutineGlobalStep setup" conditions="Creating FunctionCallCoroutineGlobalStep" expected-result="Working global coroutine execution" correctness-criteria="Follows all prerequisites">Public static IEnumerator method or singleton service IEnumerator method accessible for reflection</correct-example>
          <incorrect-example title="Improper FunctionCallCoroutineGlobalStep setup" conditions="Creating FunctionCallCoroutineGlobalStep" expected-result="Working global coroutine execution" incorrectness-criteria="Missing prerequisites">Private method, non-IEnumerator method, or scene object coroutine</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Use FunctionCallCoroutineGlobalStep for global coroutines only. Methods must return IEnumerator and affect the entire system without targeting specific scene objects. Use for static coroutines, singleton service coroutines, and system-wide asynchronous operations.</description>
      <examples>
        <example title="Global Coroutine Usage">
          <correct-example title="Proper global coroutine usage" conditions="Need global asynchronous method" expected-result="System-wide asynchronous execution" correctness-criteria="Uses global IEnumerator method">FunctionCallCoroutineGlobalStep(ShowLoadingScreen, duration) → DelayStep → Continue</correct-example>
          <incorrect-example title="Improper global coroutine usage" conditions="Need scene object coroutine" expected-result="Scene object asynchronous execution" incorrectness-criteria="Uses FunctionCallCoroutineGlobalStep for scene object">FunctionCallCoroutineGlobalStep for scene object coroutine (should use FunctionCallCoroutineStep)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>FunctionCallCoroutineGlobalStep parameters include prefabName (parent GameObject in Unity hierarchy), childName (child GameObject in Unity hierarchy), selectedComponent (Component on Child), selectedFunction (Function on Component), and parameterValues (Parameters if exist). Configure parameters for global coroutine method access.</description>
      <examples>
        <example title="Global Coroutine Parameter Configuration">
          <correct-example title="Proper global coroutine parameter setup" conditions="Configuring FunctionCallCoroutineGlobalStep parameters" expected-result="Correct global coroutine execution" correctness-criteria="All parameters properly set for global coroutine access">prefabName: "GlobalServices", childName: "UIManager", selectedComponent: "UIManager", selectedFunction: "ShowLoadingScreenCoroutine"</correct-example>
          <incorrect-example title="Improper global coroutine parameter setup" conditions="Configuring FunctionCallCoroutineGlobalStep parameters" expected-result="Correct global coroutine execution" incorrectness-criteria="Missing or incorrect parameters">prefabName: "", childName: "", selectedComponent: "", selectedFunction: ""</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use FunctionCallCoroutineGlobalStep for system-wide asynchronous operations like loading screens, global effects, and system-wide animations. Common patterns include loading sequences and global UI transitions.</description>
      <examples>
        <example title="System-Wide Asynchronous Operations">
          <correct-example title="Proper system-wide async operation" conditions="Need system-wide async effect" expected-result="Global asynchronous system change" correctness-criteria="Affects entire system asynchronously">FunctionCallCoroutineGlobalStep(ShowLoadingScreen, duration) → DelayStep → ShowCompletionMessage</correct-example>
          <incorrect-example title="Improper system-wide async operation" conditions="Need scene object async effect" expected-result="Scene object async change" incorrectness-criteria="Uses FunctionCallCoroutineGlobalStep for scene object">FunctionCallCoroutineGlobalStep for individual object animation</correct-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER use FunctionCallCoroutineGlobalStep for scene object coroutines. NEVER use FunctionCallCoroutineGlobalStep for methods that target specific GameObjects. NEVER use FunctionCallCoroutineGlobalStep for synchronous methods. Always use the appropriate step type for the method scope and execution type.</description>
      <examples>
        <example title="FunctionCallCoroutineGlobalStep Restrictions">
          <correct-example title="Proper FunctionCallCoroutineGlobalStep usage" conditions="Selecting FunctionCallCoroutineGlobalStep" expected-result="Correct global coroutine execution" correctness-criteria="Uses FunctionCallCoroutineGlobalStep appropriately">Global/static IEnumerator method or singleton service IEnumerator method</correct-example>
          <incorrect-example title="Improper FunctionCallCoroutineGlobalStep usage" conditions="Selecting FunctionCallCoroutineGlobalStep" expected-result="Correct global coroutine execution" incorrectness-criteria="Uses FunctionCallCoroutineGlobalStep inappropriately">Scene object coroutine, local component coroutine, or synchronous method</correct-example>
        </example>
      </examples>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for FunctionCallCoroutineGlobalStep">
    FunctionCallCoroutineGlobalStep is designed for global/static coroutine execution and system-wide asynchronous operations. Always ensure the method returns IEnumerator, is global/static, and affects the entire system rather than specific scene objects. Use other function call step types for scene object methods, synchronous methods, or different execution contexts.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/FunctionCall/FunctionCallCoroutineStep.mdc" reason="Scene object asynchronous execution">FunctionCallCoroutineStep for scene object coroutines</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/FunctionCall/FunctionCallGlobalStep.mdc" reason="Global synchronous execution">FunctionCallGlobalStep for global synchronous methods</reference>
  </references>
</rule>