---
description: Revert the 'passed' status of a stage, marking it as incomplete
alwaysApply: false
---

<rule>
  <meta>
    <title>UnsetStagePassedStep</title>
    <description>Revert the 'passed' status of a stage, marking it as incomplete</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new UnsetStagePassedStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>UnsetStagePassedStep clears the passed/completed status for a stage so it can be retried for error handling and retry flows. Use for resetting stage completion status, error handling and retry flows, and reverting stage progress.</description>
      <examples>
        <example title="Stage Reset">
          <correct-example title="Proper stage reset" conditions="Need to reset stage completion" expected-result="Stage completion status reverted" correctness-criteria="Uses UnsetStagePassedStep for reset">IfStatementStep (Success) → SetStagePassedStep (CurrentStage) → False: UnsetStagePassedStep (CurrentStage)</correct-example>
          <incorrect-example title="Improper stage reset" conditions="Need to reset stage completion" expected-result="Stage completion status reverted" correctness-criteria="Uses data operation for stage reset">AddRecordStep (Table, Data) → Stage reset (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>UnsetStagePassedStep requires stageName (target stage identifier). Target stage must exist in the experiment with proper configuration and be registered in the stage registry.</description>
      <examples>
        <example title="Parameter Requirements">
          <correct-example title="Proper parameter usage" conditions="Using UnsetStagePassedStep" expected-result="Stage completion status successfully reverted" correctness-criteria="Provides valid stage name parameter">UnsetStagePassedStep (stageName: "CurrentStage") → Stage completion reverted</correct-example>
          <incorrect-example title="Improper parameter usage" conditions="Using UnsetStagePassedStep" expected-result="Stage completion status successfully reverted" correctness-criteria="Missing required stage name parameter">UnsetStagePassedStep (no parameters) → No stage name provided</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Use UnsetStagePassedStep for stage reset and error handling, not for data operations or stage initialization. Enables error handling and retry flows and allows stages to be retried after failure.</description>
      <examples>
        <example title="Stage Reset vs Data Operations">
          <correct-example title="Proper stage reset usage" conditions="Need to revert stage completion" expected-result="Stage completion status reverted" correctness-criteria="Uses UnsetStagePassedStep for reset">UnsetStagePassedStep (stageName: "CurrentStage") → Stage completion reverted</correct-example>
          <incorrect-example title="Improper data operation usage" conditions="Need to revert stage completion" expected-result="Stage completion status reverted" correctness-criteria="Uses data operation for stage reset">AddRecordStep (Table, Data) → Stage completion reverted (wrong approach)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use error handling with stage reset pattern for implementing retry flows. Combines conditional logic, stage completion, stage reset, and retry logic for complete error handling workflow.</description>
      <examples>
        <example title="Error Handling with Stage Reset">
          <correct-example title="Proper error handling pattern" conditions="Need error handling and retry flow" expected-result="Error handled with stage reset and retry" correctness-criteria="Uses complete error handling pattern">ExperimentLogic → IfStatementStep (Success) → SetStagePassedStep (CurrentStage) → False: UnsetStagePassedStep (CurrentStage) → ShowMessage (Retry) → RetryLogic</correct-example>
          <incorrect-example title="Improper error handling pattern" conditions="Need error handling and retry flow" expected-result="Error handled with stage reset and retry" correctness-criteria="Skips stage reset or retry logic">ExperimentLogic → IfStatementStep (Success) → SetStagePassedStep (CurrentStage) → False: ShowMessage (Retry)</correct-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <context description="Additional considerations for UnsetStagePassedStep">
    This node is essential for error handling and retry flows in virtual lab experiments. It provides the capability to revert stage completion status, enabling stages to be retried after failure and supporting robust error handling workflows.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Table/TableNodes.mdc" reason="Table nodes overview">Data table operations and stage management patterns</reference>
  </references>
</rule>
