---
description: Conditional iteration control for dynamic repetition based on a boolean condition
alwaysApply: false
---

<rule>
  <meta>
    <title>WhileLoopStep</title>
    <description>Conditional iteration control for dynamic repetition based on a boolean condition</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new WhileLoopStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>WhileLoopStep repeats its body while a boolean condition remains true for conditional repetition and dynamic loops with unknown iteration count. Use for conditional repetition based on state, user interaction loops, dynamic conditions that change during execution, and unknown iteration count scenarios.</description>
      <examples>
        <example title="WhileLoopStep Usage">
          <correct-example title="Proper WhileLoopStep usage" conditions="Need conditional iteration" expected-result="Conditional loop execution" correctness-criteria="Uses WhileLoopStep for dynamic conditions">WhileLoopStep(condition) for conditional repetition with unknown count</correct-example>
          <incorrect-example title="Improper WhileLoopStep usage" conditions="Need fixed iteration count" expected-result="Fixed loop execution" correctness-criteria="Uses WhileLoopStep for known iterations">WhileLoopStep for fixed iteration count (should use ForLoopStep)</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>WhileLoopStep parameters include condition (Boolean expression/source determining whether to continue) and pollingInterval (Optional delay between checks in seconds). The condition must be able to become false to prevent infinite loops.</description>
      <examples>
        <example title="Condition Parameter">
          <correct-example title="Proper condition parameter" conditions="Setting WhileLoopStep condition" expected-result="Conditional loop execution" correctness-criteria="Uses falsifiable condition">condition: "IsTemperatureValid", condition: "HasUserInput", condition: "IsProcessComplete"</correct-example>
          <incorrect-example title="Improper condition parameter" conditions="Setting WhileLoopStep condition" expected-result="Conditional loop execution" incorrectness-criteria="Uses non-falsifiable condition">condition: "true", condition: "1 == 1", condition: "always true"</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>WhileLoopStep ports include Entry (node entry point and loop port), continueLoop (Output - connect to loop body logic then back to entry), isTrue (Boolean expression or FunctionCall that returns boolean), and exit (Output - called after final iteration completes). Use correct port connections for proper loop execution.</description>
      <examples>
        <example title="Port Connections">
          <correct-example title="Proper port connections" conditions="Connecting WhileLoopStep ports" expected-result="Correct conditional loop execution" correctness-criteria="Uses correct port connections">continueLoop: ... → WhileLoopStep.entry, isTrue: boolean expression, exit: ... (completion)</correct-example>
          <incorrect-example title="Improper port connections" conditions="Connecting WhileLoopStep ports" expected-result="Correct conditional loop execution" incorrectness-criteria="Uses incorrect port connections">continueLoop: ... → NextNode (should connect back to entry), isTrue: not connected</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use WhileLoopStep for conditional iteration patterns where the number of repetitions is unknown and depends on changing conditions. Common patterns include user interaction loops, dynamic state checking, and conditional repetition based on external factors.</description>
      <examples>
        <example title="Conditional Iteration Pattern">
          <correct-example title="Proper conditional iteration pattern" conditions="Implementing conditional iteration logic" expected-result="Successful conditional execution" correctness-criteria="Follows established pattern">WhileLoopStep(condition) → continueLoop: ... → WhileLoopStep.entry → exit: ...</correct-example>
          <incorrect-example title="Improper conditional iteration pattern" conditions="Implementing conditional iteration logic" expected-result="Successful conditional execution" correctness-criteria="Skips required steps">WhileLoopStep without proper port connections or condition setup</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Always ensure condition safety by providing conditions that can become false to prevent infinite loops. Include proper exit pathways and ensure the condition changes during loop execution to guarantee termination.</description>
      <examples>
        <example title="Condition Safety">
          <correct-example title="Proper condition safety" conditions="Preventing infinite loops" expected-result="Safe conditional execution" correctness-criteria="Includes safety measures">WhileLoopStep with condition that changes during execution, proper exit pathways</correct-example>
          <incorrect-example title="Improper condition safety" conditions="Preventing infinite loops" expected-result="Safe conditional execution" incorrectness-criteria="Missing safety measures">WhileLoopStep with always-true condition, no condition changes during execution</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use descriptive condition names and meaningful loop body logic in WhileLoopStep to make the purpose clear and maintainable. Condition names should clearly indicate what is being evaluated and when the loop should terminate.</description>
      <examples>
        <example title="Descriptive Condition Names">
          <correct-example title="Clear condition names" conditions="Naming WhileLoopStep conditions" expected-result="Readable conditional loop logic" correctness-criteria="Uses descriptive names">condition: "IsTemperatureValid", condition: "HasUserInput", condition: "IsProcessComplete"</correct-example>
          <incorrect-example title="Unclear condition names" conditions="Naming WhileLoopStep conditions" expected-result="Readable conditional loop logic" incorrectness-criteria="Uses unclear names">condition: "Check", condition: "Test", condition: "Condition"</correct-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER use WhileLoopStep with conditions that cannot become false. NEVER use WhileLoopStep for fixed iteration counts. NEVER use WhileLoopStep without proper condition setup. Always ensure the condition can change during execution to prevent infinite loops.</description>
      <examples>
        <example title="WhileLoopStep Restrictions">
          <correct-example title="Proper WhileLoopStep usage" conditions="Selecting WhileLoopStep" expected-result="Correct conditional execution" correctness-criteria="Uses WhileLoopStep appropriately">Conditional repetition with falsifiable condition</correct-example>
          <incorrect-example title="Improper WhileLoopStep usage" conditions="Selecting WhileLoopStep" expected-result="Correct conditional execution" correctness-criteria="Uses WhileLoopStep inappropriately">Fixed iteration count, always-true condition, or non-falsifiable condition</correct-example>
        </example>
      </examples>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for WhileLoopStep">
    WhileLoopStep is designed for conditional iteration control with dynamic conditions that can change during execution. Always ensure the condition can become false, use proper port connections, and include meaningful loop body logic. Use ForLoopStep for fixed iteration scenarios.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Loop/ForLoopStep.mdc" reason="Fixed iteration control">ForLoopStep for fixed iterations</reference>
  </references>
</rule>