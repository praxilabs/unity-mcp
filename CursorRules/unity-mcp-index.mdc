---
alwaysApply: true
description: Master index and navigation guide for all Unity MCP Bridge rules and documentation
---

# Unity MCP Bridge - Rule Index & Navigation

## 🚨 CRITICAL RULES (Always Check First)

### 1. Master Rule - Start Here
[**unity-mcp-master.mdc**](mdc:.cursor/rules/unity-mcp-master.mdc)
- **Purpose**: Critical patterns, decision trees, common errors
- **When to use**: Every Unity MCP Bridge task
- **Key content**: JSON formats, ScriptableObject names, CompositeStep patterns

### 2. JSON & Parameters - Format Reference
[**json-parameter-guide.mdc**](mdc:.cursor/rules/json-parameter-guide.mdc)
- **Purpose**: Mandatory formatting rules and parameter patterns
- **When to use**: Before setting any parameters
- **Key content**: RegistryItem format, function parameters, validation

### 3. Legacy Rule (Deprecated)
[**xnode-step-nodes.mdc**](mdc:.cursor/rules/xnode-step-nodes.mdc)
- **Purpose**: Legacy content - use new rules instead
- **When to use**: Only for reference to old patterns
- **Status**: ⚠️ DEPRECATED - Use step-nodes-reference.mdc instead

## 📚 REFERENCE GUIDES

### 3. Step Nodes Reference - Complete Catalog
[**step-nodes-reference.mdc**](mdc:.cursor/rules/step-nodes-reference.mdc)
- **Purpose**: Comprehensive guide to all XNode step types
- **When to use**: Choosing appropriate step nodes
- **Key content**: Decision trees, parameter lists, usage patterns

### 4. MCP Tools Reference - API Documentation
[**mcp-tools-reference.mdc**](mdc:.cursor/rules/mcp-tools-reference.mdc)
- **Purpose**: Complete MCP tool documentation with examples
- **When to use**: Learning tool usage and parameters
- **Key content**: Tool parameters, usage patterns, best practices

## 🎯 DESIGN PATTERNS

### 5. Experiment Patterns - Design Templates
[**experiment-patterns.mdc**](mdc:.cursor/rules/experiment-patterns.mdc)
- **Purpose**: Proven experiment design patterns and templates
- **When to use**: Planning experiment structure and flow
- **Key content**: Educational, research, demo, data collection patterns

## 🔧 TROUBLESHOOTING

### 6. Troubleshooting Guide - Problem Solving
[**troubleshooting-guide.mdc**](mdc:.cursor/rules/troubleshooting-guide.mdc)
- **Purpose**: Error patterns, solutions, debugging strategies
- **When to use**: When encountering errors or unexpected behavior
- **Key content**: Common errors, diagnostic steps, prevention strategies

## 🎯 QUICK NAVIGATION BY TASK

### Creating Experiments
1. **Start**: [Master Rule](mdc:.cursor/rules/unity-mcp-master.mdc) - Decision tree
2. **Design**: [Experiment Patterns](mdc:.cursor/rules/experiment-patterns.mdc) - Choose pattern
3. **Implement**: [Step Nodes Reference](mdc:.cursor/rules/step-nodes-reference.mdc) - Select nodes
4. **Configure**: [JSON Guide](mdc:.cursor/rules/json-parameter-guide.mdc) - Set parameters
5. **Debug**: [Troubleshooting Guide](mdc:.cursor/rules/troubleshooting-guide.mdc) - Fix issues

### Setting Parameters
1. **Format**: [JSON Guide](mdc:.cursor/rules/json-parameter-guide.mdc) - Correct syntax
2. **Tools**: [MCP Tools Reference](mdc:.cursor/rules/mcp-tools-reference.mcp) - Parameter tools
3. **Validation**: [Master Rule](mdc:.cursor/rules/unity-mcp-master.mdc) - Checklists

### Connecting Nodes
1. **Patterns**: [Master Rule](mdc:.cursor/rules/unity-mcp-master.mcp) - Connection patterns
2. **Step Types**: [Step Nodes Reference](mdc:.cursor/rules/step-nodes-reference.mcp) - Port information
3. **Tools**: [MCP Tools Reference](mdc:.cursor/rules/mcp-tools-reference.mcp) - Connection tools

### Debugging Issues
1. **Start**: [Troubleshooting Guide](mdc:.cursor/rules/troubleshooting-guide.mcp) - Error patterns
2. **Tools**: [MCP Tools Reference](mdc:.cursor/rules/mcp-tools-reference.mcp) - Diagnostic tools
3. **Validation**: [JSON Guide](mdc:.cursor/rules/json-parameter-guide.mcp) - Format checking

## 🔍 RULE HIERARCHY

### Tier 1: Always Applied (Critical)
- [**unity-mcp-master.mdc**](mdc:.cursor/rules/unity-mcp-master.mcp) - Core patterns
- [**json-parameter-guide.mdc**](mdc:.cursor/rules/json-parameter-guide.mcp) - Formatting rules
- [**unity-mcp-index.mdc**](mdc:.cursor/rules/unity-mcp-index.mcp) - This index

### Tier 2: Reference Documentation
- [**step-nodes-reference.mdc**](mdc:.cursor/rules/step-nodes-reference.mcp) - Node catalog
- [**mcp-tools-reference.mdc**](mdc:.cursor/rules/mcp-tools-reference.mcp) - Tool documentation

### Tier 3: Design & Problem Solving
- [**experiment-patterns.mdc**](mdc:.cursor/rules/experiment-patterns.mcp) - Design templates
- [**troubleshooting-guide.mdc**](mdc:.cursor/rules/troubleshooting-guide.mcp) - Error solutions

## 📋 USAGE WORKFLOW

### Before Starting Any Task
1. ✅ Check [Master Rule](mdc:.cursor/rules/unity-mcp-master.mcp) decision tree
2. ✅ Review [JSON Guide](mdc:.cursor/rules/json-parameter-guide.mcp) formats
3. ✅ Plan using [Experiment Patterns](mdc:.cursor/rules/experiment-patterns.mcp)

### During Implementation
1. 🔧 Reference [Step Nodes Guide](mdc:.cursor/rules/step-nodes-reference.mcp) for node selection
2. 🔧 Use [MCP Tools Reference](mdc:.cursor/rules/mcp-tools-reference.mcp) for tool usage
3. 🔧 Follow [Master Rule](mdc:.cursor/rules/unity-mcp-master.mcp) checklists

### When Problems Occur
1. 🚨 Check [Troubleshooting Guide](mdc:.cursor/rules/troubleshooting-guide.mcp) first
2. 🚨 Validate with [JSON Guide](mdc:.cursor/rules/json-parameter-guide.mcp)
3. 🚨 Use [MCP Tools Reference](mdc:.cursor/rules/mcp-tools-reference.mcp) diagnostic tools

## 🎯 RULE MAINTENANCE

### When to Update Rules
- New error patterns discovered
- Additional tools or features added
- Better patterns or solutions found
- User feedback indicates confusion

### How to Update Rules
1. **Identify the appropriate rule file**
2. **Follow the established format and structure**
3. **Add examples and validation steps**
4. **Update this index if needed**

### Rule Quality Standards
- ✅ Clear, actionable guidance
- ✅ Real examples with correct syntax
- ✅ Error prevention strategies
- ✅ Cross-references to related rules
- ✅ Visual indicators (✅❌⚠️🔧)

## 🚀 SUCCESS METRICS

### Rule Effectiveness Indicators
- Reduced JSON formatting errors
- Faster problem resolution
- Consistent use of correct patterns
- Fewer repeated mistakes
- Improved experiment quality

### Usage Tracking
- Monitor which rules are referenced most
- Track error pattern frequency
- Identify knowledge gaps
- Update based on real usage

---

**Remember**: These rules are living documents. Update them as you learn new patterns, discover better solutions, or encounter new challenges. The goal is to make Unity MCP Bridge development faster, more reliable, and less error-prone.