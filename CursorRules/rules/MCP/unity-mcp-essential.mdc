---
alwaysApply: true
---

# Unity MCP Essential Rules

This file contains the core rules for creating Unity MCP experiments. Always read node-specific rule files before implementation.

## 🚨 **MANDATORY NODE IMPLEMENTATION RULE** ⚠️ **PRIMARY ENTRY POINT**

**CRITICAL**: Before creating ANY node in a graph, you MUST:

1. **Navigate to the specific node rule file** using the category → node reference chain
2. **Read the complete node documentation** including patterns, mistakes, and best practices
3. **Understand the node's specific behavior** (e.g., ClickStep is a PAUSE node, AttachStep only attaches, etc.)
4. **Follow the established patterns** exactly as documented
5. **Only THEN implement** the node with proper connections and next steps

**VIOLATION**: Creating nodes without reading their specific rule files is a critical failure.

**Example**: For "Click on bottle to open" → Navigate to ClickNodes → ClickStep → Read ClickStep.mdc → Understand it's a PAUSE node → Implement: ClickStep → AnimationStep

---

## 🧭 **NAVIGATION GUIDE** ⭐ **HOW TO FIND AND USE EXISTING NODES**

### **🚀 QUICK START: Finding the Right Node Type**

**Step 1: Identify Your Need**
- What do you want to accomplish in your experiment?
- What type of interaction or operation do you need?

**FunctionCallStep Rule**: For any experiment step that doesn't have a dedicated node, use FunctionCallStep directly. Break complex operations into logical steps: use existing nodes (AttachStep, ClickStep) for what they handle, then FunctionCallStep for custom logic.

**Step 2: Navigate to the Right Category**
Use the **Quick Decision Tree** below to find your category, then follow the reference links.

**Step 3: Read the Category File**
Each category file contains:
- **Available node types** in that category
- **Specific patterns** and best practices
- **Common mistakes** to avoid
- **Connection requirements** and validation rules


**Step 4: Navigate to Specific Node**
Within each category file, you'll find references to individual node files with detailed implementation guides.

---

## 🎯 **QUICK DECISION TREE** ⭐ **FIND YOUR CATEGORY**

**Need to show/hide objects or enable/disable colliders?**
→ **Tools** category → ToolNodes.mdc

**Need user interaction in any order or parallel execution?**
→ **Control Flow** category → ControlFlowNodes.mdc

**Need to attach/detach objects or equipment assembly?**
→ **Attach-Detach** category → AttachDetachNodes.mdc

**Need clicking, selection, or interactive manipulation?**
→ **Click** category → ClickNodes.mdc

**Need camera positioning, focus, or view management?**
→ **Camera** category → CameraNodes.mdc

**Need to call methods on GameObjects or system functions?**
→ **Function Call** category → FunctionCallNodes.mdc

**Need loops, iterations, or repeated actions?**
→ **Loops** category → LoopNodes.mdc

**Need UI messages, hints, timers, or user interface?**
→ **UI** category → UINodes.mdc

**Need delays, subgraphs, or utility operations?**
→ **Utility** category → UtilityNodes.mdc

**Need event-driven interactions or reactive programming?**
→ **New Events** category → NewEventsNodes.mdc

**Need data tables, records, or stage management?**
→ **Table** category → TableNodes.mdc

**Need progress tracking or stage navigation?**
→ **Progress Map** category → ProgressMapNodes.mdc

**Need animations, subgraphs, or miscellaneous operations?**
→ **Misc** category → MiscNodes.mdc


## 🔍 **NAVIGATION WORKFLOW**

**Standard Process**:
1. **Identify Need** → Use decision tree to find category
2. **Read Category File** → Understand patterns and requirements
3. **Find Specific Node** → Locate exact node type needed
4. **Read Node Details** → Follow implementation patterns
5. **Apply Pattern** → Use established best practices

**Example Workflow**:
- Need: "Click on bottle to open"
- Category: Click category
- Node: ClickStep
- Pattern: ClickStep (pause) → AnimationStep (open animation)
- Implementation: Create ClickStep node, then AnimationStep node, connect them

**Reference Chain**:
```
Category File → Specific Node File → Implementation Pattern → Validation Rules
```

---

## 🎯 **MULTI-STAGE HANDLING RULE**

**Multi-Stage Principle**:
When a user requests multiple stages, each stage is a separate StepsGraph with no direct connections between them.

**Stage Rules**:
- Each stage = Separate StepsGraph asset in `Assets/Testing/Graphs/`
- No cross-stage node connections within the same graph
- Stage transitions only via GoToStageStep node
- Each graph handles one stage completely

**Architecture**:
```bash
Assets/Testing/Graphs/
├── ChemistryLab_VitaminCAnalysis_Stage1_StepGraph.asset
├── ChemistryLab_VitaminCAnalysis_Stage2_StepGraph.asset
└── ChemistryLab_VitaminCAnalysis_Stage3_StepGraph.asset
```

**Transition Pattern**:
```bash
Stage1_Graph: FinalNode → GoToStageStep(Stage2) → End
Stage2_Graph: Start → Stage2Content → End
```

---

## 🎭 **SCENARIO PATTERN RULE**

**Scenario Selection Pattern**:
All scenario-based experiments follow this pattern for user choice handling:

```bash
1. GameObjectSetActiveStep(ChoicesCanvasUI) → Enable choice UI
2. ClickUIStep(ConfirmScenarioButton) → User clicks to confirm
3. FunctionCallStep(ChoicesUIScript.isScenarioA) → Check user choice
4. IfStatementStep → Route to correct scenario
   ├── True: Execute Scenario 1
   └── False: Execute Scenario 2
```

**Implementation**:
```bash
GameObjectSetActiveStep(ChoicesCanvasUI) 
    ↓
ClickUIStep(ConfirmScenarioButton)
    ↓
FunctionCallStep(ChoicesUIScript.isScenarioA)
    ↓
IfStatementStep
    ├── True → SubGraphStep(Scenario1_Graph)
    └── False → SubGraphStep(Scenario2_Graph)
```

---

## 📝 **GRAPH NAMING RULE**

**Create graphs with descriptive, meaningful names that explain the graph's purpose.**

**Naming Convention**:
```
[ExperimentType]_[SpecificPurpose]_[GraphType]
```

**Examples**:
- `PhysicsLab_Mechanics_StepGraph`
- `ChemistryLab_Titration_StepGraph`
- `BiologyLab_Microscopy_StepGraph`
- `InteractiveLab_EquipmentSetup_StepGraph`

**Guidelines**:
1. Be specific: Include exact experiment type and purpose
2. Include phase number/name if multi-phase
3. Always include `StepGraph` suffix
4. Use underscores to separate words
5. Avoid generic names like "NewStepsGraph", "Graph1", "Experiment", "Test"

---

## 🎯 **SCRIPTABLE OBJECT CREATION RULE**

**Standard Protocol**:
```bash
# 1. Create ExperimentData
mcp_unityMCP_create_scriptable_object --scriptable_object_type "ExperimentData" --asset_name "[ExperimentType]_[Purpose]_ExperimentData" --folder "Assets/Testing/"

# 2. Create ItemsRegistry
mcp_unityMCP_create_scriptable_object --scriptable_object_type "ExperimentItemsRegistry" --asset_name "[ExperimentType]_[Purpose]_ItemsRegistry" --folder "Assets/Testing/"

# 3. Create StepsGraph
mcp_unityMCP_create_scriptable_object --scriptable_object_type "StepsGraph" --asset_name "[ExperimentType]_[Purpose]_StepGraph" --folder "Assets/Testing/Graphs/"
```

---

## 🔗 **ADDITIONAL REFERENCES**

- **Graph Validation Rules** - Post-creation validation
- **Graph Connection Rules** - Critical connection requirements
- **Positioning Strategy** - Node positioning and staging rules
- **MCP Tools Reference** - Complete tool reference
