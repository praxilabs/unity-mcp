---
alwaysApply: true
---

# Unity MCP Bridge - Essential Rules & Category Reference

## üö® CRITICAL RULES ‚ö†Ô∏è

### **THE ULTIMATE RULE**
- ALWAYS check out the common mistakes section of all the files of the nodes you are about to use. this rule should never be broken this rule is the most important out of all the other rules.
- while interpretting the prompt you have to always go to the Verbal Clearance section of each file to never mis-interpret text which would lead to an error.

### **GRAPH NAMING RULE** ‚≠ê **MANDATORY DESCRIPTIVE NAMING**
**ALWAYS create graphs with descriptive, meaningful names that explain the graph's purpose and content.**

#### **Naming Convention Structure**
```
[ExperimentType]_[SpecificPurpose]_[GraphType]
```

#### **Naming Examples by Experiment Type**
- **Physics**: `PhysicsLab_Mechanics_StepGraph`, `PhysicsLab_Electricity_StepGraph`
- **Chemistry**: `ChemistryLab_Titration_StepGraph`, `ChemistryLab_Reactions_StepGraph`
- **Biology**: `BiologyLab_Microscopy_StepGraph`, `BiologyLab_Dissection_StepGraph`
- **Interactive**: `InteractiveLab_EquipmentSetup_StepGraph`, `InteractiveLab_DataCollection_StepGraph`
- **Multi-Phase**: `PhysicsLab_Phase1_Introduction_StepGraph`, `PhysicsLab_Phase2_Exploration_StepGraph`

#### **Naming Guidelines**
1. **üéØ Be Specific**: Include exact experiment type and purpose
2. **üìã Include Phase**: If multi-phase, include phase number/name
3. **üîß Indicate Type**: Always include `StepGraph` suffix
4. **üìÅ Use Underscores**: Separate words with underscores
5. **üé® Be Descriptive**: Name should immediately tell you what the graph does
6. **üîç Avoid Generic Names**: Never use "NewStepsGraph", "Graph1", "Experiment", "Test"

### **COLLIDER MANAGEMENT RULE**
**"Enable collider" = `ToggleColliderStep` (NOT `GameObjectSetActiveStep`)**
- ‚ùå **Wrong**: `GameObjectSetActiveStep` for colliders
- ‚úÖ **Correct**: `ToggleColliderStep` for collider management

### **VALIDATION LOOP RULE**
**After ANY correction, you MUST re-validate and continue the fix‚Üívalidate cycle until 100% error-free.**
- Never stop at first fix
- Always complete the full validation cycle
- Use `list_graph_nodes` after each correction

## üéØ QUICK DECISION TREE

### Need to show/hide objects?
‚Üí **Tools** category ‚Üí [GameObjectSetActiveStep](mdc:.cursor/rules/MCP/GraphLogic/ToolNodes.mdc)

### Need to enable/disable colliders?
‚Üí **Tools** category ‚Üí [ToggleColliderStep](mdc:.cursor/rules/MCP/GraphLogic/ToolNodes.mdc) ‚≠ê **CRITICAL RULE**

### Need user interaction in any order?
‚Üí **Control Flow** category ‚Üí [CompositeStep pattern](mdc:.cursor/rules/MCP/GraphLogic/ControlFlowNodes.mdc)

### Need sequential execution?
‚Üí **Chain: Node1.exit ‚Üí Node2.entry**

### Need function calls?
‚Üí **Function Call** category ‚Üí [FunctionCallStep](mdc:.cursor/rules/MCP/GraphLogic/FunctionCallNodes.mdc)

## üìÇ STEP NODE CATEGORIES

**Quick Reference**: [Attach-Detach](mdc:.cursor/rules/MCP/GraphLogic/Attach-DetachNodes.mdc) | [Click](mdc:.cursor/rules/MCP/GraphLogic/ClickNodes.mdc) | [Control Flow](mdc:.cursor/rules/MCP/GraphLogic/ControlFlowNodes.mdc) | [Camera](mdc:.cursor/rules/MCP/GraphLogic/CameraNodes.mdc) | [Function Call](mdc:.cursor/rules/MCP/GraphLogic/FunctionCallNodes.mdc) | [Loops](mdc:.cursor/rules/MCP/GraphLogic/LoopNodes.mdc) | [Tools](mdc:.cursor/rules/MCP/GraphLogic/ToolNodes.mdc) | [UI](mdc:.cursor/rules/MCP/GraphLogic/UINodes.mdc) | [Utility](mdc:.cursor/rules/MCP/GraphLogic/UtilityNodes.mdc) | [NewEvents](mdc:.cursor/rules/MCP/GraphLogic/NewEventsNodes.mdc) | [Table](mdc:.cursor/rules/MCP/GraphLogic/TableNodes.mdc) | [Progress Map](mdc:.cursor/rules/MCP/GraphLogic/ProgressMapNodes.mdc) | [Misc](mdc:.cursor/rules/MCP/GraphLogic/MiscNodes.mdc)

## üîó **CRITICAL POSITIONING & CONNECTION RULES** ‚ö†Ô∏è

### **POSITIONING STRATEGY REFERENCE** ‚≠ê **MANDATORY**
**ALWAYS refer to the comprehensive positioning strategy guide before positioning any nodes:**
- [PositioningStrategy](mdc:.cursor/rules/MCP/GraphLogic/PositioningStrategy.mdc) - Complete positioning decision tree and implementation guide

### **MANDATORY POSITIONING STANDARDS**
**ALWAYS follow these positioning rules for professional, readable graphs:**

#### **Spacing Requirements**
- **Horizontal Spacing**: Minimum 450px between sequential nodes
- **Vertical Spacing**: Minimum 300px between sequential nodes  
- **Flow Direction**: TOP-TO-BOTTOM (use positive Y values: 0, 300, 600, 900)
- **Horizontal Flow**: LEFT-TO-RIGHT (use positive X values: 0, 450, 900, 1350)
- **Y-Axis Logic**: Increasing Y values move DOWNWARD (top-to-bottom flow)
- **X-Axis Logic**: Increasing X values move RIGHTWARD (left-to-right flow)

#### **üö´ FORBIDDEN POSITIONING**
- **No backwards Y flow**: Never connect from lower Y to higher Y
- **No backwards X flow**: Never connect from higher X to lower X
- **No overlapping nodes**: Always maintain minimum spacing
- **No negative Y for downward flow**: Use positive Y values (0, 300, 600, 900)

### **Special Looping Node Rules**
**Looping nodes (CompositeStep, WhileLoopStep, ForLoopStep) can use reduced spacing:**
- **Reduced Vertical**: 200px minimum (instead of 300px)
- **Reduced Horizontal**: 300px minimum (instead of 450px)
- **Loop connections**: Can connect back to create circular flow

### **Quick Reference Examples**
```bash
# ‚úÖ CORRECT: Top-to-bottom with proper spacing
mcp_unityMCP_create_xnode_node --position_x 0 --position_y 0
mcp_unityMCP_create_xnode_node --position_x 0 --position_y 300
mcp_unityMCP_create_xnode_node --position_x 0 --position_y 600

# ‚úÖ CORRECT: Left-to-right with proper spacing
mcp_unityMCP_create_xnode_node --position_x 0 --position_y 0
mcp_unityMCP_create_xnode_node --position_x 450 --position_y 0
mcp_unityMCP_create_xnode_node --position_x 900 --position_y 0
```

### **Validation Checklist**
- ‚úÖ **Positioning strategy analyzed** using [PositioningStrategy](mdc:.cursor/rules/MCP/GraphLogic/PositioningStrategy.mdc)
- ‚úÖ **Minimum 450px horizontal spacing** between sequential nodes
- ‚úÖ **Minimum 300px vertical spacing** between sequential nodes
- ‚úÖ **No visual overlapping** between any nodes
- ‚úÖ **Logical flow direction** maintained (TOP-TO-BOTTOM)
- ‚úÖ **Positive Y values used** for downward flow (0, 300, 600, 900)
- ‚úÖ **No backwards connections** in any direction

## üîó ADDITIONAL REFERENCES

- [PositioningStrategy](mdc:.cursor/rules/MCP/GraphLogic/PositioningStrategy.mdc) - **CRITICAL**: Complete positioning decision tree and implementation guide
- [MCP Tools Reference](mdc:.cursor/rules/MCP/mcp-tools-reference.mdc) - Complete tool reference
- [Graph Connection Rules](mdc:.cursor/rules/MCP/graph-connection-rules.mdc) - Critical connection requirements
- [Graph Validation Rules](mdc:.cursor/rules/MCP/graph-validation-rules.mdc) - Post-creation validation

**Remember**: When in doubt, always verify in the codebase first!