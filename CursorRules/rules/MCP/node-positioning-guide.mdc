---
alwaysApply: false
description: Node positioning guidelines and layout rules for Unity MCP graphs
---

# Node Positioning Guide

## NODE POSITIONING RULES

### **Spacing Rules**
- **Horizontal**: 400 units between sequential nodes
- **Vertical**: 300 units between parallel routes
- **Start**: (100, 100) for first node

### **Layout Guidelines**

#### **Sequential Flow Layout**
```
Node1 (100, 100) → Node2 (500, 100) → Node3 (900, 100) → Node4 (1300, 100)
```

#### **Parallel Routes Layout**
```
CompositeStep (100, 100)
├── Route1: Node1 (500, -200) → Node2 (900, -200)
├── Route2: Node3 (500, 100) → Node4 (900, 100)
└── Route3: Node5 (500, 400) → Node6 (900, 400)
```

#### **Branching Layout**
```
DecisionNode (100, 100)
├── True: ActionA (500, -100) → Continue
└── False: ActionB (500, 100) → Continue
```

## VISUAL ORGANIZATION PRINCIPLES

### **1. Logical Grouping**
- Group related nodes together
- Keep similar operations in the same area
- Use consistent spacing for visual clarity

### **2. Flow Direction**
- **Primary flow**: Left to right
- **Secondary flow**: Top to bottom for parallel routes
- **Return connections**: Use clear visual paths

### **3. Clean Structure**
```
Keep the nodes that are of the same purpose in a Clean and Compiled Shape and structure
position the nodes together in harmony instead of just putting them in rows, columns or even matrices
do what suits the best in terms for readability and cleanliness to the user, keep in mind that nodes contains a Width so position the nodes away from each other a bit to avoid stacking nodes on top of each other
```

## POSITIONING EXAMPLES

### **Simple Sequential Flow**
```
IntroMessage (100, 100) → EnableCollider (500, 100) → FocusCamera (900, 100) → ReturnCamera (1300, 100)
```

### **CompositeStep with Parallel Routes**
```
CompositeStep (100, 100)
├── ClickObject1 (500, -200) → FocusObject1 (900, -200) → Action1 (1300, -200)
├── ClickObject2 (500, 100) → FocusObject2 (900, 100) → Action2 (1300, 100)
└── ClickObject3 (500, 400) → FocusObject3 (900, 400) → Action3 (1300, 400)
```

### **Conditional Branching**
```
IfStatement (100, 100)
├── True: ShowMessage (500, -100) → Continue
└── False: HideObject (500, 100) → Continue
```

## POSITIONING MISTAKES TO AVOID

1. **Overlapping nodes**: Ensure adequate spacing
2. **Inconsistent spacing**: Use standard 400/300 unit spacing
3. **Poor visual flow**: Follow left-to-right, top-to-bottom conventions
4. **Cluttered layouts**: Group related nodes logically
5. **Hidden connections**: Ensure connection lines are visible and clear

## POSITIONING TOOLS

### **Node Creation with Positioning**
```python
# Create nodes with specific positions
create_xnode_node(
    graph_path="path/to/graph.asset",
    node_type_name="ClickStep",
    position_x=500,
    position_y=100
)
```

### **Position Adjustment**
```python
# Adjust node positions after creation
set_node_position(
    graph_path="path/to/graph.asset",
    node_name="ClickStep_12345",
    position_x=500,
    position_y=100
)
```

## POSITIONING CHECKLIST

- **Adequate spacing**: 400 horizontal, 300 vertical
- **Logical flow**: Left to right progression
- **Clear grouping**: Related nodes positioned together
- **Visible connections**: No overlapping or hidden lines
- **Consistent layout**: Standard positioning conventions
- **Readable structure**: Easy to follow execution flow


