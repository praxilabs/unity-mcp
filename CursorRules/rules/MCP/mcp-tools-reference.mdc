---
description: it is used when the AI wants to have an insight on the current tools we have in the system and how to use them.
alwaysApply: false
---
## üéØ Standard Workflows

### Graph Creation Workflow
```python
# 1. Create graph
graph_path = mcp_unityMCP_create_scriptable_object("StepsGraph", "MyGraph", "Assets/Testing/Graphs/")

# 2. Create nodes (TOP-TO-BOTTOM structure - RECOMMENDED)
mcp_unityMCP_create_xnode_node(graph_path, "ClickStep", 0, 0, "Click on object")
mcp_unityMCP_create_xnode_node(graph_path, "DelayStep", 0, -300, "2 second delay")

# 3. Connect nodes
mcp_unityMCP_connect_nodes_by_name(graph_path, "ClickStep_123", "DelayStep_456")

# 4. Set first step
mcp_unityMCP_set_node_as_first_step(graph_path, "ClickStep_123")

# 5. Verify setup
mcp_unityMCP_list_graph_nodes(graph_path)
```

### GameObject Management Workflow
```python
# 1. Create GameObject
mcp_unityMCP_manage_gameobject(
    action="create",
    name="MyObject",
    position=[0, 0, 0],
    components_to_add=["Rigidbody"]
)

# 2. Set properties
mcp_unityMCP_manage_gameobject(
    action="set_component_property",
    target="MyObject",
    search_method="by_name",
    component_properties={"Rigidbody": {"mass": 10.0}}
)
```

---

## ‚ö†Ô∏è Critical Best Practices

### ScriptableObject Creation
- **Exact Class Names**: Use exact class names: `"ExperimentItemsRegistry"`, `"ExperimentData"`, `"StepsGraph"`
- **Verification**: Search codebase before creating to prevent "Instance couldn't be created" errors

### Node Graph Management
- **Positioning Rules**: 
  - ‚úÖ **TOP-TO-BOTTOM**: `position_y: 0, -300, -600` (recommended)
  - ‚úÖ **LEFT-TO-RIGHT**: `position_x: 0, 450, 900`
  - ‚ùå **NEVER bottom-up**: Avoid `position_y: -300, -100, 0`
- **Spacing**: Minimum 450px horizontal, 300px vertical between sequential nodes
- **Directional Connections**: ‚úÖ **FORWARD ONLY**, ‚ùå **NEVER BACKWARDS**

## üö® Error Prevention & Debugging

### Common Issues
1. **ScriptableObject Errors**: Use exact class names
2. **Connection Errors**: Verify ports exist, test incrementally
3. **Registry Errors**: Match names exactly
4. **Component Errors**: Verify components exist before calling methods

### Debugging Steps
1. Check console: `mcp_unityMCP_read_console(action="get", types=["error"])`
2. Verify node exists: `mcp_unityMCP_check_node_exists(graph_path, node_name)`
3. List graph nodes: `mcp_unityMCP_list_graph_nodes(graph_path)`
4. Print debug info: `mcp_unityMCP_print("Debug message")`