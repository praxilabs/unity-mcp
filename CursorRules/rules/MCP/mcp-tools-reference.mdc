
# Unity MCP Bridge - Complete Tool Reference

## üö® CRITICAL POSITIONING WARNING ‚ö†Ô∏è

**NEVER use negative Y coordinates that create bottom-up flow!**
- ‚ùå **FORBIDDEN**: `position_y: -200, -300, -400` (creates bottom-up structure)
- ‚úÖ **REQUIRED**: Use `position_y: 0, -200, -400` (creates top-to-bottom structure)
- ‚úÖ **ALTERNATIVE**: Use `position_x: 0, 300, 600` (creates left-to-right structure)

---

## üìã Core Tools

### Script & Asset Management

#### `mcp_unityMCP_manage_script`
**Purpose**: Create, read, update, delete C# scripts
**Key Parameters**: `action`, `name`, `path`, `contents`, `script_type`, `namespace`

#### `mcp_unityMCP_manage_asset`
**Purpose**: Import, create, modify, delete assets
**Key Parameters**: `action`, `path`, `asset_type`, `properties`, `search_pattern`

#### `mcp_unityMCP_create_scriptable_object`
**Purpose**: Create new ScriptableObject of specified type
**Key Parameters**: `scriptable_object_type`, `asset_name`, `folder`

#### `mcp_unityMCP_manage_shader`
**Purpose**: Create, read, update, delete shader scripts
**Key Parameters**: `action`, `name`, `path`, `contents`

### Scene & Editor Control

#### `mcp_unityMCP_manage_scene`
**Purpose**: Load, save, create scenes and get hierarchy
**Key Parameters**: `action`, `name`, `path`, `build_index`

#### `mcp_unityMCP_manage_editor`
**Purpose**: Control Unity editor state and settings
**Key Parameters**: `action`, `wait_for_completion`, `tool_name`, `tag_name`, `layer_name`

#### `mcp_unityMCP_execute_menu_item`
**Purpose**: Execute Unity Editor menu item via path
**Key Parameters**: `menu_path`, `action`, `parameters`

### GameObject Operations

#### `mcp_unityMCP_manage_gameobject`
**Purpose**: Create, modify, delete, find GameObjects and manage components
**Key Parameters**: `action`, `target`, `search_method`, `name`, `position`, `rotation`, `scale`, `components_to_add`, `component_properties`

## üéØ Node Graph Management

### Graph Structure Tools

#### `mcp_unityMCP_list_graph_nodes`
**Purpose**: List all nodes in a StepsGraph
**Parameters**: `graph_path`

#### `mcp_unityMCP_check_node_exists`
**Purpose**: Verify if a node exists in the graph
**Parameters**: `graph_path`, `node_name`

#### `mcp_unityMCP_list_available_node_types`
**Purpose**: List all available node types for xNode graphs
**Parameters**: `random_string` (dummy parameter required)

### Node Operations

#### `mcp_unityMCP_create_xnode_node`
**Purpose**: Create new node in existing xNode graph
**Key Parameters**: `graph_path`, `node_type_name`, `position_x`, `position_y`, `tooltip`

#### `mcp_unityMCP_delete_xnode_node`
**Purpose**: Delete node from xNode graph
**Key Parameters**: `graph_path`, `node_identifier`, `identifier_type`

#### `mcp_unityMCP_delete_multiple_nodes`
**Purpose**: Delete multiple nodes from xNode graph
**Key Parameters**: `graph_path`, `node_identifiers`, `identifier_type`

#### `mcp_unityMCP_set_node_position`
**Purpose**: Set position of specific node in xNode graph
**Key Parameters**: `graph_path`, `node_name`, `position_x`, `position_y`

### Node Connections

#### `mcp_unityMCP_make_connection_between_nodes`
**Purpose**: Create connection between two nodes
**Key Parameters**: `graph_path`, `from_node`, `to_node`, `from_port`, `to_port`

#### `mcp_unityMCP_connect_nodes_by_name`
**Purpose**: Connect nodes using their names (convenience wrapper)
**Key Parameters**: `graph_path`, `from_node_name`, `to_node_name`, `from_port`, `to_port`

#### `mcp_unityMCP_connect_nodes_by_id`
**Purpose**: Connect nodes using their instance IDs (convenience wrapper)
**Key Parameters**: `graph_path`, `from_node_id`, `to_node_id`, `from_port`, `to_port`

### Connection Management

#### `mcp_unityMCP_delete_connection_between_nodes`
**Purpose**: Delete connection between two nodes
**Key Parameters**: `graph_path`, `from_node`, `to_node`, `from_port`, `to_port`

#### `mcp_unityMCP_delete_all_connections_from_node`
**Purpose**: Delete all connections from a specific node
**Key Parameters**: `graph_path`, `node`, `port`

#### `mcp_unityMCP_delete_all_connections_to_node`
**Purpose**: Delete all connections to a specific node
**Key Parameters**: `graph_path`, `node`, `port`

#### `mcp_unityMCP_delete_all_connections_in_graph`
**Purpose**: Delete all connections in a NodeGraph
**Key Parameters**: `graph_path`

### Graph Configuration

#### `mcp_unityMCP_set_node_as_first_step`
**Purpose**: Set specific node as first step in StepsGraph
**Key Parameters**: `graph_path`, `node_name`

## üîç Debugging & Console

#### `mcp_unityMCP_read_console`
**Purpose**: Get messages from or clear Unity Editor console
**Key Parameters**: `action`, `types`, `count`, `filter_text`, `format`

#### `mcp_unityMCP_print`
**Purpose**: Print custom message to Unity console
**Key Parameters**: `value` (optional, defaults to 'Hello, World!')

---

## üéØ Standard Workflows

### Graph Creation Workflow
```python
# 1. Create graph
graph_path = mcp_unityMCP_create_scriptable_object("StepsGraph", "MyGraph", "Assets/Testing/Graphs/")

# 2. Create nodes (TOP-TO-BOTTOM structure - RECOMMENDED)
mcp_unityMCP_create_xnode_node(graph_path, "ClickStep", 0, 0, "Click on object")
mcp_unityMCP_create_xnode_node(graph_path, "DelayStep", 0, -300, "2 second delay")

# 3. Connect nodes
mcp_unityMCP_connect_nodes_by_name(graph_path, "ClickStep_123", "DelayStep_456")

# 4. Set first step
mcp_unityMCP_set_node_as_first_step(graph_path, "ClickStep_123")

# 5. Verify setup
mcp_unityMCP_list_graph_nodes(graph_path)
```

### GameObject Management Workflow
```python
# 1. Create GameObject
mcp_unityMCP_manage_gameobject(
    action="create",
    name="MyObject",
    position=[0, 0, 0],
    components_to_add=["Rigidbody"]
)

# 2. Set properties
mcp_unityMCP_manage_gameobject(
    action="set_component_property",
    target="MyObject",
    search_method="by_name",
    component_properties={"Rigidbody": {"mass": 10.0}}
)
```

---

## ‚ö†Ô∏è Critical Best Practices

### ScriptableObject Creation
- **Exact Class Names**: Use exact class names: `"ExperimentItemsRegistry"`, `"ExperimentData"`, `"StepsGraph"`
- **Verification**: Search codebase before creating to prevent "Instance couldn't be created" errors

### Node Graph Management
- **Positioning Rules**: 
  - ‚úÖ **TOP-TO-BOTTOM**: `position_y: 0, -300, -600` (recommended)
  - ‚úÖ **LEFT-TO-RIGHT**: `position_x: 0, 450, 900`
  - ‚ùå **NEVER bottom-up**: Avoid `position_y: -300, -100, 0`
- **Spacing**: Minimum 450px horizontal, 300px vertical between sequential nodes
- **Directional Connections**: ‚úÖ **FORWARD ONLY**, ‚ùå **NEVER BACKWARDS**

## üö® Error Prevention & Debugging

### Common Issues
1. **ScriptableObject Errors**: Use exact class names
2. **Connection Errors**: Verify ports exist, test incrementally
3. **Registry Errors**: Match names exactly
4. **Component Errors**: Verify components exist before calling methods

### Debugging Steps
1. Check console: `mcp_unityMCP_read_console(action="get", types=["error"])`
2. Verify node exists: `mcp_unityMCP_check_node_exists(graph_path, node_name)`
3. List graph nodes: `mcp_unityMCP_list_graph_nodes(graph_path)`
4. Print debug info: `mcp_unityMCP_print("Debug message")`