---
alwaysApply: true
---
# MCP Tools Reference

This is a knowledge base index for Unity MCP tools. Use this for quick reference on available tools and their capabilities.

## **SCRIPTABLE OBJECT TOOLS**

### `mcp_unityMCP_create_scriptable_object`
- **Purpose**: Create Unity ScriptableObject assets
- **Types**: "ExperimentData", "ExperimentItemsRegistry", "StepsGraph"
- **Location**: Assets/Testing/ folder structure

### `mcp_unityMCP_manage_asset`
- **Purpose**: Import, create, modify, delete Unity assets
- **Actions**: 'import', 'create', 'modify', 'delete', 'duplicate', 'move', 'rename'

## **GRAPH MANAGEMENT TOOLS**

### `mcp_unityMCP_create_xnode_node`
- **Purpose**: Create nodes in xNode graphs
- **Parameters**: graph_path, node_type_name, position_x, position_y, tooltip, description
- **Returns**: nodeId, nodeName for connections
- **CRITICAL**: Always pass description MUST contain required Components from the rule file of the nodes. This rules is a must and neglecting it will lead to unwanted behaviour.
- **Description Format**
2. Node Functionality: This Node does X and Y.
3. Required Components.

Example:
```
This Node is responsible for 1, 2, and 3.

Required Components:
    1. Collider.
    2. AttachableTool Script.
    3. DraggableObject Script.
    4. Draggable tag.
    etc..
```

### `mcp_unityMCP_connect_nodes_by_name`
- **Purpose**: Connect nodes using their names
- **Parameters**: graph_path, from_node_name, to_node_name, ports (optional)

### `mcp_unityMCP_set_node_as_first_step`
- **Purpose**: Set entry point for graph execution
- **Parameters**: graph_path, node_name

### `mcp_unityMCP_list_graph_nodes`
- **Purpose**: Get complete node list and structure
- **Use**: Validation and debugging

### `mcp_unityMCP_delete_xnode_node`
- **Purpose**: Remove nodes from graphs
- **Parameters**: graph_path, node_identifier, identifier_type

## **GAMEOBJECT MANAGEMENT TOOLS**

### `mcp_unityMCP_manage_gameobject`
- **Purpose**: Create, modify, delete GameObjects
- **Actions**: 'create', 'modify', 'find', 'add_component', 'remove_component'
- **Component Properties**: Set via component_properties parameter

## **DEBUGGING & VALIDATION TOOLS**

### `mcp_unityMCP_read_console`
- **Purpose**: Get Unity console messages
- **Types**: 'error', 'warning', 'log', 'all'

### `mcp_unityMCP_check_node_exists`
- **Purpose**: Verify node exists in graph
- **Parameters**: graph_path, node_name

### `mcp_unityMCP_print`
- **Purpose**: Print messages to Unity console
- **Use**: Debug output and status messages

## **EDITOR CONTROL TOOLS**

### `mcp_unityMCP_manage_editor`
- **Purpose**: Control Unity editor state
- **Actions**: 'play', 'pause', 'get_state', 'set_active_tool'

### `mcp_unityMCP_execute_menu_item`
- **Purpose**: Execute Unity menu items
- **Parameters**: menu_path (e.g., "File/Save Project")

## **CRITICAL TOOL NOTES**

### **Connection Direction**
- **FORWARD ONLY**: Always connect from exit to entry ports
- **NEVER BACKWARDS**: No reverse connections allowed

### **Node Naming**
- Nodes get auto-generated names: "NodeType_InstanceID"
- Use exact names for connections and operations

### **Validation Pattern**
- Always use `list_graph_nodes` after graph creation
- Use `check_node_exists` before operations
- Use `read_console` for error diagnosis

### **Node Creation with Metadata**
- **description**: Detailed explanation of what the node does
- **Rule File Pattern**: Navigate to category → specific node → read documentation for metadata
- **Example**: For ClickStep → ClickNodes → ClickStep → use documented description and components