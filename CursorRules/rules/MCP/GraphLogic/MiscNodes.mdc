---
description: Animation control, GameObject management, SubGraph execution, and stage progression. Contains AnimationStep, GameObjectSetActiveStep, GoToStageStep, and SubGraphStep patterns.
alwaysApply: false
---
# Misc Nodes

## 📋 Overview
Animation Step nodes handle animation control and playback in virtual lab experiments. These nodes are essential for object animations and visual effects.

## 🔧 Available Nodes

### AnimationStep
**Purpose**: Animation control and playback
**Usage**: Object animations, visual effects, click-triggered responses
**Best Practices**:
- Use for visual feedback and effects
- **MANDATORY**: When user mentions "click makes animation", implement ClickStep → AnimationStep
- Always connect AnimationStep.exit to maintain execution flow
- Use animation triggers over full clips when possible

### GameObjectSetActiveStep
**Purpose**: Show and Hide GameObjects at scene.
**Usage**: when you are requested to show or hide objects at scene.
**Best Practices**:
- use it in the context of the request.

### GoToStageStep
**Purpose**: ending the current stage and starting another stage.
**Usage**: end of a stage, skipping stages.
**Common Mistakes**: Don't use The GoToStageStep for marking the current Step as Finished instead use ProgressMapAutoNextStep, only use GoToStageStep for ending the current **STAGE** and not the Step.

## 🏗️ Common Patterns

### Animation Sequence Pattern
```
AnimationStep (Animation 1) → DelayStep → AnimationStep (Animation 2) → Continue
```

### Interactive Animation Pattern
```
UserAction → AnimationStep (Response animation) → ShowMessage (Animation complete) → Continue
```


### Visual Feedback Pattern
```
Action → AnimationStep (Visual feedback) → Continue
```

### Animation with Sound Pattern
```
AnimationStep (Visual effect) → AudioStep (Sound effect) → Continue
```

### Click ObjectA to Activate/Show Object ObjectB
```
ClickStep (ObjectA) →  GameObjectSetActiveStep (ObjectB, True) 
```
### Starting an experiment by showing objects
```
Start → GameObjectSetActiveStep (Object, True) → Continue
```

### SubGraph Modular Execution Pattern
```
SubGraphStep (Safety Tools) → Main Experiment Steps → SubGraphStep (Cleanup)

context: Use SubGraphStep for modular, reusable experiment components
```

### SubGraph Safety Protocol Pattern
```
SubGraphStep (Safety Tools) → UserAction → Continue

context: Include safety protocols as reusable SubGraph components
```

### Multi-Phase Experiment Pattern
```
SubGraphStep (Phase 1) → SubGraphStep (Phase 2) → SubGraphStep (Phase 3) → Continue

context: Break complex experiments into modular, manageable phases
```

### Sequential SubGraph Execution Pattern
```
SubGraphStep (Step_01) → SubGraphStep (Step_01.5) → SubGraphStep (Step_02) → Continue

context: Execute subgraphs in specific sequential order for experiment progression
```

### Exploration to Execution Pattern
```
Exploration_Step (User orientation) → SubGraphStep (Main experiment) → Continue

context: Start with exploration phase before executing main experiment steps
```

### Sequential SubGraph with Hints Pattern
```
SubGraphStep (Step_01) → HintStep (stepNumber: 2) → SubGraphStep (Step_02) → 
HintStep (stepNumber: 3) → SubGraphStep (Step_03) → Continue

context: Execute subgraphs sequentially with hint guidance between phases
```

### Multi-Step SubGraph Execution Pattern
```
SubGraphStep (Step_01) → SubGraphStep (Step_02) → SubGraphStep (Step_03) → 
SubGraphStep (Step_04) → SubGraphStep (Step_05) → SubGraphStep (Step_06) → Continue

context: Execute multiple subgraph steps in sequence for complex experiment phases
```

### SubGraph with Auto Progress Pattern
```
SubGraphStep (Complete phase) → ProgressMapAutoNextStep → SubGraphStep (Next phase) → Continue

context: Use automatic progress navigation between subgraph phases
```




## ⚠️ Common Mistakes

1. **Incomplete animation implementation**: When user mentions "click makes animation", implement ClickStep → AnimationStep, not just ClickStep
2. **Missing object verification**: Always verify object exists in registry
3. **Wrong animation timing**: Use appropriate animation durations
4. **Missing visual feedback**: Provide clear animation responses

## 🔍 Debugging Tips

1. **Test misc operations** one step at a time
2. **Verify object states** before and after operations
3. **Check object references** exist and are valid
4. **Use DelayStep** to slow down for debugging
5. **Monitor operations** with console logs
6. **Test sequences** end-to-end
7. **Validate results** and visual feedback
8. **Check dependencies** and prerequisites

