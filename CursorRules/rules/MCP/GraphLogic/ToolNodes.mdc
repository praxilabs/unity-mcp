---
alwaysApply: false
description: Object manipulation, visibility control, and tool-specific interactions. Contains GameObjectSetActiveStep, ToggleColliderStep, and critical sequential collider operation rules.
---

# Tool Nodes

## üìã Overview
Tool nodes handle object manipulation, visibility control, and tool-specific interactions in virtual lab experiments. These nodes are essential for object state management, interaction control, and tool presentation.

## üîß Available Nodes

### GameObjectSetActiveStep ‚≠ê RECOMMENDED
**File**: [GameObjectSetActiveStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/GameObjectSetActive.cs)
**Purpose**: Show/hide objects (better than FunctionCallStep for this)
**Best Practices**:
- Use for visibility control, not function calls
- Connect to immediate response actions
- **CRITICAL**: NOT for collider management - use ToggleColliderStep instead

### ToggleColliderStep ‚≠ê COLLIDER MANAGEMENT
**Purpose**: Enable/disable collider on a SINGLE object only
**Usage**: Interaction control, safety systems, collider management
**Best Practices**:
- **PRIMARY USE**: Collider enable/disable operations
- Use for interaction control
- Connect to safety or interaction logic
- **CRITICAL**: Only works on ONE object at a time
- **MANDATORY**: For multiple objects, use sequential execution pattern
- **KEY RULE**: When user says "enable collider" ‚Üí Use ToggleColliderStep, NOT GameObjectSetActiveStep

## ‚ö†Ô∏è CRITICAL: Sequential Collider Operations

### **MANDATORY RULE: Multiple Collider Operations**
**When disabling/enabling multiple colliders sequentially:**
- **NEVER execute in parallel** - Our graphs are NOT designed for parallel execution
- **MUST execute ONE at a time** - Sequential chain pattern required
- **ToggleColliderStep limitation**: Only works on ONE object per step
- **Key Difference**: Parallel execution ‚â† Parallel order
- **USER LANGUAGE**: "Enable collider" = ToggleColliderStep, "Show object" = GameObjectSetActiveStep

### **Correct Sequential Pattern**
```
ToggleColliderStep (Device1, disable) ‚Üí ToggleColliderStep (Device2, disable) ‚Üí 
ToggleColliderStep (Device3, disable) ‚Üí ToggleColliderStep (Device4, disable) ‚Üí Continue
```

**Note**: Each ToggleColliderStep handles ONE object only. Multiple objects require multiple sequential steps.

### **Wrong Parallel Pattern (DO NOT USE)**
```
‚ùå Multiple ToggleColliderSteps ‚Üí Single target (creates parallel execution)
‚ùå This will break your experiment flow
```

### **Why Sequential is Required**
- Unity MCP Bridge graphs execute sequentially by design
- **ToggleColliderStep limitation**: Only processes ONE object per execution
- Parallel execution requires CompositeStep pattern (not for simple collider operations)
- Sequential execution ensures predictable, controlled experiment flow

### ToolsInputfieldStep
**Purpose**: Handle input field interactions for tools
**Usage**: Data entry for tools, parameter input, tool configuration
**Best Practices**:
- Validate input data before processing
- Provide clear feedback for input validation
- Use for tool-specific data collection

### ToolsInteractionsMenuStep
**Purpose**: Control interactions menu for tools
**Usage**: Tool menu management, interaction options, tool selection
**Best Practices**:
- Manage menu state appropriately
- Provide clear navigation options
- Use for tool interaction control

## üèóÔ∏è Common Patterns

### Sequential Object Appearance
```
GameObjectSetActiveStep (hide) ‚Üí DelayStep ‚Üí GameObjectSetActiveStep (show) ‚Üí DelayStep ‚Üí ...
```

### Object State Management
```
GameObjectSetActiveStep (hide object) ‚Üí DelayStep ‚Üí GameObjectSetActiveStep (show new object) ‚Üí Continue
```

### Interaction Control Pattern
```
ToggleColliderStep (disable) ‚Üí UserAction ‚Üí ToggleColliderStep (enable) ‚Üí Continue
```

### Safety Pattern
```
IfStatementStep (Check safety) ‚Üí True: ToggleColliderStep (enable) ‚Üí Continue
                             ‚Üí False: ToggleColliderStep (disable) ‚Üí ShowMessage (Safety warning)
```

### Tool Setup Pattern
```
GameObjectSetActiveStep (hide all tools) ‚Üí DelayStep ‚Üí GameObjectSetActiveStep (show current tool) ‚Üí ShowMessage (Tool ready)
```

### Object Replacement Pattern
```
GameObjectSetActiveStep (hide old object) ‚Üí DelayStep ‚Üí GameObjectSetActiveStep (show new object) ‚Üí ShowMessage (Object replaced)
```

### Tool Input Field Pattern
```
// User enters data in tool input field
ToolsInputfieldStep (InputField) ‚Üí UserInputStep (Data) ‚Üí ValidateInput ‚Üí Continue

// Tool configuration with input
ToolsInputfieldStep (ConfigField) ‚Üí SetToolParameter ‚Üí ShowMessage (Tool configured) ‚Üí Continue
```

### Tool Menu Interaction Pattern
```
// Enable tool interactions menu
ToolsInteractionsMenuStep (EnableMenu) ‚Üí UserSelectsOption ‚Üí ExecuteToolAction ‚Üí Continue

// Tool selection from menu
ToolsInteractionsMenuStep (ShowToolMenu) ‚Üí UserSelectsTool ‚Üí GameObjectSetActiveStep (ShowSelectedTool) ‚Üí Continue
```

### Complete Tool Workflow
```
// Complete tool setup and interaction workflow
GameObjectSetActiveStep (ShowTool) ‚Üí ToolsInteractionsMenuStep (EnableMenu) ‚Üí 
UserSelectsOption ‚Üí ToolsInputfieldStep (GetParameters) ‚Üí ExecuteToolFunction ‚Üí Continue
```

### Scenario-Based Tool Management Pattern
```
IfStatementStep (IsScenarioA) ‚Üí True: GameObjectSetActiveStep (ShowScenarioATools, True) ‚Üí ExecuteScenarioA
                              ‚Üí False: GameObjectSetActiveStep (ShowScenarioBTools, True) ‚Üí ExecuteScenarioB

context: Show different tool sets based on user scenario choice
```

### Tool Completion Pattern
```
GameObjectSetActiveStep (ShowTools, True) ‚Üí ExecuteExperiment ‚Üí GameObjectSetActiveStep (HideTools, False) ‚Üí Continue

context: Show tools during experiment, hide them when complete
```

### Bench Position Collider Management Pattern
```
ToggleColliderStep (Left Bench, Enable) ‚Üí ToggleColliderStep (Centre Bench, Disable) ‚Üí ToggleColliderStep (Right Bench, Disable)

context: Enable one bench position while disabling others for focused interaction
```

### Sequential Collider Toggle Pattern
```
ToggleColliderStep (Position A, Enable) ‚Üí FunctionCallStep (SetCamera) ‚Üí ToggleColliderStep (Position B, Disable) ‚Üí Continue

context: Enable one position while disabling others for focused interaction
```

## ‚ö†Ô∏è Common Mistakes

1. **Wrong node choice**: Use GameObjectSetActiveStep for visibility, not FunctionCallStep
2. **Collider management error**: Use ToggleColliderStep for colliders, NOT GameObjectSetActiveStep
3. **Missing state management**: Always manage object states properly
4. **Incomplete tool setup**: Ensure all tool components are configured
5. **Missing input validation**: Always validate tool input data
6. **Invalid input data**: Always validate input field data before processing
7. **Missing menu state management**: Ensure tool menus are properly enabled/disabled
8. **Incomplete tool configuration**: Verify all required parameters are set

## üîç Debugging Tips

1. **Test visibility changes** one step at a time
2. **Check object states** before and after changes
3. **Use DelayStep** to slow down for debugging
4. **Monitor object visibility** with console logs
5. **Validate input field data** before processing
6. **Check menu states** for tool interactions
7. **Test tool workflows** end-to-end


