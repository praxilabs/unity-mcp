---
alwaysApply: false
description: User clicking interactions, object selection, and interactive manipulation. Contains ClickStep, RotateKnobStep, ExploreStep, and click response patterns.
---
# Click Nodes

## üìã Overview
Click nodes handle user clicking interactions in virtual lab experiments. These nodes are essential for user interface interactions, object selection, and interactive object manipulation.

## üîß Available Nodes

### ClickStep
**Purpose**: Handle object clicking interactions
**Usage**: Object selection, interactive responses
**Best Practices**:
- Connect to immediate response actions
- Use for interactive object manipulation

### RotateKnobStep
**Purpose**: Handle knob rotation interactions
**Usage**: Instrument controls, value adjustments
**Best Practices**:
- Connect to value change responses

### ExploreStep
**Purpose**: Handle object exploration interactions
**Usage**: Object inspection, detailed examination
**Best Practices**:
- Use with camera focus for detailed view
- Connect to exploration responses

### ClickUIButtonStep
**Purpose**: Automating a UI button click
**Usage**: Whenever you need to automate a button click
**Best Practices**:
- Use for automated UI interactions

## üèóÔ∏è Common Patterns

### Using ClickStep to do something
```
ClickStep (Object) ‚Üí GameObjectSetActive(hide)

or

ClickStep (Object) ‚Üí FunctionCallStep(Functionality) ‚Üí DelayStep ‚Üí GameObjectSetActive(show)

or

ClickStep (Object) ‚Üí AnimationStep(object)     Animating an object on click. (See MiscNodes.mdc for AnimationStep details)

or any pattern that comes like the previously addressed patterns.
```

### ‚ö†Ô∏è CRITICAL: Complete Requirement Implementation
**When user mentions "click makes animation" or similar, ALWAYS implement:**
```
ClickStep (Object) ‚Üí AnimationStep(object) ‚Üí Return
```
**NOT just:**
```
ClickStep (Object) ‚Üí Return
```

**Examples:**
- "Click tube makes shaking animation" = ClickStep ‚Üí AnimationStep
- "Click dropper triggers effect" = ClickStep ‚Üí AnimationStep  
- "Click button plays animation" = ClickStep ‚Üí AnimationStep

**Always verify each step includes ALL required components, not just the primary action.**

### Knob Rotation Pattern
```
RotateKnobStep (Knob) ‚Üí Action ‚Üí ShowMessage (Value changed)
```

**Note**: For FunctionCallStep patterns, see [FunctionCallNodes.mdc](mdc:.cursor/rules/MCP/GraphLogic/FunctionCallNodes.mdc). For AnimationStep details, see [MiscNodes.mdc](mdc:.cursor/rules/MCP/GraphLogic/MiscNodes.mdc)

### Object Exploration Pattern
```
ExploreStep (Object) ‚Üí FocusOnToolStep (Object) ‚Üí ShowMessage (Object details)
```

### Multiple Click Interactions
```
ClickStep A ‚Üí Action A ‚Üí Continue
ClickStep B ‚Üí Action B ‚Üí Continue
```

**Note**: For parallel execution patterns, see [ControlFlowNodes.mdc](mdc:.cursor/rules/MCP/GraphLogic/ControlFlowNodes.mdc)

### Click with Camera Focus Pattern
```
ClickStep (Bench Position) ‚Üí FunctionCallStep (SetMainBenchCamera) ‚Üí Continue

context: Click to focus camera on specific bench position
```

**Note**: For ToggleCollider patterns, see [ToolNodes.mdc](mdc:.cursor/rules/MCP/GraphLogic/ToolNodes.mdc)

## ‚ö†Ô∏è Common Mistakes

1. **Incomplete animation implementation**: When user mentions "click makes animation", implement ClickStep ‚Üí AnimationStep, not just ClickStep
2. **Missing object verification**: Always verify object exists in registry
3. **Wrong connection order**: ClickStep should connect to immediate response
4. **Missing visual feedback**: Users need confirmation of click actions

## üîç Debugging Tips

1. **Test click interactions** one step at a time
2. **Verify object states** before and after clicks
3. **Check collider states** for interaction
4. **Monitor click responses** with console logs
5. **Test click sequences** end-to-end
6. **Validate object references** in registry
7. **Check click event handling** and responses

**Note**: For DelayStep debugging patterns, see [UtilityNodes.mdc](mdc:.cursor/rules/MCP/GraphLogic/UtilityNodes.mdc)
