---
description: Progress tracking, navigation control, and stage management. Contains progress map steps, stage navigation, and experiment progression control.
alwaysApply: false
---
# Progress Map Nodes

## 📋 Overview
Progress Map nodes handle progress tracking and navigation in virtual lab experiments. These nodes are essential for experiment progress and navigation control.

## 🔧 Available Nodes

### ProgressMapAutoNextStep
**Purpose**: Automatically Handles progress tracking and navigation
**Usage**: Experiment progress, navigation control
**Best Practices**:
- Use for progress tracking scenarios
- Handle navigation appropriately
- Connect to progress responses

### ProgressMapManualNextStep
**Purpose**: Manually Handles progress tracking and navigation by giving the next step index, can be used to skip steps in the progression system.
**Usage**: Experiment progress, navigation control
**Best Practices**:
- Use for progress tracking scenarios
- Handle navigation appropriately
- Connect to progress responses

### ResetCurrentStageStep
**Purpose**: Resets the current progression of the current stage
**Usage**: Retrying Experiment, ending the current experiment and starting a new stage.
**Best Practices**:
- Use for progress tracking scenarios
- Handle navigation appropriately
- Connect to progress responses

### ResetStageByNumberStep
**Purpose**: Resets the stage progression by stage number.
**Usage**: Retrying Experiment, ending the current experiment and starting a new stage.
**Best Practices**:
- Use for progress tracking scenarios
- Handle navigation appropriately
- Connect to progress responses

## 🏗️ Common Patterns

```
normal usage: at the end of a stage or after finishing an experiment step to get to the next progression level.
```

### Sequential Step Progression Pattern
```
ProgressMapManualNextStep (stepNumber: 1) → SubGraphStep (Step_01) → 
ProgressMapManualNextStep (stepNumber: 2) → SubGraphStep (Step_01.5) → 
ProgressMapManualNextStep (stepNumber: 3) → SubGraphStep (Step_02) → Continue

context: Use stepNumber parameter to control exact progression sequence
```

### Step Completion Navigation Pattern
```
SubGraphStep (Complete step) → ProgressMapManualNextStep (_nextStepIndex: next) → Continue

context: Navigate to next step after completing current subgraph
```

### Multi-Step Experiment Flow Pattern
```
ProgressMapManualNextStep (stepNumber: 1) → SubGraphStep (Phase 1) → 
ProgressMapManualNextStep (stepNumber: 2) → SubGraphStep (Phase 2) → 
ProgressMapManualNextStep (stepNumber: 3) → SubGraphStep (Phase 3) → Continue

context: Control multi-phase experiment progression with numbered steps
```

### Auto Progress Navigation Pattern
```
SubGraphStep (Complete phase) → ProgressMapAutoNextStep → SubGraphStep (Next phase) → Continue

context: Use automatic progress navigation for seamless phase transitions
```

### Hint with Auto Progress Pattern
```
HintStep (stepNumber: current) → SubGraphStep (Complete phase) → ProgressMapAutoNextStep → Continue

context: Combine hint guidance with automatic progress navigation
```

### Sequential Auto Progress Pattern
```
SubGraphStep (Step_01) → ProgressMapAutoNextStep → SubGraphStep (Step_02) → 
ProgressMapAutoNextStep → SubGraphStep (Step_03) → ProgressMapAutoNextStep → Continue

context: Use automatic progress navigation for sequential step execution
```

## ⚠️ Common Mistakes

1. **Missing progress updates**: Always update progress appropriately
2. **Wrong navigation triggers**: Use appropriate navigation controls
3. **Incomplete progress flow**: Ensure complete progress handling

## 🔍 Debugging Tips

1. **Test progress operations** one step at a time
2. **Verify progress states** are correct
3. **Check progress references** exist
4. **Use DelayStep** to slow down for debugging
5. **Monitor progress transitions** with console logs
6. **Test progress sequences** end-to-end
7. **Validate progress results** and outputs
8. **Check progress dependencies** and prerequisites
