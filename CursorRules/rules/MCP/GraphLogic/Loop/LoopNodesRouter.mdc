---
description: Iterative operations and loop control. Contains ForLoopStep, WhileLoopStep, and loop patterns for repeated actions and data collection.
alwaysApply: false
---

<rule>
  <meta>
    <title>Loop Nodes</title>
    <description>Iterative operations and loop control. Contains ForLoopStep, WhileLoopStep, and loop patterns for repeated actions and data collection.</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>This is a ROUTING RULE ONLY - it does not provide functional tools or capabilities. This rule only routes you to the appropriate node rules for detailed implementation. For actual node implementation, refer to the specific node rules: ForLoopStep.mdc and WhileLoopStep.mdc.</description>
    </non-negotiable>
    <requirement priority="critical">
      <description>Loop nodes handle iterative operations in virtual lab experiments for repeated actions and data collection. Use `continueLoop` port for loop body and `exit` port for completion. Always provide clear exit pathways and ensure conditions can become false to prevent infinite loops.</description>
    </requirement>
    <requirement priority="critical">
      <description>Use ForLoopStep for fixed number of iterations, data collection with known count, repeated measurements, and sequential operations with known steps. Loop will always terminate after specified iterations.</description>
    </requirement>
    <requirement priority="critical">
      <description>Use WhileLoopStep for conditional repetition based on state, user interaction loops, dynamic conditions that change during execution, and unknown iteration count scenarios. Ensure condition can become false to prevent infinite loops.</description>
    </requirement>
    <requirement priority="high">
      <description>Always provide infinite loop prevention by ensuring conditions can become false (WhileLoop) or iterations are finite (ForLoop). Include loop safety measures and clear exit pathways to prevent execution from getting stuck.</description>
    </requirement>
    <requirement priority="medium">
      <description>Use descriptive iteration parameters and condition names in loop nodes to make the logic clear and maintainable. Parameter names should clearly indicate the iteration count or condition being evaluated.</description>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER create loops without proper exit pathways. NEVER create WhileLoopStep with conditions that cannot become false. NEVER create ForLoopStep with infinite or undefined iteration counts. Always ensure loop termination is guaranteed.</description>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for loop nodes">
    Loop nodes are essential for iterative operations and repeated actions in virtual lab experiments. Always ensure proper port connections, loop safety, and termination guarantees. Use ForLoopStep for fixed iterations and WhileLoopStep for conditional repetition. Include clear exit pathways and prevent infinite loops.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Loop/ForLoopStep.mdc" reason="Fixed iteration control">ForLoopStep implementation patterns</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Loop/WhileLoopStep.mdc" reason="Conditional iteration control">WhileLoopStep implementation patterns</reference>
  </references>
</rule>