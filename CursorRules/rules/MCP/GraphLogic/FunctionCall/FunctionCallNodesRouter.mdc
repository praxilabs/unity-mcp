---
description: Method execution on GameObjects and system interactions. Contains FunctionCallStep variants and patterns for component method execution.
alwaysApply: false
---

<rule>
  <meta>
    <title>Function Call Nodes</title>
    <description>Method execution on GameObjects and system interactions. Contains FunctionCallStep variants and patterns for component method execution.</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>This is a ROUTING RULE ONLY - it does not provide functional tools or capabilities. This rule only routes you to the appropriate node rules for detailed implementation. For actual node implementation, refer to the specific node rules: FunctionCallStep.mdc, FunctionCallGlobalStep.mdc, FunctionCallCoroutineStep.mdc, and FunctionCallCoroutineGlobalStep.mdc.</description>
    </non-negotiable>
    <requirement priority="critical">
      <description>All function call nodes inherit from FunctionCallBase for reflection-based method invocation. Scene object methods require target objects to be registered in the registry data created before experiment creation, global methods use reflection access, methods must be public to be accessible, and use SerializableParameter for method parameters.</description>
    </requirement>
    <requirement priority="critical">
      <description>Use FunctionCallStep for logic that doesn't exist as an actual node in the system and click-to-function patterns. Target specific scene objects with synchronous operations, not global/static methods.</description>
    </requirement>
    <requirement priority="critical">
      <description>Use FunctionCallGlobalStep for global/static method calls and system-wide functions. Methods don't target specific scene objects and affect the entire system. Use for singleton service methods and static functions.</description>
    </requirement>
    <requirement priority="high">
      <description>Use FunctionCallCoroutineStep for methods that return IEnumerator on scene objects. Methods run asynchronously without blocking execution and target specific scene objects for long-running operations.</description>
    </requirement>
    <requirement priority="high">
      <description>Use FunctionCallCoroutineGlobalStep for global coroutine calls and system-wide asynchronous operations. Methods must return IEnumerator and affect the entire system without targeting specific scene objects.</description>
    </requirement>
    <requirement priority="critical">
      <description>For liquid pouring operations, use the critical pattern: FunctionCallStep(StartPouring()) → FunctionCallStep(FillLiquid()) → FunctionCallStep(StopPouring()). For color change during pouring, add FunctionCallStep(ChangeColor()) between FillLiquid() and StopPouring().</description>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER use FunctionCallStep for global/static methods. NEVER use FunctionCallGlobalStep for scene object methods. NEVER use coroutine steps for synchronous methods. Always match the step type to the method type and scope.</description>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for function call nodes">
    Function call nodes are essential for executing methods on GameObjects and system interactions in virtual lab experiments. Always ensure proper object registration, method visibility, and parameter types. Use the appropriate step type based on method scope (scene object vs global) and execution type (synchronous vs asynchronous). Follow the critical liquid pouring pattern for liquid operations.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/FunctionCall/FunctionCallStep.mdc" reason="Scene object method execution">FunctionCallStep implementation patterns</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/FunctionCall/FunctionCallGlobalStep.mdc" reason="Global method execution">FunctionCallGlobalStep implementation patterns</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/FunctionCall/FunctionCallCoroutineStep.mdc" reason="Asynchronous scene object execution">FunctionCallCoroutineStep implementation patterns</reference>
  </references>
</rule>