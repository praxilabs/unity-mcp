---
description: This file contains the logic and common sense and how to deal with a request containing attaching and detaching logic.
alwaysApply: false
---
# Attach-Detach Nodes

## 📋 Overview
Attach-Detach nodes handle object attachment and detachment operations in virtual lab experiments. These nodes are essential for equipment assembly, component connections, and interactive object manipulation.

## 🔧 Available Nodes

### AttachStep
**Purpose**: Handle object attachment operations
**Usage**: Equipment assembly, component connections
**Best Practices**:
- Always verify both objects exist in registry
- Use with visual feedback for attachment confirmation
- Connect to immediate response actions

### DetachStep
**Purpose**: Handle object detachment operations
**Usage**: Equipment disassembly, component removal
**Best Practices**:
- Always verify object exists in registry
- Use with visual feedback for detachment confirmation
- Connect to immediate response actions

## 🏗️ Common Patterns

### Attaching and Detaching an Object
```
AttachStep → ShowMessage      that means that the message won't show up except for when object 1 is attached to object 2.

DetachStep → ShowMessage      that means that the message won't show up except for when object 1 is detached from object 2.

used in the logic that specify attaching an object or detaching it in order to continue the sequence.
```

### Equipment Assembly Flow
```
AttachStep (Component A to Base) → DelayStep → AttachStep (Component B to Base) → ShowMessage (Assembly Complete)

context: Attaching a Battery and another Battery to a remote control.

```

### Component Removal Flow
```
DetachStep (Component from Base) → GameObjectSetActiveStep (hide component) → ShowMessage (Component Removed)

context: removing 
```

### Conditional Attachment
```
IfStatementStep (Check condition) → True: AttachStep → Continue
                                → False: ShowMessage (Cannot attach)
```


## 🔍 Debugging Tips

1. **Test attachment/detachment** one step at a time
2. **Check object states** before and after operations
3. **Use DelayStep** to slow down for debugging
