---
description: Animation control, SubGraph execution, and stage progression. Contains AnimationStep, GoToStageStep, and SubGraphStep patterns.
alwaysApply: false
---

<rule>
  <meta>
    <title>Misc Nodes</title>
    <description>Animation control, SubGraph execution, and stage progression. Contains AnimationStep, GoToStageStep, and SubGraphStep patterns.</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>This is a ROUTING RULE ONLY - it does not provide functional tools or capabilities. This rule only routes you to the appropriate node rules for detailed implementation. For actual node implementation, refer to the specific node rules: AnimationStep.mdc, GoToStageStep.mdc, and SubGraphStep.mdc.</description>
    </non-negotiable>
    <requirement priority="critical">
      <description>Misc nodes handle various operations that don't fit into other categories, including animation control, stage progression, and subgraph execution in virtual lab experiments. Use AnimationStep for object animations and visual effects, GoToStageStep for stage transitions, and SubGraphStep for reusable experiment components.</description>
    </requirement>
    <requirement priority="critical">
      <description>Use AnimationStep for object animations and visual effects, click-triggered responses, and visual feedback for user actions. Target object must have Animator component and animation clip/state must exist on the Animator.</description>
    </requirement>
    <requirement priority="critical">
      <description>Use GoToStageStep for stage transitions within experiments, skipping stages based on conditions, and ending current stage and starting another. Target stage must exist and be properly configured in Experiment Data.</description>
    </requirement>
    <requirement priority="high">
      <description>Use SubGraphStep for modular design and reusable experiment components. SubGraphStep allows executing other graphs as subroutines for modular experiment design and reusable procedures.</description>
    </requirement>
    <requirement priority="medium">
      <description>Use descriptive animation names, stage identifiers, and subgraph names in misc nodes to make the logic clear and maintainable. Names should clearly indicate the purpose and target of the operation.</description>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER use GoToStageStep for step progression within the same stage. NEVER use AnimationStep for stage transitions. NEVER use misc nodes for operations that have dedicated node types in other categories. Always use the appropriate node type for the specific operation.</description>
    </non-negotiable>
  </requirements>
  <context description="Additional considerations for misc nodes">
    Misc nodes handle various operations that don't fit into other categories. Always ensure proper prerequisites are met, use appropriate node types for specific operations, and maintain clear naming conventions. Use dedicated node types from other categories when available rather than misc nodes.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Misc/AnimationStep.mdc" reason="Animation control">AnimationStep implementation patterns</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Misc/GoToStageStep.mdc" reason="Stage progression">GoToStageStep implementation patterns</reference>
  </references>
</rule>