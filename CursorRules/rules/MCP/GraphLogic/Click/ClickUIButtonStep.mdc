---
alwaysApply: false
description: Pause graph execution until user clicks UI button for interface interactions
---

# UIClickStep Node

## üìã Overview
UIClickStep is a **WAIT-FOR-USER-INPUT** node that waits for user to click a UI button before allowing execution to continue. **UIClickStep does NOTHING by itself** - it only enables the execution path. The actual logic/functionality happens in the NEXT step(s) after the click.

## üîß Node Details

**Node Type**: UIClickStep
**Purpose**: Wait for user to click UI button, then allow execution to continue to next step
**Usage**: UI interaction gate, execution flow enabler for UI buttons
**‚ö†Ô∏è CRITICAL**: UIClickStep alone does NOTHING - the next step contains the actual logic

## üìã Basic Prerequisites

1. **UI Button**: Required UI button element in the scene
2. **Button Script**: Required button script to handle click events
3. **UI Canvas**: Required UI canvas containing the button

## üìù Parameters

- **Target Button**: The UI button to click

## üèóÔ∏è Common Patterns

### Basic UI Button Click
```
UIClickStep (Button) ‚Üí ShowMessage (Button clicked)
```

### Button Click with Action
```
UIClickStep (Button) ‚Üí FunctionCallStep (Action) ‚Üí ShowMessage (Action performed)
```

### Button Click with State Change
```
UIClickStep (Button) ‚Üí GameObjectSetActive (Toggle state) ‚Üí ShowMessage (State changed)
```

### Button Click with Animation
```
UIClickStep (Button) ‚Üí AnimationStep (Button) ‚Üí ShowMessage (Button activated)
```

### Scenario Choices Pattern
```
GameObjectSetActiveStep(Activate ScenarioChoiceUICanvas) ‚Üí UIClickStep(Confirm Scenario Button) ‚Üí FunctionCallStep(ScenarioChoiceUI IsScenarioA()) ‚Üí IfStatementStep
    True: FunctionCallStep(ScenarioA Main Cam) ‚Üí ScenarioA_Subgraph
    False: FunctionCallStep(ScenarioB Main Cam) ‚Üí ScenarioB_SubGraph
```

## üö® Critical UIClickStep Rules
- **UIClickStep = Gate**: UIClickStep waits for user input, then enables execution flow to continue
- **No Standalone Logic**: UIClickStep alone is USELESS - it does nothing by itself
- **Next Step = Actual Logic**: The step AFTER UIClickStep contains the real functionality
- **Always Connect**: UIClickStep MUST connect to the step that executes the desired logic
- **Branching Behavior**: In OR/branching scenarios, whichever UIClickStep gets clicked first determines the execution path

## ‚ö†Ô∏è Common Mistakes

1. **Using UIClickStep alone**: UIClickStep without next steps is completely useless
2. **Expecting UIClickStep to do logic**: UIClickStep does NOTHING - the next step does the actual work
3. **Missing the actual logic step**: Forgetting to add FunctionCallStep/other logic after UIClickStep
4. **Wrong function reference**: "Click OK to confirm" needs appropriate confirmation function call after UIClickStep
5. **Missing button verification**: Always verify UI button exists and is accessible
6. **Invalid UI references**: Verify target buttons are valid and have required scripts

## üéØ Best Practices

1. **Always connect to logic step**: Every UIClickStep MUST connect to a step that does actual work
2. **Identify the required controller**: "Click OK to confirm" ‚Üí find confirmation controller/method
3. **Use proper function calls**: Most UI clicks should connect to FunctionCallStep with appropriate method
4. **Provide visual feedback**: Use next steps to show the result of the button click
5. **Verify button existence**: Always verify UI buttons exist and are accessible before setup
6. **Test button sequences**: Thoroughly test that clicking buttons triggers the expected functionality
7. **Handle edge cases**: Consider what happens if required UI controllers/methods don't exist

## üìù Implementation Checklist

When implementing "Click UI Button X to do Y":
1. ‚úÖ Create UIClickStep targeting UI button X
2. ‚úÖ Identify controller that can do Y (e.g., UIController.DoY method)  
3. ‚úÖ Connect UIClickStep ‚Üí FunctionCallStep(UIController.DoY)
4. ‚úÖ Add any visual feedback steps after the function call
5. ‚úÖ Test that clicking button X actually executes Y functionality