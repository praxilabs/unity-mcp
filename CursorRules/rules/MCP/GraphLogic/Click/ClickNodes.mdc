---
alwaysApply: false
description: User clicking interactions, object selection, and interactive manipulation. Contains ClickStep, RotateKnobStep, ExploreStep, and click response patterns.
---

# Click Nodes

## üìã Overview
Click nodes handle user clicking interactions in virtual lab experiments. Essential for user interface interactions, object selection, and interactive object manipulation.

## üîß Available Nodes

### ClickStep
**Rule File**: [ClickStep.mdc](mdc:.cursor/rules/MCP/GraphLogic/Click/ClickStep.mdc)
**Purpose**: Wait for user to click target object, then enable execution flow
**Usage**: Object interaction gate, world GameObject clicking
**‚ö†Ô∏è Critical**: ClickStep alone does NOTHING - next step contains the actual logic

### RotateKnobStep
**Rule File**: [RotateKnobStep.mdc](mdc:.cursor/rules/MCP/GraphLogic/Click/RotateKnobStep.mdc)
**Purpose**: Handle knob rotation interactions
**Usage**: Instrument controls, value adjustments

### ExploreStep
**Rule File**: [ExploreStep.mdc](mdc:.cursor/rules/MCP/GraphLogic/Click/ExploreStep.mdc)
**Purpose**: Handle object exploration interactions
**Usage**: Object inspection, detailed examination

### UIClickStep
**Rule File**: [ClickUIButtonStep.mdc](mdc:.cursor/rules/MCP/GraphLogic/Click/ClickUIButtonStep.mdc)
**Purpose**: Wait for user to click UI button, then enable execution flow
**Usage**: UI button interaction gate, interface button clicking
**‚ö†Ô∏è Critical**: UIClickStep alone does NOTHING - next step contains the actual logic

## üö® Critical Click Rules
- **Click Nodes = Gates**: Click nodes wait for user input, then enable execution flow to continue
- **No Standalone Logic**: Click nodes alone are USELESS - they do nothing by themselves
- **Next Step = Actual Logic**: The step AFTER click nodes contains the real functionality
- **Mandatory Pattern**: ClickStep/UIClickStep ‚Üí FunctionCallStep/AnimationStep/etc. ‚Üí Continue
- **Branching Behavior**: In OR scenarios, whichever click happens first determines the execution path

## üéØ Button Type Identification
**Identify button type through context:**

### Use ClickStep for:
- **World GameObject buttons**: "Click on the On button on the balance/scale"
- **Physical instrument controls**: "Click on the tare button", "Click on the power button"
- **3D object interactions**: "Click on the bottle", "Click on the hammer"

### Use UIClickStep for:
- **UI dialog buttons**: "Click Yes/No button", "Click OK/Cancel"
- **Menu interface buttons**: "Click Start button", "Click Next button"
- **Message panel buttons**: "Click Confirm button", "Click Continue button"

**Context Examples:**
- ‚úÖ "Click on the On button on the scale" ‚Üí **ClickStep** (world GameObject)
- ‚úÖ "Click Yes button" ‚Üí **UIClickStep** (UI dialog)
- ‚úÖ "Click on the tare button" ‚Üí **ClickStep** (instrument control)
- ‚úÖ "Click OK button" ‚Üí **UIClickStep** (UI message)

## üìù Complete Implementation Examples

### Example 1: "Click to turn off TV" (Device Functionality)
```
‚ùå WRONG: ClickStep(TV Remote) ‚Üí Continue
‚úÖ CORRECT: ClickStep(TV Remote) ‚Üí FunctionCallStep(TVController.TurnOff) ‚Üí Continue
```

### Example 2: "Click tare button to zero the scale" (Device Functionality)
```
‚ùå WRONG: ClickStep(Tare Button) ‚Üí Continue
‚úÖ CORRECT: ClickStep(Tare Button) ‚Üí FunctionCallStep(ScaleController.TareZero) ‚Üí Continue
```

### Example 3: "Click bottle to open it" (Motion/Physical Action)
```
‚ùå WRONG: ClickStep(Bottle) ‚Üí Continue
‚úÖ CORRECT: ClickStep(Bottle) ‚Üí AnimationStep(Bottle Opening Animation) ‚Üí Continue
```

### Example 4: "Click hammer to crush tablet" (Motion/Physical Action)
```
‚ùå WRONG: ClickStep(Hammer) ‚Üí Continue
‚úÖ CORRECT: ClickStep(Hammer) ‚Üí AnimationStep(Crushing Animation) ‚Üí Continue
```

### Example 5: "Click Yes to confirm deletion" (UI Functionality)
```
‚ùå WRONG: UIClickStep(Yes Button) ‚Üí Continue
‚úÖ CORRECT: UIClickStep(Yes Button) ‚Üí FunctionCallStep(DataManager.DeleteItem) ‚Üí SideMessageStep(Deleted successfully)
```

### Example 6: Branching scenario with OR Step
```
OR Step
‚îú‚îÄ‚îÄ ClickStep(Option A Button) ‚Üí FunctionCallStep(ExecuteOptionA) ‚Üí Continue
‚îî‚îÄ‚îÄ ClickStep(Option B Button) ‚Üí FunctionCallStep(ExecuteOptionB) ‚Üí Continue
```
**Note**: Whichever button gets clicked first determines which branch executes.

## üéØ Action Type Decision Guide

**Use AnimationStep for Motion/Physical Actions:**
- Opening/closing (bottles, doors, drawers, containers)
- Moving objects (dragging, lifting, placing)
- Physical transformations (crushing, breaking, mixing)
- Any visible motion or physical change

**Use FunctionCallStep for Device/System Functionality:**
- Device controls (power on/off, tare/zero, mode changes)
- System functions (save, load, calculate, process)  
- Data operations (record, measure, analyze)
- Logical state changes (enable/disable, activate/deactivate)

**Examples:**
- ‚úÖ "Click bottle to open" ‚Üí AnimationStep (physical motion)
- ‚úÖ "Click tare to zero scale" ‚Üí FunctionCallStep (device function)
- ‚úÖ "Click hammer to crush" ‚Üí AnimationStep (physical motion)
- ‚úÖ "Click power to turn on" ‚Üí FunctionCallStep (device function)