---
description: Pause graph execution until user clicks target object for interaction control
alwaysApply: false
---

<rule>
  <meta>
    <title>ClickStep</title>
    <description>Pause graph execution until user clicks target object for interaction control</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-xnode-node">Triggered when creating a new ClickStep Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <setup-instructions priority="critical">
      <description>ClickStep pauses graph execution until user clicks target object for interaction control in virtual lab experiments. It acts as a gate that requires follow-up logic to define what happens after the click.</description>
      <step-list>
        <step>Add Collider to [TargetObject] object for click detection</step>
        <step>Add ClickableTool Script to [TargetObject] object</step>
        <step>Add Hologram component to [TargetObject] object (optional visual indicator)</step>
        <step>Configure [TargetObject] parameter in ClickStep node</step>
        <step>Connect ClickStep to appropriate follow-up logic (AnimationStep, FunctionCallStep, etc.)</step>
      </step-list>
    </setup-instructions>
    <requirement priority="critical">
      <description>ClickStep acts as a gate that pauses execution until user interaction. It requires follow-up logic to define what happens after the click. The ClickStep itself only handles the interaction control - all actual functionality must be implemented through subsequent nodes.</description>
      <examples>
        <example title="Click Step Logic Requirements">
          <correct-example title="Proper click step with logic" conditions="Need user interaction with follow-up action" expected-result="User interaction followed by appropriate action" correctness-criteria="Includes logic after click step">ClickStep (Microscope Power Button) → FunctionCallStep(MicroscopeController.PowerOn) → Continue</correct-example>
          <incorrect-example title="Click step without logic" conditions="Need user interaction with follow-up action" expected-result="User interaction followed by appropriate action" incorrectness-criteria="Missing logic after click step">ClickStep (Microscope Power Button) → Continue // Missing logic</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Choose appropriate follow-up actions after click: Use AnimationStep for visual changes, FunctionCallStep for device functionality, or both if the device has both visual transformation and functional logic. For example, clicking an On button may require both FunctionCallStep to turn on the device controller and AnimationStep to show working animation.</description>
      <examples>
        <example title="Action Type Selection">
          <correct-example title="Proper action type for visual changes" conditions="Need visual change after click" expected-result="Correct action type used" correctness-criteria="Uses AnimationStep for visual changes">ClickStep (Reagent Bottle) → AnimationStep(Bottle Opening Animation) → Continue</correct-example>
          <incorrect-example title="Wrong action type for visual changes" conditions="Need visual change after click" expected-result="Correct action type used" incorrectness-criteria="Uses wrong action type">ClickStep (Reagent Bottle) → FunctionCallStep(OpenBottle) // Should use AnimationStep</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use ClickStep for 3D world objects, physical buttons on 3D instrument models, and interactive GameObjects. For UI Canvas elements, use ClickUIButtonStep instead.</description>
      <examples>
        <example title="3D Object Usage">
          <correct-example title="Proper 3D object usage" conditions="Need to click physical equipment" expected-result="Correct click step type selected" correctness-criteria="Uses ClickStep for 3D objects">ClickStep for laboratory equipment, instruments, physical buttons on 3D models</correct-example>
          <incorrect-example title="Wrong object type usage" conditions="Need to click UI button" expected-result="Correct click step type selected" incorrectness-criteria="Uses wrong click step type">ClickStep for Unity UI Canvas buttons // Should use ClickUIButtonStep</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Specify Target Object as the primary parameter. Assess scope by choosing between existing nodes (AnimationStep, etc.) or FunctionCallStep for custom logic. If using FunctionCallStep, indicate in Info step that user needs to create the required script.</description>
      <examples>
        <example title="Parameter Specification and Scope Assessment">
          <correct-example title="Proper parameter specification" conditions="Configuring ClickStep parameters" expected-result="Correctly configured click interaction" correctness-criteria="Specifies target object clearly">Target Object: Specific 3D object to be clicked</correct-example>
          <incorrect-example title="Missing scope assessment" conditions="Configuring ClickStep parameters" expected-result="Correctly configured click interaction" incorrectness-criteria="Missing complexity assessment">ClickStep without considering what happens after click // Missing scope assessment</incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <references>
    <reference as="dependency" href=".cursor/rules/rule.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href=".cursor/rules/MCP/GraphLogic/Click/ClickNodes.mdc" reason="Click operations">General click operation patterns</reference>
  </references>
</rule>
