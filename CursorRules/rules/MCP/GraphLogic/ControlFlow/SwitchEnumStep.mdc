---
alwaysApply: false
description: Multi-way branching node with enum values for state machines and menu systems
---

# SwitchEnumStep

## Overview
SwitchEnumStep provides multi-way branching with predefined enum values for state machines, menu systems, and complex decision trees in virtual lab experiments.

## Node Details

**File**: [SwitchEnumStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/SwitchEnumStep.cs)
**Purpose**: Multi-way branching with enum values
**Usage**: State machines, menu systems with predefined enum values

## Common Patterns

### Enum-based State Machine Pattern
```
SwitchEnumStep (Current state enum) → StateA: Actions → SwitchEnumStep (Next state)
                                   → StateB: Actions → SwitchEnumStep (Next state)
                                   → StateC: Actions → SwitchEnumStep (Next state)
```

## Critical SwitchEnumStep Rules
- **Enum Values Only**: Use only predefined enum values as cases
- **Handle All Enum Cases**: Ensure all possible enum values are covered
- **Default Case**: Always provide a default case for unexpected enum values

## Common Mistakes

1. **Incomplete enum cases**: Handle all possible enum values in SwitchEnumStep
2. **Missing default case**: Always provide a default case for unexpected enum values
3. **Wrong enum case connections**: Verify enum case port names and connections
4. **Unclear enum logic**: Use clear, descriptive enum case names
5. **Using for non-enum values**: Use SwitchStep for regular string/number values

## Best Practices

1. **Use for enum-based scenarios** with predefined values
2. **Handle all possible enum cases** with appropriate responses
3. **Connect to appropriate responses** for each enum case
4. **Provide clear enum case descriptions** for maintainability
5. **Use for state machines** with enum-based states
6. **Ensure all enum cases are properly connected** to avoid execution issues