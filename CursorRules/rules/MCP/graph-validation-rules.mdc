---
alwaysApply: false
description: Post-creation validation rules and mandatory validation workflows for Unity MCP graphs
---

# Graph Validation Rules

## üö® MANDATORY POST-CREATION VALIDATION ‚ö†Ô∏è

### **CRITICAL: After Creating ANY Graph**

**You MUST perform these validation steps before considering the graph complete:**

1. **Run `list_graph_nodes`** to get complete node list
2. **Check for disconnected nodes** - any node without proper connections
3. **Remove orphaned nodes** that aren't part of execution flow
4. **Verify all nodes have both input AND output connections** (except first/last)
5. **Confirm execution flow is complete** from entry to exit

### **MANDATORY VALIDATION LOOP RULE** ‚ö†Ô∏è
**After ANY correction, you MUST re-validate and continue the fix‚Üívalidate cycle until 100% error-free.**

**Example Flow:**
1. Create graph ‚Üí Validate ‚Üí Find error
2. Fix error ‚Üí **RE-VALIDATE** ‚Üí Find another error
3. Fix error ‚Üí **RE-VALIDATE** ‚Üí Find another error
4. Continue until validation shows 0 errors
5. **NEVER stop at first fix - always complete the full validation cycle**

### **Validation Commands**
```bash
# Check graph structure
mcp_unityMCP_list_graph_nodes "path/to/your/graph.asset"

# Look for nodes with 0 connections or missing ports
# Remove any disconnected nodes immediately
```

## üîç VALIDATION CHECKLIST

### **Pre-Validation (Before Running)**
- ‚úÖ Graph has exactly one first step set
- ‚úÖ All nodes are connected to the execution flow
- ‚úÖ No floating/disconnected nodes exist
- ‚úÖ Single unified execution path from entry
- ‚úÖ All routes eventually lead to completion

### **Post-Creation Validation (MANDATORY)**
- ‚úÖ Run `list_graph_nodes` to verify structure
- ‚úÖ Check for orphaned/disconnected nodes
- ‚úÖ Remove any nodes not part of execution flow
- ‚úÖ Verify all connections are properly established
- ‚úÖ Confirm execution path is complete

## ‚ö†Ô∏è COMMON VALIDATION FAILURES

### **Disconnected Nodes**
- **Problem**: Nodes created but never connected to execution flow
- **Solution**: Remove immediately or connect properly
- **Example**: `Go To Stage Step` node with no connections

### **Orphaned Nodes**
- **Problem**: Nodes that serve no purpose in the experiment
- **Solution**: Delete if not needed, connect if needed
- **Impact**: Can cause graph execution to fail

### **Incomplete Connections**
- **Problem**: Nodes with missing input or output connections
- **Solution**: Complete all required connections
- **Impact**: Execution will stop at incomplete nodes

## üõ†Ô∏è VALIDATION WORKFLOW

### **Step 1: Create Graph Structure**
- Build your graph with all required nodes
- Connect nodes in proper execution order
- Set first step node

### **Step 2: Run Validation**
```bash
mcp_unityMCP_list_graph_nodes "your_graph_path.asset"
```

### **Step 3: Analyze Results**
- Check total node count
- Verify all nodes have proper connections
- Look for any disconnected nodes

### **Step 4: Clean Up**
- Remove orphaned nodes
- Fix incomplete connections
- **MANDATORY**: Re-run validation after EACH fix
- Continue fix‚Üívalidate cycle until 100% clean

### **Step 5: Final Verification**
- Confirm execution flow is complete
- Test graph execution if possible
- Document any special requirements

## üéØ VALIDATION EXAMPLES

### **Good Graph Structure**
```
Node A (First) ‚Üí Node B ‚Üí Node C ‚Üí Node D (End)
All nodes connected, clear execution path
```

### **Bad Graph Structure**
```
Node A (First) ‚Üí Node B ‚Üí Node C
Node X (disconnected, orphaned)
Missing connection to end
```

### **Validation Output Analysis**
```bash
# Good output - all nodes connected
"Found 4 StepNodes in graph"
"All nodes have proper input/output connections"

# Bad output - disconnected nodes
"Found 5 StepNodes in graph"  # But only 4 should exist
"Node X has 0 connections"    # Orphaned node detected
```

## üö® CRITICAL REMINDER

**NEVER consider a graph complete without running post-creation validation.**

**FAILURE TO VALIDATE WILL RESULT IN BROKEN EXPERIMENTS**

**ALWAYS use `list_graph_nodes` after graph creation to identify and fix issues.**

## üìã VALIDATION COMMANDS REFERENCE

### **Essential Validation Commands**
- `list_graph_nodes` - Check graph structure and connections
- `set_node_as_first_step` - Establish entry point
- `delete_xnode_node` - Remove orphaned nodes
- `connect_nodes_by_name` - Fix missing connections

### **Validation Best Practices**
1. **Always validate after creation**
2. **Fix one issue at a time**
3. **Re-validate after each fix**
4. **Continue until 100% clean**
5. **Document any special requirements**

