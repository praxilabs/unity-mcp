---
alwaysApply: true
---
# Graph Validation Rules

## MANDATORY POST-CREATION VALIDATION

### **CRITICAL: After Creating ANY Graph**

**You MUST perform these validation steps before considering the graph complete:**

1. **Run `mcp_unityMCP_list_graph_nodes`** to get complete node list
2. **Check for orphaned nodes** - any node without proper connections
3. **Remove orphaned nodes** that aren't part of execution flow
4. **Verify all nodes have both input AND output connections** (except first/last)
5. **Confirm execution flow is complete** from entry to exit

### **MANDATORY VALIDATION LOOP RULE**
**After ANY correction, you MUST re-validate and continue the fix→validate cycle until 100% error-free.**

**Example Flow:**
1. Create graph → Validate → Find error
2. Fix error → **RE-VALIDATE** → Find another error
3. Fix error → **RE-VALIDATE** → Find another error
4. Continue until validation shows 0 errors
5. **NEVER stop at first fix - always complete the full validation cycle**

## COMMON VALIDATION FAILURES

### **Orphaned Nodes**
- **Problem**: Nodes created but never connected to execution flow
- **Solution**: Remove immediately using `mcp_unityMCP_delete_xnode_node`
- **Example**: `Go To Stage Step` node with no connections
- **Impact**: Can cause graph execution to fail

### **Incomplete Connections**
- **Problem**: Nodes with missing input or output connections
- **Solution**: Complete all required connections using `mcp_unityMCP_connect_nodes_by_name`
- **Impact**: Execution will stop at incomplete nodes

## VALIDATION WORKFLOW

### **Step 1: Run Validation**
```bash
mcp_unityMCP_list_graph_nodes "your_graph_path.asset"
```

### **Step 2: Analyze Results**
- Check total node count matches expected
- Verify all nodes have proper connections
- Look for any orphaned nodes

### **Step 3: Clean Up**
- Remove orphaned nodes using `mcp_unityMCP_delete_xnode_node`
- Fix incomplete connections using `mcp_unityMCP_connect_nodes_by_name`
- **MANDATORY**: Re-run validation after EACH fix
- Continue fix→validate cycle until 100% clean

### **Step 4: Final Verification**
- Confirm execution flow is complete
- Test graph execution if possible

## VALIDATION EXAMPLES

### **Good Graph Structure**
```
Node A (First) → Node B → Node C → Node D (End)
All nodes connected, clear execution path
```

### **Bad Graph Structure**
```
Node A (First) → Node B → Node C
Node X (orphaned, no connections)
Missing connection to end
```

### **Validation Output Analysis**
```bash
# Good output - all nodes connected
"Found 4 StepNodes in graph"
"All nodes have proper input/output connections"

# Bad output - orphaned nodes
"Found 5 StepNodes in graph"  # But only 4 should exist
"Node X has 0 connections"    # Orphaned node detected
```

## CRITICAL REMINDER

**NEVER consider a graph complete without running post-creation validation.**

**FAILURE TO VALIDATE WILL RESULT IN BROKEN EXPERIMENTS**

**ALWAYS use `mcp_unityMCP_list_graph_nodes` after graph creation to identify and fix issues.**

## VALIDATION COMMANDS REFERENCE

### **Essential Validation Commands**
- `mcp_unityMCP_list_graph_nodes` - Check graph structure and connections
- `mcp_unityMCP_set_node_as_first_step` - Establish entry point
- `mcp_unityMCP_delete_xnode_node` - Remove orphaned nodes
- `mcp_unityMCP_connect_nodes_by_name` - Fix missing connections

### **Validation Best Practices**
1. **Always validate after creation**
2. **Fix one issue at a time**
3. **Re-validate after each fix**
4. **Continue until 100% clean**
5. **Document any special requirements**

