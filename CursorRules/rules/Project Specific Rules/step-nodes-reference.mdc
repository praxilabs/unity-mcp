---
description: Comprehensive reference for all XNode step nodes with usage patterns and examples
---

# XNode Step Nodes - Complete Reference Guide

## üéØ Node Selection Decision Tree

### User Interaction Required?
- **ClickStep**: Object clicking ‚Üí `_targetName` (RegistryItem)
- **RotateKnobStep**: Knob rotation ‚Üí `_targetName` (RegistryItem)
- **AttachStep**: Object attachment ‚Üí `_followerName`, `_receiverName` (RegistryItem)
- **DetachStep**: Object detachment ‚Üí `_targetName` (RegistryItem)
- **ExploreStep**: Object exploration ‚Üí `_targetName` (RegistryItem)

### Automatic Execution?
- **GameObjectSetActiveStep**: Show/hide objects ‚Üí `_newToolName` (RegistryItem), `_isActive` (bool)
- **FunctionCallStep**: Method calls ‚Üí `_calledObjectName` (RegistryItem), `selectedComponent`, `selectedFunction`
- **DelayStep**: Time delays ‚Üí `timeToWait` (float)
- **SubGraphStep**: Execute sub-graphs ‚Üí Graph reference
- **HintStep**: Display hints ‚Üí `stepNumber` (int)

### Control Flow Logic?
- **CompositeStep**: Parallel execution ‚Üí Routes back to entry
- **IfStatementStep**: Boolean branching ‚Üí True/False outputs
- **SwitchStep**: Multi-way branching ‚Üí Multiple case outputs
- **ForLoopStep**: Fixed iterations ‚Üí `iterations` (int)
- **WhileLoopStep**: Conditional loops ‚Üí Condition evaluation

## üìã Action-Executed Steps (User Interaction)

### ClickStep
**File**: [ClickStep.cs](mdc:Assets/Scripts/System/xNode/Steps/ActionExecuted/ClickStep.cs)
**Purpose**: Handle object clicking interactions
**Key Parameters**:
- `_targetName` (RegistryItem): Object to click
**Usage Pattern**:
```json
{"prefabName": "Tools", "childName": "Cube (1)"}
```
**Best Practices**:
- Always verify object exists in registry
- Use with flashing tools for visual feedback
- Connect to immediate response actions

### RotateKnobStep
**Purpose**: Handle knob rotation interactions
**Key Parameters**:
- `_targetName` (RegistryItem): Knob object to rotate
**Usage**: Instrument controls, value adjustments

### AttachStep / DetachStep
**Purpose**: Handle object attachment/detachment
**Key Parameters**:
- AttachStep: `_followerName`, `_receiverName` (RegistryItem)
- DetachStep: `_targetName` (RegistryItem)
**Usage**: Equipment assembly, component connections

## üîÑ Self-Executed Steps (Automatic)

### GameObjectSetActiveStep ‚≠ê RECOMMENDED
**File**: [GameObjectSetActiveStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/GameObjectSetActive.cs)
**Purpose**: Show/hide objects (better than FunctionCallStep for this)
**Key Parameters**:
- `_newToolName` (RegistryItem): Target object
- `_isActive` (bool): Visibility state
**Usage Pattern**:
```csharp
// Hide object
_newToolName: {"prefabName": "Tools", "childName": "Cube (1)"}
_isActive: false

// Show object  
_newToolName: {"prefabName": "Tools", "childName": "Cube (1)"}
_isActive: true
```

### FunctionCallStep
**File**: [FunctionCallStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallStep.cs)
**Purpose**: Call methods on GameObjects
**Key Parameters**:
- `_calledObjectName` (RegistryItem): Target object
- `selectedComponent` (string): Component type name
- `selectedFunction` (string): Method name
- `parameterValues` (SerializableParameter[]): Method parameters
**Parameter Format**:
```json
[{"parameterName": "value", "parameterValue": true, "parameterType": "System.Boolean"}]
```

### DelayStep
**Purpose**: Wait for specified time
**Key Parameters**:
- `timeToWait` (float): Seconds to wait
**Usage**: Timing between actions, pacing experiments

### SubGraphStep
**Purpose**: Execute other graphs as subroutines
**Usage**: Modular experiment design, reusable procedures

## üéÆ Control Flow Steps

### CompositeStep ‚≠ê CRITICAL PATTERN
**File**: [CompositeStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/CompositeStep.cs)
**Purpose**: Parallel execution management
**Connection Pattern**:
```
Start ‚Üí CompositeStep.entry
CompositeStep.routes ‚Üí Route A ‚Üí Logic ‚Üí CompositeStep.entry
CompositeStep.routes ‚Üí Route B ‚Üí Logic ‚Üí CompositeStep.entry  
CompositeStep.exit ‚Üí Continue
```
**When to Use**:
- Multiple user interactions in any order
- Parallel data collection
- Independent setup procedures

### IfStatementStep
**Purpose**: Boolean conditional branching
**Outputs**: `True`, `False`
**Usage**: Decision points, error checking

### SwitchStep / SwitchEnumStep
**Purpose**: Multi-way branching
**Usage**: State machines, menu systems

### ForLoopStep / WhileLoopStep
**Purpose**: Iteration control
**ForLoop Parameters**: `iterations` (int)
**Usage**: Repeated measurements, data collection

## üíæ Variable Nodes

### VariableNode
**Purpose**: Store and pass data between nodes
**Usage**: Intermediate calculations, state storage

### GlobalVariables
**Purpose**: System-wide variable management
**Usage**: Experiment configuration, shared state

## üé® UI Steps

### SideMessageStep
**Purpose**: Display side panel messages
**Key Parameters**:
- `messageID` (int): Message identifier
**Usage**: Instructions, feedback, completion messages

### HintStep
**Purpose**: Display educational hints
**Key Parameters**:
- `stepNumber` (int): Hint sequence number
**Usage**: Educational guidance, help systems

## üîß Utility Steps

### ToggleColliderStep
**Purpose**: Enable/disable colliders
**Usage**: Interaction control, safety systems

### FreezeLabStep
**Purpose**: Freeze/unfreeze lab interactions
**Usage**: Pause functionality, modal dialogs

## üì∑ Camera Steps

### FocusOnToolStep
**Purpose**: Focus camera on specific objects
**Usage**: Guided attention, close-up views

### ReturnCameraStep
**Purpose**: Return camera to default position
**Usage**: Reset view, overview mode

## üèóÔ∏è Common Patterns

### Sequential Object Appearance
```
GameObjectSetActiveStep (hide) ‚Üí DelayStep ‚Üí GameObjectSetActiveStep (show) ‚Üí DelayStep ‚Üí ...
```

### Parallel User Interactions
```
CompositeStep.entry ‚Üê Setup
CompositeStep.routes ‚Üí ClickStep A ‚Üí Action A ‚Üí CompositeStep.entry
CompositeStep.routes ‚Üí ClickStep B ‚Üí Action B ‚Üí CompositeStep.entry
CompositeStep.exit ‚Üí Completion
```

### Function Call with Parameters
```
FunctionCallStep:
- _calledObjectName: {"prefabName": "Tools", "childName": "Cube (1)"}
- selectedComponent: "DisableKinematic"
- selectedFunction: "Disable"
- parameterValues: [] // No parameters for this method
```

### Educational Flow
```
HintStep ‚Üí DelayStep ‚Üí GameObjectSetActiveStep ‚Üí ClickStep ‚Üí FunctionCallStep ‚Üí HintStep
```

## ‚ö†Ô∏è Common Mistakes

1. **Using FunctionCallStep for visibility**: Use GameObjectSetActiveStep instead
2. **Wrong CompositeStep connections**: Routes must connect back to entry
3. **Missing parameter validation**: Always verify RegistryItem exists
4. **Incorrect JSON format**: Always use double quotes
5. **Wrong port connections**: Verify entry/exit/routes port names

## üîç Debugging Tips

1. **Use `list_node_parameters`** to see available parameters
2. **Check Unity console** for execution logs
3. **Verify registry data** with `list_registry_children`
4. **Test connections** one route at a time
5. **Use DelayStep** to slow down execution for debugging