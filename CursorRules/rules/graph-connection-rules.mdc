---
description: Critical connection requirements for Unity MCP graph nodes
alwaysApply: false
---

<rule>
  <meta>
    <title>Graph Connection Rules</title>
    <description>Critical connection requirements for Unity MCP graph nodes</description>
    <created-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</created-at>
    <last-updated-at utc-timestamp="1744240920">January 8, 2025, 12:00 PM UTC</last-updated-at>
    <applies-to>
      <file-matcher glob="">All files that this rule can attach to</file-matcher>
      <action-matcher action="create-scriptableobject">Triggered when creating a new XNode Graph Node using the UnityMCP</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>First step nodes can only have outgoing connections. NEVER connect TO the entry port of a first step node. MUST connect FROM the exit port of a first step node.</description>
      <examples>
        <example title="First Step Node Connections">
          <correct-example title="Proper first step connection" conditions="Connecting from first step node" expected-result="Valid outgoing connection" correctness-criteria="Connects from exit port to next node's entry port">FirstStepNode(exit) → NextNode(entry)</correct-example>
          <incorrect-example title="Improper first step connection" conditions="Connecting to first step node" expected-result="Valid outgoing connection" incorrectness-criteria="Attempts to connect to entry port of first step">SomeNode(exit) → FirstStepNode(entry)</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>End nodes can only have incoming connections. NEVER connect FROM the exit port of an end node. MUST connect TO the entry port of an end node.</description>
      <examples>
        <example title="End Node Connections">
          <correct-example title="Proper end node connection" conditions="Connecting to end node" expected-result="Valid incoming connection" correctness-criteria="Connects from previous node's exit port to end node's entry port">PreviousNode(exit) → EndNode(entry)</correct-example>
          <incorrect-example title="Improper end node connection" conditions="Connecting from end node" expected-result="Valid incoming connection" incorrectness-criteria="Attempts to connect from end node's exit port">EndNode(exit) → NextNode(entry)</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>ALL middle nodes MUST have BOTH incoming AND outgoing connections. Incoming from previous node's exit port, outgoing to next node's entry port. If a middle node lacks either connection, your logic is 100% incorrect.</description>
      <examples>
        <example title="Middle Node Connections">
          <correct-example title="Proper middle node connections" conditions="Connecting middle node" expected-result="Valid bidirectional connections" correctness-criteria="Has both incoming and outgoing connections">PreviousNode(exit) → MiddleNode(entry) → NextNode(entry)</correct-example>
          <incorrect-example title="Improper middle node connections" conditions="Connecting middle node" expected-result="Valid bidirectional connections" incorrectness-criteria="Missing either incoming or outgoing connection">MiddleNode(entry) → NextNode(entry) // Missing incoming connection</incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <context description="Additional considerations for graph connections">
    These rules ensure proper graph execution flow and prevent broken or incomplete graph structures. Violation of these connection rules will result in non-functional experiments.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
  </references>
</rule>