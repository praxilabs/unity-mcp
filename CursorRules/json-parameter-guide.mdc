---
alwaysApply: true
description: Critical JSON formatting and parameter handling rules for Unity MCP Bridge
---

# JSON & Parameter Formatting Guide

## üö® MANDATORY JSON FORMAT RULES

### RegistryItem Format (CRITICAL)
```json
‚úÖ CORRECT - Memorize this exact format:
{"prefabName": "Tools", "childName": "Cube (1)"}

‚ùå WRONG - These will fail:
{prefabName: "Tools", childName: "Cube (1)"}           // Missing quotes on keys
{"prefabName: "Tools", "childName": "Cube (1)"}        // Missing quote on key
{"prefabName": Tools, "childName": "Cube (1)"}         // Missing quotes on value
{'prefabName': 'Tools', 'childName': 'Cube (1)'}       // Single quotes
{\"prefabName\": \"Tools\", \"childName\": \"Cube (1)\"} // Double-escaped
```

### Function Parameters Format
```json
‚úÖ CORRECT SerializableParameter array:
[
  {
    "parameterName": "value",
    "parameterValue": true,
    "parameterType": "System.Boolean"
  },
  {
    "parameterName": "speed",
    "parameterValue": 2.5,
    "parameterType": "System.Single"
  }
]

‚ùå WRONG formats:
[{parameterName: "value", parameterValue: true}]        // Missing quotes on keys
[{"parameterName": value, "parameterValue": true}]      // Missing quotes on value
```

## üìã Parameter Type Reference

### Common Step Node Parameters

#### GameObjectSetActiveStep
```json
{
  "_newToolName": {"prefabName": "Tools", "childName": "Cube (1)"},
  "_isActive": true
}
```

#### ClickStep
```json
{
  "_targetName": {"prefabName": "Tools", "childName": "Cube (1)"}
}
```

#### FunctionCallStep
```json
{
  "_calledObjectName": {"prefabName": "Tools", "childName": "Cube (1)"},
  "selectedComponent": "DisableKinematic",
  "selectedFunction": "Disable",
  "parameterValues": []
}
```

#### DelayStep
```json
{
  "timeToWait": 1.5
}
```

#### SideMessageStep
```json
{
  "messageID": 1001
}
```

### Parameter Value Types

#### Boolean Values
```json
‚úÖ CORRECT:
"_isActive": true
"_isActive": false

‚ùå WRONG:
"_isActive": "true"    // String instead of boolean
"_isActive": True      // Python syntax
"_isActive": 1         // Number instead of boolean
```

#### Numeric Values
```json
‚úÖ CORRECT:
"timeToWait": 1.5      // Float
"messageID": 1001      // Integer
"iterations": 10       // Integer

‚ùå WRONG:
"timeToWait": "1.5"    // String instead of number
"messageID": 1001.0    // Float instead of integer
```

#### String Values
```json
‚úÖ CORRECT:
"selectedComponent": "DisableKinematic"
"selectedFunction": "Disable"

‚ùå WRONG:
"selectedComponent": DisableKinematic    // Missing quotes
"selectedFunction": 'Disable'           // Single quotes
```

## üîß Function Parameter Patterns

### No Parameters
```json
"parameterValues": []
```

### Single Boolean Parameter
```json
"parameterValues": [
  {
    "parameterName": "value",
    "parameterValue": false,
    "parameterType": "System.Boolean"
  }
]
```

### Multiple Parameters
```json
"parameterValues": [
  {
    "parameterName": "x",
    "parameterValue": 1.0,
    "parameterType": "System.Single"
  },
  {
    "parameterName": "y",
    "parameterValue": 2.0,
    "parameterType": "System.Single"
  },
  {
    "parameterName": "z",
    "parameterValue": 3.0,
    "parameterType": "System.Single"
  }
]
```

### Common Parameter Types
```json
"System.Boolean"    // true/false
"System.Int32"      // Integer numbers
"System.Single"     // Float numbers (C# float)
"System.String"     // Text strings
"System.Double"     // Double precision numbers
"UnityEngine.Vector3"  // 3D vectors
```

## üéØ Registry Object Patterns

### Parent-Child Relationships
```json
// Parent object (top-level prefab)
{"prefabName": "Tools", "childName": "Tools"}

// Child object within parent
{"prefabName": "Tools", "childName": "Cube (1)"}
{"prefabName": "Tools", "childName": "Cube (2)"}
{"prefabName": "Tools", "childName": "Cube (3)"}

// Different parent
{"prefabName": "-Utility_Managers", "childName": "DragDropManager"}
```

### Name Matching Rules
```json
‚úÖ CORRECT - Exact match with registry:
Registry: "Cube (1)"  ‚Üí  Parameter: "Cube (1)"

‚ùå WRONG - Mismatched names:
Registry: "Cube (1)"  ‚Üí  Parameter: "Cube(1)"     // Missing space
Registry: "Cube (1)"  ‚Üí  Parameter: "cube (1)"    // Wrong case
Registry: "Cube (1)"  ‚Üí  Parameter: "Cube 1"      // Different format
```

## üîç Validation Techniques

### JSON Syntax Validation
1. **Count quotes**: Every opening quote needs a closing quote
2. **Check commas**: Separate array items and object properties
3. **Verify brackets**: `{}` for objects, `[]` for arrays
4. **Validate nesting**: Proper opening/closing of nested structures

### Parameter Validation
1. **Use list_node_parameters**: See available parameters
2. **Check parameter types**: Match expected data types
3. **Verify object existence**: Confirm registry objects exist
4. **Test incremental**: Set one parameter at a time

### Registry Validation
1. **List parents**: `mcp_unityMCP_list_registry_parents`
2. **List children**: `mcp_unityMCP_list_registry_children`
3. **Check components**: `mcp_unityMCP_get_child_components`
4. **Match exactly**: Ensure names match character-for-character

## ‚ö†Ô∏è Common JSON Errors

### Syntax Errors
```json
‚ùå Missing comma between properties:
{
  "prefabName": "Tools"
  "childName": "Cube (1)"
}

‚úÖ CORRECT:
{
  "prefabName": "Tools",
  "childName": "Cube (1)"
}
```

```json
‚ùå Trailing comma (some systems reject this):
{
  "prefabName": "Tools",
  "childName": "Cube (1)",
}

‚úÖ CORRECT:
{
  "prefabName": "Tools",
  "childName": "Cube (1)"
}
```

### Quote Errors
```json
‚ùå Mixed quote types:
{"prefabName': "Tools", "childName": 'Cube (1)'}

‚úÖ CORRECT:
{"prefabName": "Tools", "childName": "Cube (1)"}
```

### Escape Sequence Errors
```json
‚ùå Double-escaped quotes:
{\"prefabName\": \"Tools\", \"childName\": \"Cube (1)\"}

‚úÖ CORRECT (no escaping needed in parameter values):
{"prefabName": "Tools", "childName": "Cube (1)"}
```

## üõ†Ô∏è Debugging JSON Issues

### Step-by-Step Validation
1. **Copy JSON to validator**: Use online JSON validator
2. **Check each quote**: Ensure proper opening/closing
3. **Verify commas**: Check separation between elements
4. **Test minimal example**: Start with simplest case
5. **Build incrementally**: Add complexity gradually

### Common Fixes
```json
// Fix missing quotes on keys
‚ùå {prefabName: "Tools"}
‚úÖ {"prefabName": "Tools"}

// Fix missing quotes on values  
‚ùå {"prefabName": Tools}
‚úÖ {"prefabName": "Tools"}

// Fix mixed quote types
‚ùå {"prefabName': "Tools"}
‚úÖ {"prefabName": "Tools"}
```

## üìö Quick Reference Cards

### RegistryItem Card
```json
{"prefabName": "ParentName", "childName": "ChildName"}
```

### Function Parameters Card
```json
[{"parameterName": "name", "parameterValue": value, "parameterType": "Type"}]
```

### Common Types Card
```
Boolean: true/false (not "true"/"false")
Integer: 123 (not "123")
Float: 1.5 (not "1.5")
String: "text" (with quotes)
```

### Validation Card
```
1. Use double quotes everywhere
2. No trailing commas
3. Match registry names exactly
4. Test with JSON validator
5. Set parameters one at a time
```