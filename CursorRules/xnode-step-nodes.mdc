---
alwaysApply: true
---
# XNode Step Nodes - Complete Reference

This rule provides comprehensive documentation for all XNode step nodes available in the virtual labs system. The step nodes are organized into categories based on their execution behavior and functionality.

## Base Classes

### StepNode
- **File**: [StepNode.cs](mdc:Assets/Scripts/System/xNode/Steps/StepNode.cs)
- **Purpose**: Abstract base class for all step nodes
- **Key Methods**:
  - `PrepareStep()`: Initialize and resolve objects
  - `Execute()`: Perform the main action
  - `Exit()`: Clean up and signal completion
  - `AutomateStep()`: Abstract method for automation
  - `ResolveObjects()`: Resolve registry references

### ActionExecuted
- **File**: [ActionExecuted.cs](mdc:Assets/Scripts/System/xNode/Steps/ActionExecuted.cs)
- **Purpose**: Base class for nodes requiring user interaction
- **Behavior**: Waits for user input before proceeding

### SelfExectutedStep
- **File**: [SelfExectutedStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExectutedStep.cs)
- **Purpose**: Base class for nodes that execute automatically
- **Behavior**: Executes immediately when reached

## Node Categories

### 1. Action-Executed Steps
User interaction required - see [action-executed-steps.mdc](mdc:.cursor/rules/action-executed-steps.mdc)

**Location**: `Assets/Scripts/System/xNode/Steps/ActionExecuted/`
- **ClickStep**: Handle object clicking interactions
- **UIClickStep**: Handle UI element clicking
- **RotateKnobStep**: Handle knob rotation interactions
- **AttachStep**: Handle object attachment
- **DetachStep**: Handle object detachment
- **ExploreStep**: Handle exploration interactions
- **ORStep**: Logical OR operation for multiple conditions

### 2. Self-Executed Steps
Automatically execute when reached - see [self-executed-steps.mdc](mdc:.cursor/rules/self-executed-steps.mdc)

**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/`

#### Core Steps
- **FunctionCallStep**: Call methods on GameObjects
- **FunctionCallGlobalStep**: Call global methods
- **FunctionCallCoroutineStep**: Execute coroutines
- **FunctionCallCoroutineGlobalStep**: Execute global coroutines
- **DelayStep**: Wait for specified time
- **SubGraphStep**: Execute sub-graphs
- **HintStep**: Display hints to users
- **IntroEndMessagesStep**: Show introduction/ending messages
- **AnimationStep**: Play animations
- **GameObjectSetActive**: Toggle GameObject active state

#### Control Flow Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/`
- **IfStatementStep**: Conditional branching
- **SwitchStep**: Multi-way branching
- **SwitchEnumStep**: Enum-based switching
- **FirstThenStep**: Execute first, then second branch
- **BranchingControlStep**: Complex branching logic
- **CompositeStep**: Combine multiple steps

#### Loop Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/Loops/`
- **ForLoopStep**: Fixed iteration loops
- **WhileLoopStep**: Conditional loops

#### UI Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/`
- **SideMessageStep**: Display side messages
- **TimerStep**: Countdown timers
- **MiddleMessageOneActionsStep**: Center messages with one action
- **MiddleMessageTwoActionsStep**: Center messages with two actions
- **MCQStep**: Multiple choice questions

#### Utility Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/`
- **ToggleColliderStep**: Toggle collider components
- **ToggleDeviceCollidersStep**: Toggle device-specific colliders
- **ToggleUIButtonInteractionStep**: Toggle UI button interactions
- **FreezeLabStep**: Freeze/unfreeze lab interactions

#### Camera Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/`
- **FocusOnToolStep**: Focus camera on specific tools
- **ReturnCameraStep**: Return camera to default position

#### Tool Interaction Steps
- **ToolsInputfieldStep**: Handle tool input fields
- **ToolsInteractionsMenuStep**: Handle tool interaction menus
- **SafteyToolsStep**: Handle safety tool interactions

### 3. Variable Nodes
Data management and flow - see [variable-nodes.mdc](mdc:.cursor/rules/variable-nodes.mdc)

**Location**: `Assets/Scripts/System/xNode/Steps/VariableNodes/`
- **VariableNode**: Generic variable storage
- **GlobalVariables**: Global variable management

## Key Concepts

### Registry System
All nodes use the **ExperimentItemsRegistry** to resolve GameObjects:
- **Parent Objects**: Top-level prefabs (e.g., "Tools", "Cube")
- **Child Objects**: Specific components within parents
- **Resolution**: `ExperimentItemsContainer.Instance.Resolve(parent, child)`

### Node Execution Flow
1. **PrepareStep()**: Initialize and resolve objects
2. **Execute()**: Perform the main action
3. **Exit()**: Clean up and signal completion

### Parameter Types
- **RegistryItem**: References to scene objects via registry
- **SerializableParameter[]**: Function call parameters
- **NodeObject**: Data flow between nodes

### Node Tinting
Each node type has a specific color tint defined by `[NodeTint]` attribute for visual identification in the graph editor.

## Best Practices

- Always ensure scene prefabs are registered before creating graphs
- Use DelayStep between rapid operations to ensure proper timing
- Combine ClickStep with visual feedback (flashing tools)
- Use HintStep to guide users through complex procedures
- Implement proper error handling in FunctionCallStep nodes
- Use SubGraphStep for modular experiment design
- Leverage control flow nodes for complex experiment logic

## File References

- Node implementations: [Assets/Scripts/System/xNode/Steps/](mdc:Assets/Scripts/System/xNode/Steps/)
- Registry system: [Assets/Scripts/System/xNode/DependencyInjection/](mdc:Assets/Scripts/System/xNode/DependencyInjection/)
- Graph management: [Assets/Scripts/System/xNode/Graphs/StepsGraph.cs](mdc:Assets/Scripts/System/xNode/Graphs/StepsGraph.cs)
# XNode Step Nodes - Complete Reference

This rule provides comprehensive documentation for all XNode step nodes available in the virtual labs system. The step nodes are organized into categories based on their execution behavior and functionality.

## Base Classes

### StepNode
- **File**: [StepNode.cs](mdc:Assets/Scripts/System/xNode/Steps/StepNode.cs)
- **Purpose**: Abstract base class for all step nodes
- **Key Methods**:
  - `PrepareStep()`: Initialize and resolve objects
  - `Execute()`: Perform the main action
  - `Exit()`: Clean up and signal completion
  - `AutomateStep()`: Abstract method for automation
  - `ResolveObjects()`: Resolve registry references

### ActionExecuted
- **File**: [ActionExecuted.cs](mdc:Assets/Scripts/System/xNode/Steps/ActionExecuted.cs)
- **Purpose**: Base class for nodes requiring user interaction
- **Behavior**: Waits for user input before proceeding

### SelfExectutedStep
- **File**: [SelfExectutedStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExectutedStep.cs)
- **Purpose**: Base class for nodes that execute automatically
- **Behavior**: Executes immediately when reached

## Node Categories

### 1. Action-Executed Steps
User interaction required - see [action-executed-steps.mdc](mdc:.cursor/rules/action-executed-steps.mdc)

**Location**: `Assets/Scripts/System/xNode/Steps/ActionExecuted/`
- **ClickStep**: Handle object clicking interactions
- **UIClickStep**: Handle UI element clicking
- **RotateKnobStep**: Handle knob rotation interactions
- **AttachStep**: Handle object attachment
- **DetachStep**: Handle object detachment
- **ExploreStep**: Handle exploration interactions
- **ORStep**: Logical OR operation for multiple conditions

### 2. Self-Executed Steps
Automatically execute when reached - see [self-executed-steps.mdc](mdc:.cursor/rules/self-executed-steps.mdc)

**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/`

#### Core Steps
- **FunctionCallStep**: Call methods on GameObjects
- **FunctionCallGlobalStep**: Call global methods
- **FunctionCallCoroutineStep**: Execute coroutines
- **FunctionCallCoroutineGlobalStep**: Execute global coroutines
- **DelayStep**: Wait for specified time
- **SubGraphStep**: Execute sub-graphs
- **HintStep**: Display hints to users
- **IntroEndMessagesStep**: Show introduction/ending messages
- **AnimationStep**: Play animations
- **GameObjectSetActive**: Toggle GameObject active state

#### Control Flow Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/`
- **IfStatementStep**: Conditional branching
- **SwitchStep**: Multi-way branching
- **SwitchEnumStep**: Enum-based switching
- **FirstThenStep**: Execute first, then second branch
- **BranchingControlStep**: Complex branching logic
- **CompositeStep**: Combine multiple steps

#### Loop Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/Loops/`
- **ForLoopStep**: Fixed iteration loops
- **WhileLoopStep**: Conditional loops

#### UI Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/`
- **SideMessageStep**: Display side messages
- **TimerStep**: Countdown timers
- **MiddleMessageOneActionsStep**: Center messages with one action
- **MiddleMessageTwoActionsStep**: Center messages with two actions
- **MCQStep**: Multiple choice questions

#### Utility Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/`
- **ToggleColliderStep**: Toggle collider components
- **ToggleDeviceCollidersStep**: Toggle device-specific colliders
- **ToggleUIButtonInteractionStep**: Toggle UI button interactions
- **FreezeLabStep**: Freeze/unfreeze lab interactions

#### Camera Steps
**Location**: `Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/`
- **FocusOnToolStep**: Focus camera on specific tools
- **ReturnCameraStep**: Return camera to default position

#### Tool Interaction Steps
- **ToolsInputfieldStep**: Handle tool input fields
- **ToolsInteractionsMenuStep**: Handle tool interaction menus
- **SafteyToolsStep**: Handle safety tool interactions

### 3. Variable Nodes
Data management and flow - see [variable-nodes.mdc](mdc:.cursor/rules/variable-nodes.mdc)

**Location**: `Assets/Scripts/System/xNode/Steps/VariableNodes/`
- **VariableNode**: Generic variable storage
- **GlobalVariables**: Global variable management

## Key Concepts

### Registry System
All nodes use the **ExperimentItemsRegistry** to resolve GameObjects:
- **Parent Objects**: Top-level prefabs (e.g., "Tools", "Cube")
- **Child Objects**: Specific components within parents
- **Resolution**: `ExperimentItemsContainer.Instance.Resolve(parent, child)`

### Node Execution Flow
1. **PrepareStep()**: Initialize and resolve objects
2. **Execute()**: Perform the main action
3. **Exit()**: Clean up and signal completion

### Parameter Types
- **RegistryItem**: References to scene objects via registry
- **SerializableParameter[]**: Function call parameters
- **NodeObject**: Data flow between nodes

### Node Tinting
Each node type has a specific color tint defined by `[NodeTint]` attribute for visual identification in the graph editor.

## Best Practices

- Always ensure scene prefabs are registered before creating graphs
- Use DelayStep between rapid operations to ensure proper timing
- Combine ClickStep with visual feedback (flashing tools)
- Use HintStep to guide users through complex procedures
- Implement proper error handling in FunctionCallStep nodes
- Use SubGraphStep for modular experiment design
- Leverage control flow nodes for complex experiment logic

## File References

- Node implementations: [Assets/Scripts/System/xNode/Steps/](mdc:Assets/Scripts/System/xNode/Steps/)
- Registry system: [Assets/Scripts/System/xNode/DependencyInjection/](mdc:Assets/Scripts/System/xNode/DependencyInjection/)
- Graph management: [Assets/Scripts/System/xNode/Graphs/StepsGraph.cs](mdc:Assets/Scripts/System/xNode/Graphs/StepsGraph.cs)
