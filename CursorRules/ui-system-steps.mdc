---
description: These Rules are conditions of usage and best practicies for the ui system steps.
alwaysApply: false
---
# UI and System Step Nodes

UI and system step nodes handle user interface operations, system management, and utility functions. These nodes provide user feedback, manage system state, and control various aspects of the virtual lab environment.

## UI Steps

### SideMessageStep
- **File**: [SideMessageStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/SideMessageStep.cs)
- **Purpose**: Display messages in the side panel
- **Parameters**:
  - `messageText` (string): Message content to display
  - `messageDuration` (float): How long to show the message
- **Behavior**: Shows message in side panel for specified duration
- **Use Cases**: Status updates, progress notifications, informational messages

### TimerStep
- **File**: [TimerStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/TimerStep.cs)
- **Purpose**: Countdown timers with optional UI display
- **Parameters**:
  - `timerDuration` (float): Timer duration in seconds
  - `showTimer` (bool): Whether to display timer UI
- **Behavior**: Counts down and optionally displays timer interface
- **Use Cases**: Experiment timing, observation periods, measurement intervals

### MiddleMessageOneActionsStep
- **File**: [MiddleMessageOneActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageOneActionsStep.cs)
- **Purpose**: Center messages with single action button
- **Parameters**:
  - `messageText` (string): Message content
  - `actionText` (string): Action button text
- **Behavior**: Shows centered message with single action button
- **Use Cases**: Confirmations, acknowledgments, simple decisions

### MiddleMessageTwoActionsStep
- **File**: [MiddleMessageTwoActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageTwoActionsStep.cs)
- **Purpose**: Center messages with two action buttons
- **Parameters**:
  - `messageText` (string): Message content
  - `action1Text` (string): First action button text
  - `action2Text` (string): Second action button text
- **Behavior**: Shows centered message with two action buttons
- **Use Cases**: Binary choices, yes/no decisions, option selection

### MCQStep
- **File**: [MCQStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MCQStep.cs)
- **Purpose**: Multiple choice questions
- **Parameters**:
  - `questionText` (string): Question content
  - `options` (string[]): Array of answer options
- **Behavior**: Displays question and waits for user selection
- **Use Cases**: Knowledge assessment, concept checking, educational quizzes

## System Utility Steps

### ToggleColliderStep
- **File**: [ToggleColliderStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleColliderStep.cs)
- **Purpose**: Toggle collider components on objects
- **Parameters**:
  - `_targetName` (RegistryItem): Object with collider to toggle
  - `enableCollider` (bool): Whether to enable or disable collider
- **Behavior**: Enables or disables collider on target object
- **Use Cases**: Prevent unwanted interactions, control object accessibility

### ToggleDeviceCollidersStep
- **File**: [ToggleDeviceCollidersStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleDeviceCollidersStep.cs)
- **Purpose**: Toggle all colliders on device objects
- **Parameters**:
  - `_targetName` (RegistryItem): Device object
  - `enableColliders` (bool): Whether to enable or disable all colliders
- **Behavior**: Toggles all collider components on device object
- **Use Cases**: Device state management, interaction control

### ToggleUIButtonInteractionStep
- **File**: [ToggleUIButtonInteractionStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleUIButtonInteractionStep.cs)
- **Purpose**: Toggle UI button interactions
- **Parameters**:
  - `_targetName` (RegistryItem): UI button to control
  - `enableInteraction` (bool): Whether to enable or disable interaction
- **Behavior**: Enables or disables button interactions
- **Use Cases**: UI state management, prevent premature interactions

### FreezeLabStep
- **File**: [FreezeLabStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/FreezeLabStep.cs)
- **Purpose**: Freeze or unfreeze all lab interactions
- **Parameters**:
  - `freezeLab` (bool): Whether to freeze or unfreeze lab
- **Behavior**: Freezes or unfreezes all lab interactions globally
- **Use Cases**: System pause, maintenance mode, error recovery

## Camera Control Steps

### FocusOnToolStep
- **File**: [FocusOnToolStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/FocusOnToolStep.cs)
- **Purpose**: Focus camera on specific tools
- **Parameters**:
  - `_targetName` (RegistryItem): Tool to focus on
  - `focusDuration` (float): Camera movement duration
- **Behavior**: Smoothly moves camera to focus on target tool
- **Use Cases**: Tool highlighting, user guidance, attention direction

### ReturnCameraStep
- **File**: [ReturnCameraStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/ReturnCameraStep.cs)
- **Purpose**: Return camera to default position
- **Parameters**:
  - `returnDuration` (float): Camera movement duration
- **Behavior**: Returns camera to default position smoothly
- **Use Cases**: Reset view, return to overview, camera cleanup

## Tool Interaction Steps

### ToolsInputfieldStep
- **File**: [ToolsInputfieldStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInputfieldStep.cs)
- **Purpose**: Handle tool input fields
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with input field
  - `inputValue` (string): Value to set in input field
- **Behavior**: Sets input field value on specified tool
- **Use Cases**: Parameter setting, configuration, data entry

### ToolsInteractionsMenuStep
- **File**: [ToolsInteractionsMenuStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInteractionsMenuStep.cs)
- **Purpose**: Handle tool interaction menus
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with menu
  - `menuAction` (string): Menu action to perform
- **Behavior**: Performs specified menu action on tool
- **Use Cases**: Advanced tool operations, menu navigation, complex interactions

### SafteyToolsStep
- **File**: [SafteyToolsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/SafteyToolsStep.cs)
- **Purpose**: Handle safety tool interactions
- **Parameters**:
  - `_targetName` (RegistryItem): Safety tool
  - `safetyAction` (string): Safety action to perform
- **Behavior**: Performs safety-related actions on tools
- **Use Cases**: Safety protocols, emergency procedures, protective measures

## Common Patterns

### UI Feedback Pattern
```csharp
// Show message, wait for user action, then proceed
SideMessageStep → TimerStep → MiddleMessageOneActionsStep
```

### System State Management Pattern
```csharp
// Freeze lab, perform operation, unfreeze lab
FreezeLabStep → FunctionCallStep → FreezeLabStep
```

### Camera Guidance Pattern
```csharp
// Focus on tool, show message, return camera
FocusOnToolStep → SideMessageStep → ReturnCameraStep
```

### Tool Interaction Pattern
```csharp
// Enable tool, perform action, disable tool
ToggleColliderStep → ClickStep → ToggleColliderStep
```

## Experiment Design Patterns

### User Guidance Pattern
```
Educational guidance flow:
1. FocusOnToolStep - Direct attention to tool
2. SideMessageStep - Provide instruction
3. TimerStep - Allow observation time
4. MiddleMessageOneActionsStep - Confirm understanding
5. ReturnCameraStep - Reset view
```

### System Maintenance Pattern
```
System management flow:
1. FreezeLabStep - Pause interactions
2. FunctionCallStep - Perform maintenance
3. ToggleColliderStep - Reset object states
4. FreezeLabStep - Resume interactions
```

### Safety Protocol Pattern
```
Safety procedure flow:
1. SafteyToolsStep - Activate safety measures
2. MiddleMessageTwoActionsStep - Confirm safety status
3. FunctionCallStep - Perform safe operation
4. SafteyToolsStep - Deactivate safety measures
```

### Assessment Pattern
```
Knowledge assessment flow:
1. MCQStep - Present question
2. IfStatementStep - Evaluate answer
   ├─ True: Show success message
   └─ False: Show correction hint
3. TimerStep - Allow reading time
```

## Best Practices

1. **User Experience**: Provide clear, concise messages
2. **Timing**: Use appropriate durations for messages and timers
3. **State Management**: Always restore system state after operations
4. **Safety**: Implement proper safety protocols
5. **Accessibility**: Ensure UI elements are accessible
6. **Feedback**: Provide immediate feedback for user actions

## Integration with Other Nodes

### With Action-Executed Steps
- Use UI steps to provide guidance before user interactions
- Use system steps to prepare environment for interactions
- Use camera steps to direct attention to interaction targets

### With Self-Executed Steps
- Use UI steps to display results from function calls
- Use system steps to manage resources for operations
- Use timer steps to control timing of operations

### With Control Flow Steps
- Use UI steps to gather user input for decisions
- Use system steps to prepare conditions for branching
- Use assessment steps to evaluate user performance

## Performance Considerations

1. **UI Responsiveness**: Keep UI operations lightweight
2. **Camera Smoothing**: Use appropriate durations for camera movements
3. **State Transitions**: Minimize system state changes
4. **Memory Management**: Clean up UI resources properly

## Debugging Tips

1. **UI Testing**: Test all UI paths and user interactions
2. **State Verification**: Verify system state after operations
3. **Camera Debugging**: Check camera positions and movements
4. **Tool Interactions**: Validate tool state changes

## File References

- UI steps directory: [Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/)
- Utility steps directory: [Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/)
- Camera steps directory: [Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/)
- Tool interaction steps: [Assets/Scripts/System/xNode/Steps/SelfExecuted/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/)
├─ AudioStep (congratulations)
└─ DataLogStep (completion record)
```
# UI and System Step Nodes

UI and system step nodes handle user interface operations, system management, and utility functions. These nodes provide user feedback, manage system state, and control various aspects of the virtual lab environment.

## UI Steps

### SideMessageStep
- **File**: [SideMessageStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/SideMessageStep.cs)
- **Purpose**: Display messages in the side panel
- **Parameters**:
  - `messageText` (string): Message content to display
  - `messageDuration` (float): How long to show the message
- **Behavior**: Shows message in side panel for specified duration
- **Use Cases**: Status updates, progress notifications, informational messages

### TimerStep
- **File**: [TimerStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/TimerStep.cs)
- **Purpose**: Countdown timers with optional UI display
- **Parameters**:
  - `timerDuration` (float): Timer duration in seconds
  - `showTimer` (bool): Whether to display timer UI
- **Behavior**: Counts down and optionally displays timer interface
- **Use Cases**: Experiment timing, observation periods, measurement intervals

### MiddleMessageOneActionsStep
- **File**: [MiddleMessageOneActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageOneActionsStep.cs)
- **Purpose**: Center messages with single action button
- **Parameters**:
  - `messageText` (string): Message content
  - `actionText` (string): Action button text
- **Behavior**: Shows centered message with single action button
- **Use Cases**: Confirmations, acknowledgments, simple decisions

### MiddleMessageTwoActionsStep
- **File**: [MiddleMessageTwoActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageTwoActionsStep.cs)
- **Purpose**: Center messages with two action buttons
- **Parameters**:
  - `messageText` (string): Message content
  - `action1Text` (string): First action button text
  - `action2Text` (string): Second action button text
- **Behavior**: Shows centered message with two action buttons
- **Use Cases**: Binary choices, yes/no decisions, option selection

### MCQStep
- **File**: [MCQStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MCQStep.cs)
- **Purpose**: Multiple choice questions
- **Parameters**:
  - `questionText` (string): Question content
  - `options` (string[]): Array of answer options
- **Behavior**: Displays question and waits for user selection
- **Use Cases**: Knowledge assessment, concept checking, educational quizzes

## System Utility Steps

### ToggleColliderStep
- **File**: [ToggleColliderStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleColliderStep.cs)
- **Purpose**: Toggle collider components on objects
- **Parameters**:
  - `_targetName` (RegistryItem): Object with collider to toggle
  - `enableCollider` (bool): Whether to enable or disable collider
- **Behavior**: Enables or disables collider on target object
- **Use Cases**: Prevent unwanted interactions, control object accessibility

### ToggleDeviceCollidersStep
- **File**: [ToggleDeviceCollidersStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleDeviceCollidersStep.cs)
- **Purpose**: Toggle all colliders on device objects
- **Parameters**:
  - `_targetName` (RegistryItem): Device object
  - `enableColliders` (bool): Whether to enable or disable all colliders
- **Behavior**: Toggles all collider components on device object
- **Use Cases**: Device state management, interaction control

### ToggleUIButtonInteractionStep
- **File**: [ToggleUIButtonInteractionStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleUIButtonInteractionStep.cs)
- **Purpose**: Toggle UI button interactions
- **Parameters**:
  - `_targetName` (RegistryItem): UI button to control
  - `enableInteraction` (bool): Whether to enable or disable interaction
- **Behavior**: Enables or disables button interactions
- **Use Cases**: UI state management, prevent premature interactions

### FreezeLabStep
- **File**: [FreezeLabStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/FreezeLabStep.cs)
- **Purpose**: Freeze or unfreeze all lab interactions
- **Parameters**:
  - `freezeLab` (bool): Whether to freeze or unfreeze lab
- **Behavior**: Freezes or unfreezes all lab interactions globally
- **Use Cases**: System pause, maintenance mode, error recovery

## Camera Control Steps

### FocusOnToolStep
- **File**: [FocusOnToolStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/FocusOnToolStep.cs)
- **Purpose**: Focus camera on specific tools
- **Parameters**:
  - `_targetName` (RegistryItem): Tool to focus on
  - `focusDuration` (float): Camera movement duration
- **Behavior**: Smoothly moves camera to focus on target tool
- **Use Cases**: Tool highlighting, user guidance, attention direction

### ReturnCameraStep
- **File**: [ReturnCameraStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/ReturnCameraStep.cs)
- **Purpose**: Return camera to default position
- **Parameters**:
  - `returnDuration` (float): Camera movement duration
- **Behavior**: Returns camera to default position smoothly
- **Use Cases**: Reset view, return to overview, camera cleanup

## Tool Interaction Steps

### ToolsInputfieldStep
- **File**: [ToolsInputfieldStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInputfieldStep.cs)
- **Purpose**: Handle tool input fields
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with input field
  - `inputValue` (string): Value to set in input field
- **Behavior**: Sets input field value on specified tool
- **Use Cases**: Parameter setting, configuration, data entry

### ToolsInteractionsMenuStep
- **File**: [ToolsInteractionsMenuStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInteractionsMenuStep.cs)
- **Purpose**: Handle tool interaction menus
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with menu
  - `menuAction` (string): Menu action to perform
- **Behavior**: Performs specified menu action on tool
- **Use Cases**: Advanced tool operations, menu navigation, complex interactions

### SafteyToolsStep
- **File**: [SafteyToolsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/SafteyToolsStep.cs)
- **Purpose**: Handle safety tool interactions
- **Parameters**:
  - `_targetName` (RegistryItem): Safety tool
  - `safetyAction` (string): Safety action to perform
- **Behavior**: Performs safety-related actions on tools
- **Use Cases**: Safety protocols, emergency procedures, protective measures

## Common Patterns

### UI Feedback Pattern
```csharp
// Show message, wait for user action, then proceed
SideMessageStep → TimerStep → MiddleMessageOneActionsStep
```

### System State Management Pattern
```csharp
// Freeze lab, perform operation, unfreeze lab
FreezeLabStep → FunctionCallStep → FreezeLabStep
```

### Camera Guidance Pattern
```csharp
// Focus on tool, show message, return camera
FocusOnToolStep → SideMessageStep → ReturnCameraStep
```

### Tool Interaction Pattern
```csharp
// Enable tool, perform action, disable tool
ToggleColliderStep → ClickStep → ToggleColliderStep
```

## Experiment Design Patterns

### User Guidance Pattern
```
Educational guidance flow:
1. FocusOnToolStep - Direct attention to tool
2. SideMessageStep - Provide instruction
3. TimerStep - Allow observation time
4. MiddleMessageOneActionsStep - Confirm understanding
5. ReturnCameraStep - Reset view
```

### System Maintenance Pattern
```
System management flow:
1. FreezeLabStep - Pause interactions
2. FunctionCallStep - Perform maintenance
3. ToggleColliderStep - Reset object states
4. FreezeLabStep - Resume interactions
```

### Safety Protocol Pattern
```
Safety procedure flow:
1. SafteyToolsStep - Activate safety measures
2. MiddleMessageTwoActionsStep - Confirm safety status
3. FunctionCallStep - Perform safe operation
4. SafteyToolsStep - Deactivate safety measures
```

### Assessment Pattern
```
Knowledge assessment flow:
1. MCQStep - Present question
2. IfStatementStep - Evaluate answer
   ├─ True: Show success message
   └─ False: Show correction hint
3. TimerStep - Allow reading time
```

## Best Practices

1. **User Experience**: Provide clear, concise messages
2. **Timing**: Use appropriate durations for messages and timers
3. **State Management**: Always restore system state after operations
4. **Safety**: Implement proper safety protocols
5. **Accessibility**: Ensure UI elements are accessible
6. **Feedback**: Provide immediate feedback for user actions

## Integration with Other Nodes

### With Action-Executed Steps
- Use UI steps to provide guidance before user interactions
- Use system steps to prepare environment for interactions
- Use camera steps to direct attention to interaction targets

### With Self-Executed Steps
- Use UI steps to display results from function calls
- Use system steps to manage resources for operations
- Use timer steps to control timing of operations

### With Control Flow Steps
- Use UI steps to gather user input for decisions
- Use system steps to prepare conditions for branching
- Use assessment steps to evaluate user performance

## Performance Considerations

1. **UI Responsiveness**: Keep UI operations lightweight
2. **Camera Smoothing**: Use appropriate durations for camera movements
3. **State Transitions**: Minimize system state changes
4. **Memory Management**: Clean up UI resources properly

## Debugging Tips

1. **UI Testing**: Test all UI paths and user interactions
2. **State Verification**: Verify system state after operations
3. **Camera Debugging**: Check camera positions and movements
4. **Tool Interactions**: Validate tool state changes

## File References

- UI steps directory: [Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/)
- Utility steps directory: [Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/)
- Camera steps directory: [Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/)
- Tool interaction steps: [Assets/Scripts/System/xNode/Steps/SelfExecuted/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/)
├─ AudioStep (congratulations)
└─ DataLogStep (completion record)
```