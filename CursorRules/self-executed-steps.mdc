---
description: These Rules are conditions of usage and best practicies for the self executed steps.
alwaysApply: false
---
# Self-Executed Step Nodes

Self-executed step nodes run automatically when reached in the graph execution flow. These nodes inherit from `SelfExectutedStep` base class and execute immediately without waiting for user input.

## Base Class

### SelfExectutedStep
- **File**: [SelfExectutedStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExectutedStep.cs)
- **Purpose**: Base class for all automatic execution nodes
- **Behavior**: Executes immediately when reached, then signals completion

## Core Steps

### FunctionCallStep
- **File**: [FunctionCallStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallStep.cs)
- **Base**: [FunctionCallBase.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallBase.cs)
- **NodeTint**: `#40534C` (Dark Green)
- **Menu Path**: "Function Call/Function Call"
- **Purpose**: Call methods on GameObjects
- **Parameters**:
  - `_calledObjectName` (RegistryItem): Target object
  - `selectedComponent` (string): Component name
  - `selectedFunction` (string): Method name
  - `parameterValues` (SerializableParameter[]): Method parameters
- **Behavior**: Resolves object, invokes method, passes result to output

### FunctionCallGlobalStep
- **File**: [FunctionCallGlobalStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallGlobalStep.cs)
- **Purpose**: Call global/static methods
- **Parameters**: Similar to FunctionCallStep but for global methods
- **Use Cases**: Global system functions, utility methods

### FunctionCallCoroutineStep
- **File**: [FunctionCallCoroutineStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallCoroutineStep.cs)
- **Purpose**: Execute coroutines on GameObjects
- **Parameters**: Similar to FunctionCallStep but for coroutines
- **Behavior**: Starts coroutine and waits for completion

### FunctionCallCoroutineGlobalStep
- **File**: [FunctionCallCoroutineGlobalStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallCoroutineGlobalStep.cs)
- **Purpose**: Execute global coroutines
- **Use Cases**: Global async operations, system-wide coroutines

### DelayStep
- **File**: [DelayStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/DelayStep.cs)
- **Purpose**: Wait for specified time
- **Parameters**:
  - `delayTime` (float): Time to wait in seconds
- **Behavior**: Pauses execution for specified duration
- **Use Cases**: Timing control, UI animations, system delays

### SubGraphStep
- **File**: [SubGraphStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/SubGraphStep.cs)
- **Purpose**: Execute sub-graphs for modularity
- **Parameters**:
  - `subGraph` (StepsGraph): Graph to execute
- **Behavior**: Executes entire sub-graph as a single step
- **Use Cases**: Modular experiment design, reusable procedures

### HintStep
- **File**: [HintStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/HintStep.cs)
- **Purpose**: Display hints to users
- **Parameters**:
  - `hintText` (string): Text to display
  - `hintDuration` (float): How long to show hint
- **Behavior**: Shows hint message, waits for duration
- **Use Cases**: User guidance, instructions, explanations

### IntroEndMessagesStep
- **File**: [IntroEndMessagesStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/IntroEndMessagesStep.cs)
- **Purpose**: Show introduction or ending messages
- **Parameters**:
  - `messageType` (enum): Intro or End message
  - `messageText` (string): Message content
- **Behavior**: Displays formatted intro/ending message
- **Use Cases**: Experiment introductions, conclusions, phase transitions

### AnimationStep
- **File**: [AnimationStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/AnimationStep.cs)
- **Purpose**: Play animations on objects
- **Parameters**:
  - `_targetName` (RegistryItem): Object to animate
  - `animationName` (string): Animation to play
  - `animationSpeed` (float): Playback speed
- **Behavior**: Plays animation and waits for completion
- **Use Cases**: Visual feedback, object transformations, UI animations

### GameObjectSetActive
- **File**: [GameObjectSetActive.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/GameObjectSetActive.cs)
- **Purpose**: Toggle GameObject active state
- **Parameters**:
  - `_targetName` (RegistryItem): Object to toggle
  - `setActive` (bool): Active state to set
- **Behavior**: Sets object active/inactive
- **Use Cases**: Show/hide objects, enable/disable components

## Control Flow Steps

### IfStatementStep
- **File**: [IfStatementStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/IfStatementStep.cs)
- **NodeTint**: `#643843` (Dark Purple)
- **Menu Path**: "Control Flow/If Statement Step"
- **Purpose**: Conditional branching
- **Parameters**:
  - `entry` (NodeObject): Boolean input condition
- **Outputs**:
  - `True`: Path when condition is true
  - `False`: Path when condition is false
- **Behavior**: Evaluates boolean input and branches accordingly

### SwitchStep
- **File**: [SwitchStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/SwitchStep.cs)
- **Purpose**: Multi-way branching
- **Parameters**:
  - `entry` (NodeObject): Switch value
- **Outputs**: Multiple output ports for different cases
- **Behavior**: Routes execution based on input value

### SwitchEnumStep
- **File**: [SwitchEnumStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/SwitchEnumStep.cs)
- **Purpose**: Enum-based switching
- **Parameters**:
  - `entry` (NodeObject): Enum value
- **Behavior**: Routes execution based on enum value

### FirstThenStep
- **File**: [FirstThenStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/FirstThenStep.cs)
- **Purpose**: Execute first, then second branch
- **Outputs**:
  - `first`: First execution path
  - `then`: Second execution path
- **Behavior**: Executes first path, then second path

### BranchingControlStep
- **File**: [BranchingControlStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/BranchingControlStep.cs)
- **Purpose**: Complex branching logic
- **Parameters**: Multiple conditions and outputs
- **Behavior**: Advanced conditional routing

### CompositeStep
- **File**: [CompositeStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/CompositeStep.cs)
- **Purpose**: Combine multiple steps
- **Parameters**: Multiple input steps
- **Behavior**: Executes multiple steps in sequence

## Loop Steps

### ForLoopStep
- **File**: [ForLoopStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Loops/ForLoopStep.cs)
- **NodeTint**: `#3A1078` (Purple)
- **Menu Path**: "Loops/For loop"
- **Purpose**: Fixed iteration loops
- **Parameters**:
  - `iterations` (int): Number of iterations
- **Outputs**:
  - `continueLoop`: Loop body execution
  - `exit`: Loop completion
- **Behavior**: Executes loop body specified number of times

### WhileLoopStep
- **File**: [WhileLoopStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Loops/WhileLoopStep.cs)
- **Purpose**: Conditional loops
- **Parameters**:
  - `condition` (NodeObject): Boolean loop condition
- **Outputs**:
  - `continueLoop`: Loop body execution
  - `exit`: Loop completion
- **Behavior**: Executes loop body while condition is true

## UI Steps

### SideMessageStep
- **File**: [SideMessageStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/SideMessageStep.cs)
- **Purpose**: Display side messages
- **Parameters**:
  - `messageText` (string): Message content
  - `messageDuration` (float): Display duration
- **Behavior**: Shows message in side panel

### TimerStep
- **File**: [TimerStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/TimerStep.cs)
- **Purpose**: Countdown timers
- **Parameters**:
  - `timerDuration` (float): Timer duration
  - `showTimer` (bool): Whether to display timer UI
- **Behavior**: Counts down and optionally displays timer

### MiddleMessageOneActionsStep
- **File**: [MiddleMessageOneActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageOneActionsStep.cs)
- **Purpose**: Center messages with one action
- **Parameters**:
  - `messageText` (string): Message content
  - `actionText` (string): Action button text
- **Behavior**: Shows centered message with single action button

### MiddleMessageTwoActionsStep
- **File**: [MiddleMessageTwoActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageTwoActionsStep.cs)
- **Purpose**: Center messages with two actions
- **Parameters**:
  - `messageText` (string): Message content
  - `action1Text` (string): First action button text
  - `action2Text` (string): Second action button text
- **Behavior**: Shows centered message with two action buttons

### MCQStep
- **File**: [MCQStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MCQStep.cs)
- **Purpose**: Multiple choice questions
- **Parameters**:
  - `questionText` (string): Question content
  - `options` (string[]): Answer options
- **Behavior**: Displays question and waits for user selection

## Utility Steps

### ToggleColliderStep
- **File**: [ToggleColliderStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleColliderStep.cs)
- **Purpose**: Toggle collider components
- **Parameters**:
  - `_targetName` (RegistryItem): Object with collider
  - `enableCollider` (bool): Collider state to set
- **Behavior**: Enables/disables collider on target object

### ToggleDeviceCollidersStep
- **File**: [ToggleDeviceCollidersStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleDeviceCollidersStep.cs)
- **Purpose**: Toggle device-specific colliders
- **Parameters**:
  - `_targetName` (RegistryItem): Device object
  - `enableColliders` (bool): Collider state to set
- **Behavior**: Toggles all colliders on device object

### ToggleUIButtonInteractionStep
- **File**: [ToggleUIButtonInteractionStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleUIButtonInteractionStep.cs)
- **Purpose**: Toggle UI button interactions
- **Parameters**:
  - `_targetName` (RegistryItem): UI button
  - `enableInteraction` (bool): Interaction state to set
- **Behavior**: Enables/disables button interactions

### FreezeLabStep
- **File**: [FreezeLabStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/FreezeLabStep.cs)
- **Purpose**: Freeze/unfreeze lab interactions
- **Parameters**:
  - `freezeLab` (bool): Whether to freeze lab
- **Behavior**: Freezes or unfreezes all lab interactions

## Camera Steps

### FocusOnToolStep
- **File**: [FocusOnToolStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/FocusOnToolStep.cs)
- **Purpose**: Focus camera on specific tools
- **Parameters**:
  - `_targetName` (RegistryItem): Tool to focus on
  - `focusDuration` (float): Camera movement duration
- **Behavior**: Moves camera to focus on target tool

### ReturnCameraStep
- **File**: [ReturnCameraStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/ReturnCameraStep.cs)
- **Purpose**: Return camera to default position
- **Parameters**:
  - `returnDuration` (float): Camera movement duration
- **Behavior**: Returns camera to default position

## Tool Interaction Steps

### ToolsInputfieldStep
- **File**: [ToolsInputfieldStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInputfieldStep.cs)
- **Purpose**: Handle tool input fields
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with input field
  - `inputValue` (string): Value to set
- **Behavior**: Sets input field value on tool

### ToolsInteractionsMenuStep
- **File**: [ToolsInteractionsMenuStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInteractionsMenuStep.cs)
- **Purpose**: Handle tool interaction menus
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with menu
  - `menuAction` (string): Menu action to perform
- **Behavior**: Performs menu action on tool

### SafteyToolsStep
- **File**: [SafteyToolsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/SafteyToolsStep.cs)
- **Purpose**: Handle safety tool interactions
- **Parameters**:
  - `_targetName` (RegistryItem): Safety tool
  - `safetyAction` (string): Safety action to perform
- **Behavior**: Performs safety-related actions

## Common Patterns

### Function Call Pattern
```csharp
// Resolve object and invoke method
selectedChild = ExperimentItemsContainer.Instance.Resolve(prefabName, childName);
_selectedComponent = selectedChild.GetComponent(selectedComponent) as MonoBehaviour;
_methodReturnValue = _selectedfunction.Invoke(_selectedComponent, _selectedParameters);
```

### Control Flow Pattern
```csharp
// Evaluate condition and branch
if (_portValue)
    XnodeStepsRunner.Instance.StepIsDone("True");
else
    XnodeStepsRunner.Instance.StepIsDone("False");
```

### Loop Pattern
```csharp
// Check iteration count and continue or exit
if (_counter < iterations)
{
    _counter++;
    XnodeStepsRunner.Instance.StepIsDone("continueLoop");
}
else
{
    _counter = 0;
    XnodeStepsRunner.Instance.StepIsDone();
}
```

## Best Practices

1. **Error Handling**: Implement try-catch blocks in function calls
2. **Object Resolution**: Always resolve objects before use
3. **Timing Control**: Use DelayStep for proper timing
4. **Modularity**: Use SubGraphStep for complex procedures
5. **User Feedback**: Combine with UI steps for user communication
6. **Resource Management**: Clean up resources in Exit() method

## Integration with Other Nodes

- **Action-Executed Steps**: Provide setup/cleanup for user interactions
- **Variable Nodes**: Pass data between steps
- **Control Flow**: Create complex execution paths
- **UI Steps**: Provide user feedback and interaction

## File References

- Self-executed base: [SelfExectutedStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExectutedStep.cs)
- All self-executed nodes: [Assets/Scripts/System/xNode/Steps/SelfExecuted/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/)
- Function call base: [FunctionCallBase.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallBase.cs)
6. Gradually increase complexity in each SubGraph
7. End with summary IntroEndMessagesStep
```
# Self-Executed Step Nodes

Self-executed step nodes run automatically when reached in the graph execution flow. These nodes inherit from `SelfExectutedStep` base class and execute immediately without waiting for user input.

## Base Class

### SelfExectutedStep
- **File**: [SelfExectutedStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExectutedStep.cs)
- **Purpose**: Base class for all automatic execution nodes
- **Behavior**: Executes immediately when reached, then signals completion

## Core Steps

### FunctionCallStep
- **File**: [FunctionCallStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallStep.cs)
- **Base**: [FunctionCallBase.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallBase.cs)
- **NodeTint**: `#40534C` (Dark Green)
- **Menu Path**: "Function Call/Function Call"
- **Purpose**: Call methods on GameObjects
- **Parameters**:
  - `_calledObjectName` (RegistryItem): Target object
  - `selectedComponent` (string): Component name
  - `selectedFunction` (string): Method name
  - `parameterValues` (SerializableParameter[]): Method parameters
- **Behavior**: Resolves object, invokes method, passes result to output

### FunctionCallGlobalStep
- **File**: [FunctionCallGlobalStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallGlobalStep.cs)
- **Purpose**: Call global/static methods
- **Parameters**: Similar to FunctionCallStep but for global methods
- **Use Cases**: Global system functions, utility methods

### FunctionCallCoroutineStep
- **File**: [FunctionCallCoroutineStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallCoroutineStep.cs)
- **Purpose**: Execute coroutines on GameObjects
- **Parameters**: Similar to FunctionCallStep but for coroutines
- **Behavior**: Starts coroutine and waits for completion

### FunctionCallCoroutineGlobalStep
- **File**: [FunctionCallCoroutineGlobalStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallCoroutineGlobalStep.cs)
- **Purpose**: Execute global coroutines
- **Use Cases**: Global async operations, system-wide coroutines

### DelayStep
- **File**: [DelayStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/DelayStep.cs)
- **Purpose**: Wait for specified time
- **Parameters**:
  - `delayTime` (float): Time to wait in seconds
- **Behavior**: Pauses execution for specified duration
- **Use Cases**: Timing control, UI animations, system delays

### SubGraphStep
- **File**: [SubGraphStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/SubGraphStep.cs)
- **Purpose**: Execute sub-graphs for modularity
- **Parameters**:
  - `subGraph` (StepsGraph): Graph to execute
- **Behavior**: Executes entire sub-graph as a single step
- **Use Cases**: Modular experiment design, reusable procedures

### HintStep
- **File**: [HintStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/HintStep.cs)
- **Purpose**: Display hints to users
- **Parameters**:
  - `hintText` (string): Text to display
  - `hintDuration` (float): How long to show hint
- **Behavior**: Shows hint message, waits for duration
- **Use Cases**: User guidance, instructions, explanations

### IntroEndMessagesStep
- **File**: [IntroEndMessagesStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/IntroEndMessagesStep.cs)
- **Purpose**: Show introduction or ending messages
- **Parameters**:
  - `messageType` (enum): Intro or End message
  - `messageText` (string): Message content
- **Behavior**: Displays formatted intro/ending message
- **Use Cases**: Experiment introductions, conclusions, phase transitions

### AnimationStep
- **File**: [AnimationStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/AnimationStep.cs)
- **Purpose**: Play animations on objects
- **Parameters**:
  - `_targetName` (RegistryItem): Object to animate
  - `animationName` (string): Animation to play
  - `animationSpeed` (float): Playback speed
- **Behavior**: Plays animation and waits for completion
- **Use Cases**: Visual feedback, object transformations, UI animations

### GameObjectSetActive
- **File**: [GameObjectSetActive.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/GameObjectSetActive.cs)
- **Purpose**: Toggle GameObject active state
- **Parameters**:
  - `_targetName` (RegistryItem): Object to toggle
  - `setActive` (bool): Active state to set
- **Behavior**: Sets object active/inactive
- **Use Cases**: Show/hide objects, enable/disable components

## Control Flow Steps

### IfStatementStep
- **File**: [IfStatementStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/IfStatementStep.cs)
- **NodeTint**: `#643843` (Dark Purple)
- **Menu Path**: "Control Flow/If Statement Step"
- **Purpose**: Conditional branching
- **Parameters**:
  - `entry` (NodeObject): Boolean input condition
- **Outputs**:
  - `True`: Path when condition is true
  - `False`: Path when condition is false
- **Behavior**: Evaluates boolean input and branches accordingly

### SwitchStep
- **File**: [SwitchStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/SwitchStep.cs)
- **Purpose**: Multi-way branching
- **Parameters**:
  - `entry` (NodeObject): Switch value
- **Outputs**: Multiple output ports for different cases
- **Behavior**: Routes execution based on input value

### SwitchEnumStep
- **File**: [SwitchEnumStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/SwitchEnumStep.cs)
- **Purpose**: Enum-based switching
- **Parameters**:
  - `entry` (NodeObject): Enum value
- **Behavior**: Routes execution based on enum value

### FirstThenStep
- **File**: [FirstThenStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/FirstThenStep.cs)
- **Purpose**: Execute first, then second branch
- **Outputs**:
  - `first`: First execution path
  - `then`: Second execution path
- **Behavior**: Executes first path, then second path

### BranchingControlStep
- **File**: [BranchingControlStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/BranchingControlStep.cs)
- **Purpose**: Complex branching logic
- **Parameters**: Multiple conditions and outputs
- **Behavior**: Advanced conditional routing

### CompositeStep
- **File**: [CompositeStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ControlFlow/CompositeStep.cs)
- **Purpose**: Combine multiple steps
- **Parameters**: Multiple input steps
- **Behavior**: Executes multiple steps in sequence

## Loop Steps

### ForLoopStep
- **File**: [ForLoopStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Loops/ForLoopStep.cs)
- **NodeTint**: `#3A1078` (Purple)
- **Menu Path**: "Loops/For loop"
- **Purpose**: Fixed iteration loops
- **Parameters**:
  - `iterations` (int): Number of iterations
- **Outputs**:
  - `continueLoop`: Loop body execution
  - `exit`: Loop completion
- **Behavior**: Executes loop body specified number of times

### WhileLoopStep
- **File**: [WhileLoopStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Loops/WhileLoopStep.cs)
- **Purpose**: Conditional loops
- **Parameters**:
  - `condition` (NodeObject): Boolean loop condition
- **Outputs**:
  - `continueLoop`: Loop body execution
  - `exit`: Loop completion
- **Behavior**: Executes loop body while condition is true

## UI Steps

### SideMessageStep
- **File**: [SideMessageStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/SideMessageStep.cs)
- **Purpose**: Display side messages
- **Parameters**:
  - `messageText` (string): Message content
  - `messageDuration` (float): Display duration
- **Behavior**: Shows message in side panel

### TimerStep
- **File**: [TimerStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/TimerStep.cs)
- **Purpose**: Countdown timers
- **Parameters**:
  - `timerDuration` (float): Timer duration
  - `showTimer` (bool): Whether to display timer UI
- **Behavior**: Counts down and optionally displays timer

### MiddleMessageOneActionsStep
- **File**: [MiddleMessageOneActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageOneActionsStep.cs)
- **Purpose**: Center messages with one action
- **Parameters**:
  - `messageText` (string): Message content
  - `actionText` (string): Action button text
- **Behavior**: Shows centered message with single action button

### MiddleMessageTwoActionsStep
- **File**: [MiddleMessageTwoActionsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MiddleMessageTwoActionsStep.cs)
- **Purpose**: Center messages with two actions
- **Parameters**:
  - `messageText` (string): Message content
  - `action1Text` (string): First action button text
  - `action2Text` (string): Second action button text
- **Behavior**: Shows centered message with two action buttons

### MCQStep
- **File**: [MCQStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/UI/MCQStep.cs)
- **Purpose**: Multiple choice questions
- **Parameters**:
  - `questionText` (string): Question content
  - `options` (string[]): Answer options
- **Behavior**: Displays question and waits for user selection

## Utility Steps

### ToggleColliderStep
- **File**: [ToggleColliderStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleColliderStep.cs)
- **Purpose**: Toggle collider components
- **Parameters**:
  - `_targetName` (RegistryItem): Object with collider
  - `enableCollider` (bool): Collider state to set
- **Behavior**: Enables/disables collider on target object

### ToggleDeviceCollidersStep
- **File**: [ToggleDeviceCollidersStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleDeviceCollidersStep.cs)
- **Purpose**: Toggle device-specific colliders
- **Parameters**:
  - `_targetName` (RegistryItem): Device object
  - `enableColliders` (bool): Collider state to set
- **Behavior**: Toggles all colliders on device object

### ToggleUIButtonInteractionStep
- **File**: [ToggleUIButtonInteractionStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/ToggleUIButtonInteractionStep.cs)
- **Purpose**: Toggle UI button interactions
- **Parameters**:
  - `_targetName` (RegistryItem): UI button
  - `enableInteraction` (bool): Interaction state to set
- **Behavior**: Enables/disables button interactions

### FreezeLabStep
- **File**: [FreezeLabStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Utility/FreezeLabStep.cs)
- **Purpose**: Freeze/unfreeze lab interactions
- **Parameters**:
  - `freezeLab` (bool): Whether to freeze lab
- **Behavior**: Freezes or unfreezes all lab interactions

## Camera Steps

### FocusOnToolStep
- **File**: [FocusOnToolStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/FocusOnToolStep.cs)
- **Purpose**: Focus camera on specific tools
- **Parameters**:
  - `_targetName` (RegistryItem): Tool to focus on
  - `focusDuration` (float): Camera movement duration
- **Behavior**: Moves camera to focus on target tool

### ReturnCameraStep
- **File**: [ReturnCameraStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/Camera/ReturnCameraStep.cs)
- **Purpose**: Return camera to default position
- **Parameters**:
  - `returnDuration` (float): Camera movement duration
- **Behavior**: Returns camera to default position

## Tool Interaction Steps

### ToolsInputfieldStep
- **File**: [ToolsInputfieldStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInputfieldStep.cs)
- **Purpose**: Handle tool input fields
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with input field
  - `inputValue` (string): Value to set
- **Behavior**: Sets input field value on tool

### ToolsInteractionsMenuStep
- **File**: [ToolsInteractionsMenuStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/ToolsInteractionsMenuStep.cs)
- **Purpose**: Handle tool interaction menus
- **Parameters**:
  - `_targetName` (RegistryItem): Tool with menu
  - `menuAction` (string): Menu action to perform
- **Behavior**: Performs menu action on tool

### SafteyToolsStep
- **File**: [SafteyToolsStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/SafteyToolsStep.cs)
- **Purpose**: Handle safety tool interactions
- **Parameters**:
  - `_targetName` (RegistryItem): Safety tool
  - `safetyAction` (string): Safety action to perform
- **Behavior**: Performs safety-related actions

## Common Patterns

### Function Call Pattern
```csharp
// Resolve object and invoke method
selectedChild = ExperimentItemsContainer.Instance.Resolve(prefabName, childName);
_selectedComponent = selectedChild.GetComponent(selectedComponent) as MonoBehaviour;
_methodReturnValue = _selectedfunction.Invoke(_selectedComponent, _selectedParameters);
```

### Control Flow Pattern
```csharp
// Evaluate condition and branch
if (_portValue)
    XnodeStepsRunner.Instance.StepIsDone("True");
else
    XnodeStepsRunner.Instance.StepIsDone("False");
```

### Loop Pattern
```csharp
// Check iteration count and continue or exit
if (_counter < iterations)
{
    _counter++;
    XnodeStepsRunner.Instance.StepIsDone("continueLoop");
}
else
{
    _counter = 0;
    XnodeStepsRunner.Instance.StepIsDone();
}
```

## Best Practices

1. **Error Handling**: Implement try-catch blocks in function calls
2. **Object Resolution**: Always resolve objects before use
3. **Timing Control**: Use DelayStep for proper timing
4. **Modularity**: Use SubGraphStep for complex procedures
5. **User Feedback**: Combine with UI steps for user communication
6. **Resource Management**: Clean up resources in Exit() method

## Integration with Other Nodes

- **Action-Executed Steps**: Provide setup/cleanup for user interactions
- **Variable Nodes**: Pass data between steps
- **Control Flow**: Create complex execution paths
- **UI Steps**: Provide user feedback and interaction

## File References

- Self-executed base: [SelfExectutedStep.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExectutedStep.cs)
- All self-executed nodes: [Assets/Scripts/System/xNode/Steps/SelfExecuted/](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/)
- Function call base: [FunctionCallBase.cs](mdc:Assets/Scripts/System/xNode/Steps/SelfExecuted/FunctionCallBase.cs)
6. Gradually increase complexity in each SubGraph
7. End with summary IntroEndMessagesStep
```