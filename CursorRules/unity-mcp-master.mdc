---
alwaysApply: true
description: Master rule for Unity MCP Bridge operations - contains all critical patterns and mandatory checks
---

# Unity MCP Bridge - Master Rule

## üö® CRITICAL RULES (Check FIRST Every Time)

### 1. JSON Format Rules (MANDATORY)
```json
// ‚úÖ CORRECT RegistryItem format
{"prefabName": "Tools", "childName": "Cube (1)"}

// ‚ùå WRONG formats - NEVER use these
{prefabName: "Tools", childName: "Cube (1)"}        // Missing quotes on keys
{"prefabName: "Tools", "childName": "Cube (1)"}     // Missing quote
{"prefabName": Tools, "childName": "Cube (1)"}      // Missing quotes on value
```

### 2. ScriptableObject Class Names (VERIFIED)
```csharp
// ‚úÖ CORRECT class names (verified in codebase)
"ExperimentItemsRegistry"  // NOT "RegistryItemData"
"ExperimentData"          // NOT "ExperimentDataSO" 
"StepsGraph"              // Confirmed working

// ‚ùå NEVER guess class names - always verify in codebase first
```

### 3. CompositeStep Pattern (CRITICAL)
```
// ‚úÖ CORRECT pattern for parallel execution
Start ‚Üí CompositeStep.entry
CompositeStep.routes ‚Üí Route A ‚Üí Logic A ‚Üí CompositeStep.entry
CompositeStep.routes ‚Üí Route B ‚Üí Logic B ‚Üí CompositeStep.entry
CompositeStep.routes ‚Üí Route C ‚Üí Logic C ‚Üí CompositeStep.entry
CompositeStep.exit ‚Üí Next Step

// ‚ùå WRONG - Don't connect routes directly to completion
```

## üéØ DECISION TREE

### Need to show/hide objects?
‚Üí **Use GameObjectSetActiveStep** (NOT FunctionCallStep)
- Parameters: `_newToolName` (RegistryItem), `_isActive` (bool)

### Need user interaction that can happen in any order?
‚Üí **Use CompositeStep pattern**
- Connect routes back to CompositeStep.entry
- Only exit when all routes complete

### Need sequential execution?
‚Üí **Chain nodes with exit ‚Üí entry connections**
- Use DelayStep for timing between actions

### Need function calls with parameters?
‚Üí **Use FunctionCallStep with parameterValues array**
- Format: `[{"parameterName": "name", "parameterValue": value, "parameterType": "Type"}]`

## üìã BEFORE EVERY ACTION CHECKLIST

### Before Setting RegistryItem Parameters:
- [ ] Use exact format: `{"prefabName": "Parent", "childName": "Child"}`
- [ ] Verify parent and child exist in registry
- [ ] Double-check JSON syntax (quotes around keys AND values)

### Before Creating ScriptableObjects:
- [ ] Search codebase for exact class name
- [ ] Verify class inherits from ScriptableObject
- [ ] Use exact string from source code

### Before Connecting Nodes:
- [ ] Identify if execution is parallel or sequential
- [ ] Use CompositeStep for parallel, direct connections for sequential
- [ ] Verify port names (entry, exit, routes)

### Before Completing Tasks:
- [ ] Test all parameters are set correctly
- [ ] Verify all connections are made
- [ ] Confirm starting point is assigned

## üîß QUICK REFERENCE

### Common Step Nodes
| Need | Use | Key Parameters |
|------|-----|----------------|
| Show/Hide Objects | GameObjectSetActiveStep | `_newToolName`, `_isActive` |
| User Clicks | ClickStep | `_targetName` |
| Function Calls | FunctionCallStep | `_calledObjectName`, `selectedComponent`, `selectedFunction` |
| Delays | DelayStep | `timeToWait` |
| Parallel Routes | CompositeStep | Connect routes back to entry |
| Messages | SideMessageStep | `messageID` |

### Connection Patterns
```
Sequential: Node1.exit ‚Üí Node2.entry ‚Üí Node3.entry
Parallel: CompositeStep.routes ‚Üí [Node1, Node2, Node3] ‚Üí CompositeStep.entry
```

## ‚ùå COMMON ERRORS TO AVOID

1. **Wrong JSON Format**: Always use double quotes around keys and values
2. **Wrong ScriptableObject Names**: Always verify in codebase first
3. **Missing CompositeStep Routes**: Routes must connect back to entry
4. **Wrong Step Node Type**: Use GameObjectSetActiveStep for visibility, not FunctionCallStep

## üèóÔ∏è EXPERIMENT PATTERNS

### Educational Pattern (PhotoElectric Style)
```
Setup ‚Üí Hints ‚Üí Sequential Steps ‚Üí User Interaction ‚Üí Results
```

### Interactive Demo Pattern  
```
Setup ‚Üí Sequential Appearance ‚Üí Parallel Interaction ‚Üí Completion
```

### Data Collection Pattern
```
Setup ‚Üí Loops ‚Üí Measurements ‚Üí Analysis ‚Üí Results
```

## üÜò TROUBLESHOOTING

### "Parameter not found" errors:
1. Use `list_node_parameters` to see available parameters
2. Check parameter name spelling and case
3. Verify node type supports the parameter

### "Instance couldn't be created" errors:
1. Search codebase for exact class name
2. Verify class exists and inherits from ScriptableObject
3. Use exact string from source code

### Connection errors:
1. Verify port names (entry, exit, routes)
2. Check if nodes support the connection type
3. Ensure proper flow direction

---
**Remember: When in doubt, always verify in the codebase first!**