//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/virtual-labs/Scripts/System/Inputs/InputScriptable/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""ScreenPress"",
            ""id"": ""235458c6-e285-48fc-aa4b-a57901b76499"",
            ""actions"": [
                {
                    ""name"": ""LeftPress"",
                    ""type"": ""Button"",
                    ""id"": ""e2f7b70e-35c5-45ef-b235-b80e9b1787cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPress"",
                    ""type"": ""Button"",
                    ""id"": ""9140de3d-69c8-4449-9ba5-557b2d469231"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddlePress"",
                    ""type"": ""Button"",
                    ""id"": ""630d16ee-e9a5-4c6a-ba97-c34ecd6c3caa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""e7e2d8b2-73c6-4449-97a6-c05dda6d0137"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""58d75adb-8b9b-4e17-ac41-48176b869182"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""144e85b9-834f-46b0-860d-71e100f00b9c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81284b6e-237c-4995-8d1d-7201b084bf68"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a527584-1fe7-41eb-9c36-9b40dcd45894"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3281647-deee-4f7c-a469-377330d2cb29"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dca7675-c330-4cea-a034-225ed4d9033a"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddlePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ec4676e-9cab-492c-abc2-c334a9a040ea"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddlePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f6078b7-97e1-4767-b125-c862b27ec2d1"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=1,max=-1)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e744704-4dfe-452c-a9b0-c53670b7161e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ScreenPosition"",
            ""id"": ""38656837-6a2f-4c4c-bceb-319b656d2766"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""8df05f77-61a9-4c91-b709-ed58399f61fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""11c1d87f-fb2d-45f3-807c-424d64f81009"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b81a2884-7327-40d3-b91b-9fccf30cda3b"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Axis"",
            ""id"": ""5c193ff6-c31f-4d47-aed3-37ce0a5e9dd1"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e993f9d1-c9c0-4847-be60-b7657353be53"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""PassThrough"",
                    ""id"": ""77e3996d-3cba-4153-85c1-534849b4b955"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScrollWheel"",
                    ""type"": ""Value"",
                    ""id"": ""71edc7cd-2aa1-4bda-a845-c7b40bdcde72"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseAxis"",
                    ""type"": ""Value"",
                    ""id"": ""8fe78811-d943-4ec5-99a5-4fc4ed5eca2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""257d68b2-7964-4a09-a124-e6673be12fa7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0c069f4e-b5fc-431a-8b68-b2a81ddb80b9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb54104d-807b-417b-9e68-1ec092b29ad8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""23d5bc76-5e0d-4c61-8078-137cfb51aee6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""00ae631c-0542-4d3a-9d5b-bea3a9cd0880"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a680f24e-886c-47d4-94e9-38dcecd9aa6f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollWheel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""9d3189e1-a8b1-40c6-b7a2-ae94edf42b33"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""454ecee2-6771-40bf-9d94-44e3e5b99d84"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3ad468b7-0082-44d3-9d5d-bb106c9801c4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""56917231-7345-413d-b83c-d08c424c6f72"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0ca7f660-a48b-4174-b191-c8bb8f1a21f7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0b3e25fc-7f08-4e20-b280-98584228f728"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""67486e3f-7b2c-4fd6-a1e9-d5f8a443e38b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5e992811-9af4-42bd-8b20-20d68d9795b0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeyBoard"",
            ""id"": ""91f36403-2028-4663-bb06-ede47c2256dd"",
            ""actions"": [
                {
                    ""name"": ""BrowseInstructions"",
                    ""type"": ""Button"",
                    ""id"": ""47c265ae-43cb-4779-ab38-8cd21e2c74df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowStages"",
                    ""type"": ""Button"",
                    ""id"": ""bb8d8df8-0f7a-43ce-b1d8-bbf146ba5219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockRotation"",
                    ""type"": ""Button"",
                    ""id"": ""63e79335-1686-4901-b84a-34a4ce03ac0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockPosition"",
                    ""type"": ""Button"",
                    ""id"": ""0acb09f4-8a92-4842-8ae6-883687278522"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Freeze"",
                    ""type"": ""Button"",
                    ""id"": ""3343b30e-dbae-4a9e-bdaf-26977dd4f8e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BirdEye"",
                    ""type"": ""Button"",
                    ""id"": ""72e8749d-1fd6-4481-96f3-f5cc6812445d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SettingMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b72920d2-92d7-4e0a-801e-69b3ea05324e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InterestPoint"",
                    ""type"": ""Button"",
                    ""id"": ""e7761953-a44f-4f2e-b114-4e0d32099300"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCameraSide"",
                    ""type"": ""Button"",
                    ""id"": ""b2aaf61e-d6c3-4bd9-92e7-42322fdcee90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""45ceb050-6b33-46c6-a5a3-7c5c74e5051a"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrowseInstructions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""80ee2016-921f-45a0-b799-449dbf338fd1"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrowseInstructions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""bc93e93d-4490-4018-b22d-61791d0cbd42"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrowseInstructions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""21291868-88ef-49fd-9024-be542bc4d095"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowStages"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""c5b67e78-222d-4693-a6b5-771b529f5bc6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowStages"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""dcbfbbec-d534-415d-8329-a694b11bb119"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowStages"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""9df6b393-f928-48a4-bec1-e3cb56a13467"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowStages"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cf62c0ea-a58c-44fe-b810-f1c5e2b8b586"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09a0fa55-7fba-40c3-91f2-bb5ae5850952"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5df74bca-e1d7-4c9d-80ba-5b77e832d829"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Freeze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f27b720a-edec-4dcb-8e1d-9183c75b360b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BirdEye"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48cbbbbb-f8ff-44dc-809d-621922e2b09a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InterestPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51d4700d-9aaa-4b8a-a812-fe9840d318ee"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCameraSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b39463d-168b-4178-a9b9-331c9a49ac1f"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SettingMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ScreenPress
        m_ScreenPress = asset.FindActionMap("ScreenPress", throwIfNotFound: true);
        m_ScreenPress_LeftPress = m_ScreenPress.FindAction("LeftPress", throwIfNotFound: true);
        m_ScreenPress_RightPress = m_ScreenPress.FindAction("RightPress", throwIfNotFound: true);
        m_ScreenPress_MiddlePress = m_ScreenPress.FindAction("MiddlePress", throwIfNotFound: true);
        m_ScreenPress_Zoom = m_ScreenPress.FindAction("Zoom", throwIfNotFound: true);
        m_ScreenPress_Reset = m_ScreenPress.FindAction("Reset", throwIfNotFound: true);
        // ScreenPosition
        m_ScreenPosition = asset.FindActionMap("ScreenPosition", throwIfNotFound: true);
        m_ScreenPosition_Position = m_ScreenPosition.FindAction("Position", throwIfNotFound: true);
        // Axis
        m_Axis = asset.FindActionMap("Axis", throwIfNotFound: true);
        m_Axis_Horizontal = m_Axis.FindAction("Horizontal", throwIfNotFound: true);
        m_Axis_Vertical = m_Axis.FindAction("Vertical", throwIfNotFound: true);
        m_Axis_MouseScrollWheel = m_Axis.FindAction("MouseScrollWheel", throwIfNotFound: true);
        m_Axis_MouseAxis = m_Axis.FindAction("MouseAxis", throwIfNotFound: true);
        // KeyBoard
        m_KeyBoard = asset.FindActionMap("KeyBoard", throwIfNotFound: true);
        m_KeyBoard_BrowseInstructions = m_KeyBoard.FindAction("BrowseInstructions", throwIfNotFound: true);
        m_KeyBoard_ShowStages = m_KeyBoard.FindAction("ShowStages", throwIfNotFound: true);
        m_KeyBoard_LockRotation = m_KeyBoard.FindAction("LockRotation", throwIfNotFound: true);
        m_KeyBoard_LockPosition = m_KeyBoard.FindAction("LockPosition", throwIfNotFound: true);
        m_KeyBoard_Freeze = m_KeyBoard.FindAction("Freeze", throwIfNotFound: true);
        m_KeyBoard_BirdEye = m_KeyBoard.FindAction("BirdEye", throwIfNotFound: true);
        m_KeyBoard_SettingMenu = m_KeyBoard.FindAction("SettingMenu", throwIfNotFound: true);
        m_KeyBoard_InterestPoint = m_KeyBoard.FindAction("InterestPoint", throwIfNotFound: true);
        m_KeyBoard_SwitchCameraSide = m_KeyBoard.FindAction("SwitchCameraSide", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ScreenPress
    private readonly InputActionMap m_ScreenPress;
    private List<IScreenPressActions> m_ScreenPressActionsCallbackInterfaces = new List<IScreenPressActions>();
    private readonly InputAction m_ScreenPress_LeftPress;
    private readonly InputAction m_ScreenPress_RightPress;
    private readonly InputAction m_ScreenPress_MiddlePress;
    private readonly InputAction m_ScreenPress_Zoom;
    private readonly InputAction m_ScreenPress_Reset;
    public struct ScreenPressActions
    {
        private @InputController m_Wrapper;
        public ScreenPressActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPress => m_Wrapper.m_ScreenPress_LeftPress;
        public InputAction @RightPress => m_Wrapper.m_ScreenPress_RightPress;
        public InputAction @MiddlePress => m_Wrapper.m_ScreenPress_MiddlePress;
        public InputAction @Zoom => m_Wrapper.m_ScreenPress_Zoom;
        public InputAction @Reset => m_Wrapper.m_ScreenPress_Reset;
        public InputActionMap Get() { return m_Wrapper.m_ScreenPress; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScreenPressActions set) { return set.Get(); }
        public void AddCallbacks(IScreenPressActions instance)
        {
            if (instance == null || m_Wrapper.m_ScreenPressActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScreenPressActionsCallbackInterfaces.Add(instance);
            @LeftPress.started += instance.OnLeftPress;
            @LeftPress.performed += instance.OnLeftPress;
            @LeftPress.canceled += instance.OnLeftPress;
            @RightPress.started += instance.OnRightPress;
            @RightPress.performed += instance.OnRightPress;
            @RightPress.canceled += instance.OnRightPress;
            @MiddlePress.started += instance.OnMiddlePress;
            @MiddlePress.performed += instance.OnMiddlePress;
            @MiddlePress.canceled += instance.OnMiddlePress;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
        }

        private void UnregisterCallbacks(IScreenPressActions instance)
        {
            @LeftPress.started -= instance.OnLeftPress;
            @LeftPress.performed -= instance.OnLeftPress;
            @LeftPress.canceled -= instance.OnLeftPress;
            @RightPress.started -= instance.OnRightPress;
            @RightPress.performed -= instance.OnRightPress;
            @RightPress.canceled -= instance.OnRightPress;
            @MiddlePress.started -= instance.OnMiddlePress;
            @MiddlePress.performed -= instance.OnMiddlePress;
            @MiddlePress.canceled -= instance.OnMiddlePress;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
        }

        public void RemoveCallbacks(IScreenPressActions instance)
        {
            if (m_Wrapper.m_ScreenPressActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScreenPressActions instance)
        {
            foreach (var item in m_Wrapper.m_ScreenPressActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScreenPressActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScreenPressActions @ScreenPress => new ScreenPressActions(this);

    // ScreenPosition
    private readonly InputActionMap m_ScreenPosition;
    private List<IScreenPositionActions> m_ScreenPositionActionsCallbackInterfaces = new List<IScreenPositionActions>();
    private readonly InputAction m_ScreenPosition_Position;
    public struct ScreenPositionActions
    {
        private @InputController m_Wrapper;
        public ScreenPositionActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_ScreenPosition_Position;
        public InputActionMap Get() { return m_Wrapper.m_ScreenPosition; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScreenPositionActions set) { return set.Get(); }
        public void AddCallbacks(IScreenPositionActions instance)
        {
            if (instance == null || m_Wrapper.m_ScreenPositionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScreenPositionActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
        }

        private void UnregisterCallbacks(IScreenPositionActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        public void RemoveCallbacks(IScreenPositionActions instance)
        {
            if (m_Wrapper.m_ScreenPositionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScreenPositionActions instance)
        {
            foreach (var item in m_Wrapper.m_ScreenPositionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScreenPositionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScreenPositionActions @ScreenPosition => new ScreenPositionActions(this);

    // Axis
    private readonly InputActionMap m_Axis;
    private List<IAxisActions> m_AxisActionsCallbackInterfaces = new List<IAxisActions>();
    private readonly InputAction m_Axis_Horizontal;
    private readonly InputAction m_Axis_Vertical;
    private readonly InputAction m_Axis_MouseScrollWheel;
    private readonly InputAction m_Axis_MouseAxis;
    public struct AxisActions
    {
        private @InputController m_Wrapper;
        public AxisActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_Axis_Horizontal;
        public InputAction @Vertical => m_Wrapper.m_Axis_Vertical;
        public InputAction @MouseScrollWheel => m_Wrapper.m_Axis_MouseScrollWheel;
        public InputAction @MouseAxis => m_Wrapper.m_Axis_MouseAxis;
        public InputActionMap Get() { return m_Wrapper.m_Axis; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AxisActions set) { return set.Get(); }
        public void AddCallbacks(IAxisActions instance)
        {
            if (instance == null || m_Wrapper.m_AxisActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AxisActionsCallbackInterfaces.Add(instance);
            @Horizontal.started += instance.OnHorizontal;
            @Horizontal.performed += instance.OnHorizontal;
            @Horizontal.canceled += instance.OnHorizontal;
            @Vertical.started += instance.OnVertical;
            @Vertical.performed += instance.OnVertical;
            @Vertical.canceled += instance.OnVertical;
            @MouseScrollWheel.started += instance.OnMouseScrollWheel;
            @MouseScrollWheel.performed += instance.OnMouseScrollWheel;
            @MouseScrollWheel.canceled += instance.OnMouseScrollWheel;
            @MouseAxis.started += instance.OnMouseAxis;
            @MouseAxis.performed += instance.OnMouseAxis;
            @MouseAxis.canceled += instance.OnMouseAxis;
        }

        private void UnregisterCallbacks(IAxisActions instance)
        {
            @Horizontal.started -= instance.OnHorizontal;
            @Horizontal.performed -= instance.OnHorizontal;
            @Horizontal.canceled -= instance.OnHorizontal;
            @Vertical.started -= instance.OnVertical;
            @Vertical.performed -= instance.OnVertical;
            @Vertical.canceled -= instance.OnVertical;
            @MouseScrollWheel.started -= instance.OnMouseScrollWheel;
            @MouseScrollWheel.performed -= instance.OnMouseScrollWheel;
            @MouseScrollWheel.canceled -= instance.OnMouseScrollWheel;
            @MouseAxis.started -= instance.OnMouseAxis;
            @MouseAxis.performed -= instance.OnMouseAxis;
            @MouseAxis.canceled -= instance.OnMouseAxis;
        }

        public void RemoveCallbacks(IAxisActions instance)
        {
            if (m_Wrapper.m_AxisActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAxisActions instance)
        {
            foreach (var item in m_Wrapper.m_AxisActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AxisActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AxisActions @Axis => new AxisActions(this);

    // KeyBoard
    private readonly InputActionMap m_KeyBoard;
    private List<IKeyBoardActions> m_KeyBoardActionsCallbackInterfaces = new List<IKeyBoardActions>();
    private readonly InputAction m_KeyBoard_BrowseInstructions;
    private readonly InputAction m_KeyBoard_ShowStages;
    private readonly InputAction m_KeyBoard_LockRotation;
    private readonly InputAction m_KeyBoard_LockPosition;
    private readonly InputAction m_KeyBoard_Freeze;
    private readonly InputAction m_KeyBoard_BirdEye;
    private readonly InputAction m_KeyBoard_SettingMenu;
    private readonly InputAction m_KeyBoard_InterestPoint;
    private readonly InputAction m_KeyBoard_SwitchCameraSide;
    public struct KeyBoardActions
    {
        private @InputController m_Wrapper;
        public KeyBoardActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @BrowseInstructions => m_Wrapper.m_KeyBoard_BrowseInstructions;
        public InputAction @ShowStages => m_Wrapper.m_KeyBoard_ShowStages;
        public InputAction @LockRotation => m_Wrapper.m_KeyBoard_LockRotation;
        public InputAction @LockPosition => m_Wrapper.m_KeyBoard_LockPosition;
        public InputAction @Freeze => m_Wrapper.m_KeyBoard_Freeze;
        public InputAction @BirdEye => m_Wrapper.m_KeyBoard_BirdEye;
        public InputAction @SettingMenu => m_Wrapper.m_KeyBoard_SettingMenu;
        public InputAction @InterestPoint => m_Wrapper.m_KeyBoard_InterestPoint;
        public InputAction @SwitchCameraSide => m_Wrapper.m_KeyBoard_SwitchCameraSide;
        public InputActionMap Get() { return m_Wrapper.m_KeyBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyBoardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Add(instance);
            @BrowseInstructions.started += instance.OnBrowseInstructions;
            @BrowseInstructions.performed += instance.OnBrowseInstructions;
            @BrowseInstructions.canceled += instance.OnBrowseInstructions;
            @ShowStages.started += instance.OnShowStages;
            @ShowStages.performed += instance.OnShowStages;
            @ShowStages.canceled += instance.OnShowStages;
            @LockRotation.started += instance.OnLockRotation;
            @LockRotation.performed += instance.OnLockRotation;
            @LockRotation.canceled += instance.OnLockRotation;
            @LockPosition.started += instance.OnLockPosition;
            @LockPosition.performed += instance.OnLockPosition;
            @LockPosition.canceled += instance.OnLockPosition;
            @Freeze.started += instance.OnFreeze;
            @Freeze.performed += instance.OnFreeze;
            @Freeze.canceled += instance.OnFreeze;
            @BirdEye.started += instance.OnBirdEye;
            @BirdEye.performed += instance.OnBirdEye;
            @BirdEye.canceled += instance.OnBirdEye;
            @SettingMenu.started += instance.OnSettingMenu;
            @SettingMenu.performed += instance.OnSettingMenu;
            @SettingMenu.canceled += instance.OnSettingMenu;
            @InterestPoint.started += instance.OnInterestPoint;
            @InterestPoint.performed += instance.OnInterestPoint;
            @InterestPoint.canceled += instance.OnInterestPoint;
            @SwitchCameraSide.started += instance.OnSwitchCameraSide;
            @SwitchCameraSide.performed += instance.OnSwitchCameraSide;
            @SwitchCameraSide.canceled += instance.OnSwitchCameraSide;
        }

        private void UnregisterCallbacks(IKeyBoardActions instance)
        {
            @BrowseInstructions.started -= instance.OnBrowseInstructions;
            @BrowseInstructions.performed -= instance.OnBrowseInstructions;
            @BrowseInstructions.canceled -= instance.OnBrowseInstructions;
            @ShowStages.started -= instance.OnShowStages;
            @ShowStages.performed -= instance.OnShowStages;
            @ShowStages.canceled -= instance.OnShowStages;
            @LockRotation.started -= instance.OnLockRotation;
            @LockRotation.performed -= instance.OnLockRotation;
            @LockRotation.canceled -= instance.OnLockRotation;
            @LockPosition.started -= instance.OnLockPosition;
            @LockPosition.performed -= instance.OnLockPosition;
            @LockPosition.canceled -= instance.OnLockPosition;
            @Freeze.started -= instance.OnFreeze;
            @Freeze.performed -= instance.OnFreeze;
            @Freeze.canceled -= instance.OnFreeze;
            @BirdEye.started -= instance.OnBirdEye;
            @BirdEye.performed -= instance.OnBirdEye;
            @BirdEye.canceled -= instance.OnBirdEye;
            @SettingMenu.started -= instance.OnSettingMenu;
            @SettingMenu.performed -= instance.OnSettingMenu;
            @SettingMenu.canceled -= instance.OnSettingMenu;
            @InterestPoint.started -= instance.OnInterestPoint;
            @InterestPoint.performed -= instance.OnInterestPoint;
            @InterestPoint.canceled -= instance.OnInterestPoint;
            @SwitchCameraSide.started -= instance.OnSwitchCameraSide;
            @SwitchCameraSide.performed -= instance.OnSwitchCameraSide;
            @SwitchCameraSide.canceled -= instance.OnSwitchCameraSide;
        }

        public void RemoveCallbacks(IKeyBoardActions instance)
        {
            if (m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyBoardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyBoardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyBoardActions @KeyBoard => new KeyBoardActions(this);
    public interface IScreenPressActions
    {
        void OnLeftPress(InputAction.CallbackContext context);
        void OnRightPress(InputAction.CallbackContext context);
        void OnMiddlePress(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
    public interface IScreenPositionActions
    {
        void OnPosition(InputAction.CallbackContext context);
    }
    public interface IAxisActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnMouseScrollWheel(InputAction.CallbackContext context);
        void OnMouseAxis(InputAction.CallbackContext context);
    }
    public interface IKeyBoardActions
    {
        void OnBrowseInstructions(InputAction.CallbackContext context);
        void OnShowStages(InputAction.CallbackContext context);
        void OnLockRotation(InputAction.CallbackContext context);
        void OnLockPosition(InputAction.CallbackContext context);
        void OnFreeze(InputAction.CallbackContext context);
        void OnBirdEye(InputAction.CallbackContext context);
        void OnSettingMenu(InputAction.CallbackContext context);
        void OnInterestPoint(InputAction.CallbackContext context);
        void OnSwitchCameraSide(InputAction.CallbackContext context);
    }
}
